
/Users/arjan/Documents/EdgeImpulse/Firmware/edgeimpulse/firmware-particle/target/5.4.1/p2/firmware-particle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fc090  085fb0a8  0000c090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00003f5c  023fc0a0  085fb0b0  0000c0a0  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000180  1007a89c  085ff00c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005cc  1007aa1c  1007aa1c  0002aa1c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff18c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000e28  085ff190  085ff190  0001f190  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f190  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001927b1  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014c77  00000000  00000000  001b27b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0005a1d7  00000000  00000000  001c7428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003540  00000000  00000000  002215ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000f618  00000000  00000000  00224b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000263ed  00000000  00000000  00234157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00050955  00000000  00000000  0025a544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0013dfc5  00000000  00000000  002aae99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a41c  00000000  00000000  003e8e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	4813      	ldr	r0, [pc, #76]	; (85fb068 <module_user_pre_init+0x50>)
 85fb01a:	4914      	ldr	r1, [pc, #80]	; (85fb06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a13      	ldr	r2, [pc, #76]	; (85fb070 <module_user_pre_init+0x58>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b12      	ldr	r3, [pc, #72]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	4812      	ldr	r0, [pc, #72]	; (85fb078 <module_user_pre_init+0x60>)
 85fb030:	4a12      	ldr	r2, [pc, #72]	; (85fb07c <module_user_pre_init+0x64>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b12      	ldr	r3, [pc, #72]	; (85fb080 <module_user_pre_init+0x68>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fb03a:	4812      	ldr	r0, [pc, #72]	; (85fb084 <module_user_pre_init+0x6c>)
 85fb03c:	4912      	ldr	r1, [pc, #72]	; (85fb088 <module_user_pre_init+0x70>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a12      	ldr	r2, [pc, #72]	; (85fb08c <module_user_pre_init+0x74>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fb048:	4b0a      	ldr	r3, [pc, #40]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb04e:	4810      	ldr	r0, [pc, #64]	; (85fb090 <module_user_pre_init+0x78>)
 85fb050:	4910      	ldr	r1, [pc, #64]	; (85fb094 <module_user_pre_init+0x7c>)
 85fb052:	4288      	cmp	r0, r1
 85fb054:	d005      	beq.n	85fb062 <module_user_pre_init+0x4a>
 85fb056:	4a10      	ldr	r2, [pc, #64]	; (85fb098 <module_user_pre_init+0x80>)
 85fb058:	4282      	cmp	r2, r0
 85fb05a:	d002      	beq.n	85fb062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb05c:	4b05      	ldr	r3, [pc, #20]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb05e:	1a12      	subs	r2, r2, r0
 85fb060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb062:	4801      	ldr	r0, [pc, #4]	; (85fb068 <module_user_pre_init+0x50>)
 85fb064:	bd08      	pop	{r3, pc}
 85fb066:	bf00      	nop
 85fb068:	1007a89c 	.word	0x1007a89c
 85fb06c:	085ff00c 	.word	0x085ff00c
 85fb070:	1007aa1c 	.word	0x1007aa1c
 85fb074:	10110d2d 	.word	0x10110d2d
 85fb078:	1007aa1c 	.word	0x1007aa1c
 85fb07c:	1007afe8 	.word	0x1007afe8
 85fb080:	10110ea1 	.word	0x10110ea1
 85fb084:	023fc090 	.word	0x023fc090
 85fb088:	085fb0a8 	.word	0x085fb0a8
 85fb08c:	023fc098 	.word	0x023fc098
 85fb090:	023fc0a0 	.word	0x023fc0a0
 85fb094:	085fb0b0 	.word	0x085fb0b0
 85fb098:	023ffffc 	.word	0x023ffffc

085fb09c <dynalib_preinit>:
 85fb09c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fc0a0 <strcmp>:
 23fc0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fc0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fc0a8:	2a01      	cmp	r2, #1
 23fc0aa:	bf28      	it	cs
 23fc0ac:	429a      	cmpcs	r2, r3
 23fc0ae:	d0f7      	beq.n	23fc0a0 <strcmp>
 23fc0b0:	1ad0      	subs	r0, r2, r3
 23fc0b2:	4770      	bx	lr

023fc0b4 <strlen>:
 23fc0b4:	4603      	mov	r3, r0
 23fc0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc0ba:	2a00      	cmp	r2, #0
 23fc0bc:	d1fb      	bne.n	23fc0b6 <strlen+0x2>
 23fc0be:	1a18      	subs	r0, r3, r0
 23fc0c0:	3801      	subs	r0, #1
 23fc0c2:	4770      	bx	lr

023fc0c4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fc0c4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fc0c6:	f002 fe61 	bl	23fed8c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc0ca:	2500      	movs	r5, #0
 23fc0cc:	4e05      	ldr	r6, [pc, #20]	; (23fc0e4 <module_user_init+0x20>)
 23fc0ce:	4c06      	ldr	r4, [pc, #24]	; (23fc0e8 <module_user_init+0x24>)
 23fc0d0:	1ba4      	subs	r4, r4, r6
 23fc0d2:	08a4      	lsrs	r4, r4, #2
 23fc0d4:	42ac      	cmp	r4, r5
 23fc0d6:	d100      	bne.n	23fc0da <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fc0d8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fc0da:	f856 3b04 	ldr.w	r3, [r6], #4
 23fc0de:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc0e0:	3501      	adds	r5, #1
 23fc0e2:	e7f7      	b.n	23fc0d4 <module_user_init+0x10>
 23fc0e4:	023fffd0 	.word	0x023fffd0
 23fc0e8:	023ffffc 	.word	0x023ffffc

023fc0ec <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fc0ec:	f000 b8a0 	b.w	23fc230 <setup>

023fc0f0 <module_user_loop>:
}

void module_user_loop() {
 23fc0f0:	b508      	push	{r3, lr}
    loop();
 23fc0f2:	f000 f91d 	bl	23fc330 <loop>
    _post_loop();
}
 23fc0f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fc0fa:	f002 bdff 	b.w	23fecfc <_post_loop>

023fc0fe <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fc0fe:	f000 becd 	b.w	23fce9c <malloc>

023fc102 <_Znaj>:
 23fc102:	f000 becb 	b.w	23fce9c <malloc>

023fc106 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fc106:	f000 bed7 	b.w	23fceb8 <free>
	...

023fc10c <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc10c:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fc10e:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc110:	4a02      	ldr	r2, [pc, #8]	; (23fc11c <__cxa_pure_virtual+0x10>)
 23fc112:	4903      	ldr	r1, [pc, #12]	; (23fc120 <__cxa_pure_virtual+0x14>)
 23fc114:	f000 fd80 	bl	23fcc18 <panic_>
  while (1);
 23fc118:	e7fe      	b.n	23fc118 <__cxa_pure_virtual+0xc>
 23fc11a:	bf00      	nop
 23fc11c:	023fc765 	.word	0x023fc765
 23fc120:	023ff400 	.word	0x023ff400

023fc124 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fc124:	7800      	ldrb	r0, [r0, #0]
 23fc126:	fab0 f080 	clz	r0, r0
 23fc12a:	0940      	lsrs	r0, r0, #5
 23fc12c:	4770      	bx	lr

023fc12e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fc12e:	2301      	movs	r3, #1
 23fc130:	7003      	strb	r3, [r0, #0]
 23fc132:	4770      	bx	lr

023fc134 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23fc134:	4770      	bx	lr

023fc136 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fc136:	4770      	bx	lr

023fc138 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23fc138:	b510      	push	{r4, lr}
 23fc13a:	4604      	mov	r4, r0
  }
 23fc13c:	2110      	movs	r1, #16
 23fc13e:	f7ff ffe2 	bl	23fc106 <_ZdlPvj>
 23fc142:	4620      	mov	r0, r4
 23fc144:	bd10      	pop	{r4, pc}
	...

023fc148 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fc148:	b510      	push	{r4, lr}
 23fc14a:	4604      	mov	r4, r0
 23fc14c:	4b09      	ldr	r3, [pc, #36]	; (23fc174 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fc14e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fc150:	f001 fba0 	bl	23fd894 <_ZN5spark10LogManager8instanceEv>
 23fc154:	4621      	mov	r1, r4
 23fc156:	f001 fdd7 	bl	23fdd08 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fc15a:	f002 fd3f 	bl	23febdc <_Z16_fetch_usbserialv>
 23fc15e:	f002 fd2f 	bl	23febc0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fc162:	4620      	mov	r0, r4
 23fc164:	4b04      	ldr	r3, [pc, #16]	; (23fc178 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fc166:	f840 3b04 	str.w	r3, [r0], #4
 23fc16a:	f001 fc69 	bl	23fda40 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fc16e:	4620      	mov	r0, r4
 23fc170:	bd10      	pop	{r4, pc}
 23fc172:	bf00      	nop
 23fc174:	023ff524 	.word	0x023ff524
 23fc178:	023ff50c 	.word	0x023ff50c

023fc17c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fc17c:	b510      	push	{r4, lr}
 23fc17e:	4604      	mov	r4, r0
    }
 23fc180:	f7ff ffe2 	bl	23fc148 <_ZN5spark16SerialLogHandlerD1Ev>
 23fc184:	4620      	mov	r0, r4
 23fc186:	2124      	movs	r1, #36	; 0x24
 23fc188:	f7ff ffbd 	bl	23fc106 <_ZdlPvj>
 23fc18c:	4620      	mov	r0, r4
 23fc18e:	bd10      	pop	{r4, pc}

023fc190 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fc190:	b40e      	push	{r1, r2, r3}
 23fc192:	b503      	push	{r0, r1, lr}
 23fc194:	ab03      	add	r3, sp, #12
 23fc196:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23fc19a:	2100      	movs	r1, #0
        va_start(args, format);
 23fc19c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fc19e:	f002 fab8 	bl	23fe712 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fc1a2:	b002      	add	sp, #8
 23fc1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc1a8:	b003      	add	sp, #12
 23fc1aa:	4770      	bx	lr

023fc1ac <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23fc1ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc1ae:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23fc1b0:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23fc1b2:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23fc1b4:	68a3      	ldr	r3, [r4, #8]
 23fc1b6:	b132      	cbz	r2, 23fc1c6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23fc1b8:	b9a3      	cbnz	r3, 23fc1e4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23fc1ba:	490b      	ldr	r1, [pc, #44]	; (23fc1e8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23fc1bc:	b002      	add	sp, #8
 23fc1be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23fc1c2:	f002 ba75 	b.w	23fe6b0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fc1c6:	4a09      	ldr	r2, [pc, #36]	; (23fc1ec <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23fc1c8:	7b26      	ldrb	r6, [r4, #12]
 23fc1ca:	4d09      	ldr	r5, [pc, #36]	; (23fc1f0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23fc1cc:	4909      	ldr	r1, [pc, #36]	; (23fc1f4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23fc1ce:	7b64      	ldrb	r4, [r4, #13]
 23fc1d0:	2e01      	cmp	r6, #1
 23fc1d2:	bf18      	it	ne
 23fc1d4:	4629      	movne	r1, r5
 23fc1d6:	e9cd 1400 	strd	r1, r4, [sp]
 23fc1da:	4907      	ldr	r1, [pc, #28]	; (23fc1f8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23fc1dc:	f7ff ffd8 	bl	23fc190 <_ZN5Print6printfEPKcz>
  }
 23fc1e0:	b002      	add	sp, #8
 23fc1e2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fc1e4:	4a05      	ldr	r2, [pc, #20]	; (23fc1fc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23fc1e6:	e7ef      	b.n	23fc1c8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23fc1e8:	023ff426 	.word	0x023ff426
 23fc1ec:	023ff4b8 	.word	0x023ff4b8
 23fc1f0:	023ff422 	.word	0x023ff422
 23fc1f4:	023ff41e 	.word	0x023ff41e
 23fc1f8:	023ff43c 	.word	0x023ff43c
 23fc1fc:	023ff415 	.word	0x023ff415

023fc200 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
 23fc200:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fc202:	f04f 0c20 	mov.w	ip, #32
 23fc206:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23fc208:	b500      	push	{lr}
 23fc20a:	b08c      	sub	sp, #48	; 0x30
 23fc20c:	aa0d      	add	r2, sp, #52	; 0x34
 23fc20e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fc212:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc216:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fc21a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc21c:	6801      	ldr	r1, [r0, #0]
 23fc21e:	aa04      	add	r2, sp, #16
 23fc220:	2032      	movs	r0, #50	; 0x32
 23fc222:	f000 fd07 	bl	23fcc34 <log_message_v>
}
 23fc226:	b00c      	add	sp, #48	; 0x30
 23fc228:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc22c:	b003      	add	sp, #12
 23fc22e:	4770      	bx	lr

023fc230 <setup>:

/**
 * @brief      Particle setup function
 */
void setup()
{
 23fc230:	b530      	push	{r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fc232:	2000      	movs	r0, #0
 23fc234:	b089      	sub	sp, #36	; 0x24
 23fc236:	f000 fab1 	bl	23fc79c <hal_timer_millis>
        while (_while() && !_condition()) {
 23fc23a:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23fc23e:	4604      	mov	r4, r0
 23fc240:	2000      	movs	r0, #0
 23fc242:	f000 faab 	bl	23fc79c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fc246:	1b00      	subs	r0, r0, r4
 23fc248:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fc24c:	42a8      	cmp	r0, r5
 23fc24e:	f171 0300 	sbcs.w	r3, r1, #0
 23fc252:	d207      	bcs.n	23fc264 <setup+0x34>
    // put your setup code here, to run once:

    // Wait for serial to make it easier to see the serial logs at startup.
    waitFor(Serial.isConnected, 15000);
 23fc254:	f002 fcc2 	bl	23febdc <_Z16_fetch_usbserialv>
 23fc258:	f002 fcb5 	bl	23febc6 <_ZN9USBSerial11isConnectedEv>
 23fc25c:	b910      	cbnz	r0, 23fc264 <setup+0x34>
            spark_process();
 23fc25e:	f000 fd59 	bl	23fcd14 <spark_process>
        while (_while() && !_condition()) {
 23fc262:	e7ed      	b.n	23fc240 <setup+0x10>
 23fc264:	f002 fcba 	bl	23febdc <_Z16_fetch_usbserialv>
 23fc268:	f002 fcad 	bl	23febc6 <_ZN9USBSerial11isConnectedEv>
    delay(10000);
 23fc26c:	f242 7010 	movw	r0, #10000	; 0x2710
 23fc270:	f000 fe76 	bl	23fcf60 <delay>

    Log.error("Edge Impulse inference runner for Particle devices\r\n");
 23fc274:	4926      	ldr	r1, [pc, #152]	; (23fc310 <setup+0xe0>)
 23fc276:	4827      	ldr	r0, [pc, #156]	; (23fc314 <setup+0xe4>)
 23fc278:	f7ff ffc2 	bl	23fc200 <_ZNK5spark6Logger5errorEPKcz>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fc27c:	4c26      	ldr	r4, [pc, #152]	; (23fc318 <setup+0xe8>)
 23fc27e:	e8d4 1f8f 	ldab	r1, [r4]
 23fc282:	f011 0101 	ands.w	r1, r1, #1
 23fc286:	d10b      	bne.n	23fc2a0 <setup+0x70>
 23fc288:	4620      	mov	r0, r4
 23fc28a:	9103      	str	r1, [sp, #12]
 23fc28c:	f7ff ff4a 	bl	23fc124 <__cxa_guard_acquire>
 23fc290:	9903      	ldr	r1, [sp, #12]
 23fc292:	b128      	cbz	r0, 23fc2a0 <setup+0x70>
 23fc294:	4821      	ldr	r0, [pc, #132]	; (23fc31c <setup+0xec>)
 23fc296:	f002 fa79 	bl	23fe78c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fc29a:	4620      	mov	r0, r4
 23fc29c:	f7ff ff47 	bl	23fc12e <__cxa_guard_release>
      dataMode_{dataMode}
 23fc2a0:	4b1f      	ldr	r3, [pc, #124]	; (23fc320 <setup+0xf0>)

    /* Init & configure sensor */
    accel = new ADXL362DMA(SPI, D13 /* A2 */);
 23fc2a2:	2030      	movs	r0, #48	; 0x30
 23fc2a4:	9304      	str	r3, [sp, #16]
 23fc2a6:	2300      	movs	r3, #0
 23fc2a8:	f88d 3014 	strb.w	r3, [sp, #20]
 23fc2ac:	4b1d      	ldr	r3, [pc, #116]	; (23fc324 <setup+0xf4>)
 23fc2ae:	9306      	str	r3, [sp, #24]
 23fc2b0:	2301      	movs	r3, #1
 23fc2b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 23fc2b6:	f7ff ff22 	bl	23fc0fe <_Znwj>
 23fc2ba:	4604      	mov	r4, r0
 23fc2bc:	b120      	cbz	r0, 23fc2c8 <setup+0x98>
 23fc2be:	220d      	movs	r2, #13
 23fc2c0:	4916      	ldr	r1, [pc, #88]	; (23fc31c <setup+0xec>)
 23fc2c2:	ab04      	add	r3, sp, #16
 23fc2c4:	f000 f948 	bl	23fc558 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE>
 23fc2c8:	4d17      	ldr	r5, [pc, #92]	; (23fc328 <setup+0xf8>)

    accel->softReset();
 23fc2ca:	4620      	mov	r0, r4
    accel = new ADXL362DMA(SPI, D13 /* A2 */);
 23fc2cc:	602c      	str	r4, [r5, #0]
    accel->softReset();
 23fc2ce:	f000 f9bb 	bl	23fc648 <_ZN10ADXL362DMA9softResetEv>
    delay(100);
 23fc2d2:	2064      	movs	r0, #100	; 0x64
 23fc2d4:	f000 fe44 	bl	23fcf60 <delay>
    while(accel->readStatus() == 0) {
        ei_printf("no status yet, waiting for accelerometer\r\n");
 23fc2d8:	4c14      	ldr	r4, [pc, #80]	; (23fc32c <setup+0xfc>)
    while(accel->readStatus() == 0) {
 23fc2da:	6828      	ldr	r0, [r5, #0]
 23fc2dc:	f000 f9a1 	bl	23fc622 <_ZN10ADXL362DMA10readStatusEv>
 23fc2e0:	b938      	cbnz	r0, 23fc2f2 <setup+0xc2>
        ei_printf("no status yet, waiting for accelerometer\r\n");
 23fc2e2:	4620      	mov	r0, r4
 23fc2e4:	f000 f8fa 	bl	23fc4dc <_Z9ei_printfPKcz>
        ei_sleep(1000);
 23fc2e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fc2ec:	f000 f8f0 	bl	23fc4d0 <_Z8ei_sleepl>
    while(accel->readStatus() == 0) {
 23fc2f0:	e7f3      	b.n	23fc2da <setup+0xaa>
    }

    accel->writeFilterControl(accel->RANGE_2G, false, false, accel->ODR_200);
 23fc2f2:	2304      	movs	r3, #4
 23fc2f4:	9300      	str	r3, [sp, #0]
 23fc2f6:	2300      	movs	r3, #0
 23fc2f8:	6828      	ldr	r0, [r5, #0]
 23fc2fa:	4619      	mov	r1, r3
 23fc2fc:	461a      	mov	r2, r3
 23fc2fe:	f000 f9b8 	bl	23fc672 <_ZN10ADXL362DMA18writeFilterControlEhbbh>
    accel->setMeasureMode(true);
 23fc302:	2101      	movs	r1, #1
 23fc304:	6828      	ldr	r0, [r5, #0]
}
 23fc306:	b009      	add	sp, #36	; 0x24
 23fc308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    accel->setMeasureMode(true);
 23fc30c:	f000 b9a0 	b.w	23fc650 <_ZN10ADXL362DMA14setMeasureModeEb>
 23fc310:	023ff459 	.word	0x023ff459
 23fc314:	1007ae70 	.word	0x1007ae70
 23fc318:	1007aa1c 	.word	0x1007aa1c
 23fc31c:	1007aa20 	.word	0x1007aa20
 23fc320:	023ff4f8 	.word	0x023ff4f8
 23fc324:	003d0900 	.word	0x003d0900
 23fc328:	1007aa28 	.word	0x1007aa28
 23fc32c:	023ff48e 	.word	0x023ff48e

023fc330 <loop>:

/**
 * @brief      Particle main function
 */
void loop()
{
 23fc330:	b508      	push	{r3, lr}
    ei_printf("\nStarting inferencing in 2 seconds...\n");
 23fc332:	4806      	ldr	r0, [pc, #24]	; (23fc34c <loop+0x1c>)
 23fc334:	f000 f8d2 	bl	23fc4dc <_Z9ei_printfPKcz>

    delay(2000);
 23fc338:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23fc33c:	f000 fe10 	bl	23fcf60 <delay>
    // // print inference return code
    // ei_printf("run_classifier returned: %d\r\n", res);
    // print_inference_result(result);

    // delay(1000);
}
 23fc340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ei_printf("Sampling...\n");
 23fc344:	4802      	ldr	r0, [pc, #8]	; (23fc350 <loop+0x20>)
 23fc346:	f000 b8c9 	b.w	23fc4dc <_Z9ei_printfPKcz>
 23fc34a:	bf00      	nop
 23fc34c:	023ff4b9 	.word	0x023ff4b9
 23fc350:	023ff4e0 	.word	0x023ff4e0

023fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc354:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc356:	2614      	movs	r6, #20
 23fc358:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc35c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc35e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc362:	42ae      	cmp	r6, r5
 23fc364:	d004      	beq.n	23fc370 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fc366:	4628      	mov	r0, r5
 23fc368:	f002 fac9 	bl	23fe8fe <_ZN6StringD1Ev>
 23fc36c:	3514      	adds	r5, #20
 23fc36e:	e7f8      	b.n	23fc362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc370:	6820      	ldr	r0, [r4, #0]
 23fc372:	f000 fda1 	bl	23fceb8 <free>
    AllocatorT::free(data_);
}
 23fc376:	4620      	mov	r0, r4
 23fc378:	bd70      	pop	{r4, r5, r6, pc}

023fc37a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fc37a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc37e:	4604      	mov	r4, r0
 23fc380:	460d      	mov	r5, r1
 23fc382:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc384:	d916      	bls.n	23fc3b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fc386:	4290      	cmp	r0, r2
 23fc388:	d215      	bcs.n	23fc3b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fc38a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc38e:	1a75      	subs	r5, r6, r1
 23fc390:	f1a1 0714 	sub.w	r7, r1, #20
 23fc394:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc396:	42b7      	cmp	r7, r6
 23fc398:	d01c      	beq.n	23fc3d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fc39a:	b12c      	cbz	r4, 23fc3a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fc39c:	4631      	mov	r1, r6
 23fc39e:	4620      	mov	r0, r4
 23fc3a0:	f002 fb16 	bl	23fe9d0 <_ZN6StringC1EOS_>
 23fc3a4:	7c33      	ldrb	r3, [r6, #16]
 23fc3a6:	7423      	strb	r3, [r4, #16]
 23fc3a8:	4630      	mov	r0, r6
 23fc3aa:	f002 faa8 	bl	23fe8fe <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc3ae:	3e14      	subs	r6, #20
 23fc3b0:	3c14      	subs	r4, #20
 23fc3b2:	e7f0      	b.n	23fc396 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fc3b4:	d00e      	beq.n	23fc3d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fc3b6:	42b5      	cmp	r5, r6
 23fc3b8:	d00c      	beq.n	23fc3d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fc3ba:	b12c      	cbz	r4, 23fc3c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fc3bc:	4629      	mov	r1, r5
 23fc3be:	4620      	mov	r0, r4
 23fc3c0:	f002 fb06 	bl	23fe9d0 <_ZN6StringC1EOS_>
 23fc3c4:	7c2b      	ldrb	r3, [r5, #16]
 23fc3c6:	7423      	strb	r3, [r4, #16]
 23fc3c8:	4628      	mov	r0, r5
 23fc3ca:	f002 fa98 	bl	23fe8fe <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc3ce:	3514      	adds	r5, #20
 23fc3d0:	3414      	adds	r4, #20
 23fc3d2:	e7f0      	b.n	23fc3b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fc3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc3d6:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc3dc:	e9c0 3300 	strd	r3, r3, [r0]
 23fc3e0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc3e2:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc3e4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc3e6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc3e8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc3ea:	dd24      	ble.n	23fc436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc3ec:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fc3f0:	fb08 f007 	mul.w	r0, r8, r7
 23fc3f4:	f000 fd52 	bl	23fce9c <malloc>
            if (!d) {
 23fc3f8:	4605      	mov	r5, r0
 23fc3fa:	b1e0      	cbz	r0, 23fc436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fc3fc:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc400:	fb08 1202 	mla	r2, r8, r2, r1
 23fc404:	f7ff ffb9 	bl	23fc37a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fc408:	6820      	ldr	r0, [r4, #0]
 23fc40a:	f000 fd55 	bl	23fceb8 <free>
        data_ = d;
 23fc40e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc410:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc412:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fc416:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fc41a:	45b8      	cmp	r8, r7
 23fc41c:	d009      	beq.n	23fc432 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fc41e:	4639      	mov	r1, r7
 23fc420:	4628      	mov	r0, r5
 23fc422:	f002 faef 	bl	23fea04 <_ZN6StringC1ERKS_>
 23fc426:	7c3b      	ldrb	r3, [r7, #16]
 23fc428:	3514      	adds	r5, #20
 23fc42a:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fc42e:	3714      	adds	r7, #20
 23fc430:	e7f3      	b.n	23fc41a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fc432:	6873      	ldr	r3, [r6, #4]
 23fc434:	6063      	str	r3, [r4, #4]
}
 23fc436:	4620      	mov	r0, r4
 23fc438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc43c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

}
 23fc43c:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23fc43e:	2100      	movs	r1, #0
}
 23fc440:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23fc442:	2001      	movs	r0, #1
 23fc444:	f000 fc3c 	bl	23fccc0 <system_thread_set_state>
        capacity_(0) {
 23fc448:	2300      	movs	r3, #0
 23fc44a:	e9cd 3300 	strd	r3, r3, [sp]
 23fc44e:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fc450:	f002 fbc4 	bl	23febdc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fc454:	4c1a      	ldr	r4, [pc, #104]	; (23fc4c0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x84>)
 23fc456:	4605      	mov	r5, r0
 23fc458:	4626      	mov	r6, r4
 23fc45a:	4669      	mov	r1, sp
 23fc45c:	a803      	add	r0, sp, #12
 23fc45e:	f7ff ffba 	bl	23fc3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fc462:	a903      	add	r1, sp, #12
 23fc464:	a806      	add	r0, sp, #24
 23fc466:	f7ff ffb6 	bl	23fc3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc46a:	4b16      	ldr	r3, [pc, #88]	; (23fc4c4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x88>)
 23fc46c:	a906      	add	r1, sp, #24
 23fc46e:	f846 3b04 	str.w	r3, [r6], #4
 23fc472:	a809      	add	r0, sp, #36	; 0x24
 23fc474:	f7ff ffaf 	bl	23fc3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc478:	aa09      	add	r2, sp, #36	; 0x24
 23fc47a:	2132      	movs	r1, #50	; 0x32
 23fc47c:	4630      	mov	r0, r6
 23fc47e:	f001 fd25 	bl	23fdecc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc482:	a809      	add	r0, sp, #36	; 0x24
 23fc484:	f7ff ff66 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc488:	a806      	add	r0, sp, #24
 23fc48a:	f7ff ff63 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc48e:	4b0e      	ldr	r3, [pc, #56]	; (23fc4c8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8c>)
 23fc490:	a803      	add	r0, sp, #12
 23fc492:	6023      	str	r3, [r4, #0]
 23fc494:	6225      	str	r5, [r4, #32]
 23fc496:	f7ff ff5d 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc49a:	4b0c      	ldr	r3, [pc, #48]	; (23fc4cc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x90>)
 23fc49c:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc49e:	f002 fb9d 	bl	23febdc <_Z16_fetch_usbserialv>
 23fc4a2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc4a6:	f002 fb87 	bl	23febb8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc4aa:	f001 f9f3 	bl	23fd894 <_ZN5spark10LogManager8instanceEv>
 23fc4ae:	4621      	mov	r1, r4
 23fc4b0:	f001 fbe4 	bl	23fdc7c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23fc4b4:	4668      	mov	r0, sp
 23fc4b6:	f7ff ff4d 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fc4ba:	b00c      	add	sp, #48	; 0x30
 23fc4bc:	bd70      	pop	{r4, r5, r6, pc}
 23fc4be:	bf00      	nop
 23fc4c0:	1007aa2c 	.word	0x1007aa2c
 23fc4c4:	023ff50c 	.word	0x023ff50c
 23fc4c8:	023ffca8 	.word	0x023ffca8
 23fc4cc:	023ff524 	.word	0x023ff524

023fc4d0 <_Z8ei_sleepl>:

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}

EI_WEAK_FN EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
 23fc4d0:	b508      	push	{r3, lr}
    delay(time_ms);
 23fc4d2:	f000 fd45 	bl	23fcf60 <delay>
    return EI_IMPULSE_OK;
}
 23fc4d6:	2000      	movs	r0, #0
 23fc4d8:	bd08      	pop	{r3, pc}
	...

023fc4dc <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23fc4dc:	b40f      	push	{r0, r1, r2, r3}
 23fc4de:	b513      	push	{r0, r1, r4, lr}
 23fc4e0:	ab04      	add	r3, sp, #16
 23fc4e2:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23fc4e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23fc4ea:	480b      	ldr	r0, [pc, #44]	; (23fc518 <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23fc4ec:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23fc4ee:	f000 fcff 	bl	23fcef0 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23fc4f2:	2800      	cmp	r0, #0
 23fc4f4:	dd0b      	ble.n	23fc50e <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23fc4f6:	f002 fb71 	bl	23febdc <_Z16_fetch_usbserialv>
 23fc4fa:	4604      	mov	r4, r0
      return write((const uint8_t *)str, strlen(str));
 23fc4fc:	4806      	ldr	r0, [pc, #24]	; (23fc518 <_Z9ei_printfPKcz+0x3c>)
 23fc4fe:	f7ff fdd9 	bl	23fc0b4 <strlen>
 23fc502:	6823      	ldr	r3, [r4, #0]
 23fc504:	4602      	mov	r2, r0
 23fc506:	68db      	ldr	r3, [r3, #12]
 23fc508:	4620      	mov	r0, r4
 23fc50a:	4903      	ldr	r1, [pc, #12]	; (23fc518 <_Z9ei_printfPKcz+0x3c>)
 23fc50c:	4798      	blx	r3
    }
}
 23fc50e:	b002      	add	sp, #8
 23fc510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc514:	b004      	add	sp, #16
 23fc516:	4770      	bx	lr
 23fc518:	1007aa50 	.word	0x1007aa50

023fc51c <_GLOBAL__sub_I__Z20tflite_learn_27_initPFPvjjE>:
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
 23fc51c:	4b08      	ldr	r3, [pc, #32]	; (23fc540 <_GLOBAL__sub_I__Z20tflite_learn_27_initPFPvjjE+0x24>)
 23fc51e:	681a      	ldr	r2, [r3, #0]
 23fc520:	4b08      	ldr	r3, [pc, #32]	; (23fc544 <_GLOBAL__sub_I__Z20tflite_learn_27_initPFPvjjE+0x28>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 23fc522:	f102 0130 	add.w	r1, r2, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 23fc526:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 23fc52a:	f102 0110 	add.w	r1, r2, #16
};const NodeInfo_t nodeData[] = {
 23fc52e:	605a      	str	r2, [r3, #4]
 23fc530:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 23fc534:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 23fc538:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
 23fc53c:	4770      	bx	lr
 23fc53e:	bf00      	nop
 23fc540:	1007ae50 	.word	0x1007ae50
 23fc544:	1007a8a0 	.word	0x1007a8a0

023fc548 <_ZN10ADXL362DMAD1Ev>:

ADXL362DMA::ADXL362DMA(SPIClass &spi, int cs, SPISettings settings) : spi(spi), cs(cs), settings(settings) {
}

ADXL362DMA::~ADXL362DMA() {
}
 23fc548:	4770      	bx	lr

023fc54a <_ZN10ADXL362DMAD0Ev>:
ADXL362DMA::~ADXL362DMA() {
 23fc54a:	b510      	push	{r4, lr}
 23fc54c:	4604      	mov	r4, r0
}
 23fc54e:	2130      	movs	r1, #48	; 0x30
 23fc550:	f7ff fdd9 	bl	23fc106 <_ZdlPvj>
 23fc554:	4620      	mov	r0, r4
 23fc556:	bd10      	pop	{r4, pc}

023fc558 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE>:
ADXL362DMA::ADXL362DMA(SPIClass &spi, int cs, SPISettings settings) : spi(spi), cs(cs), settings(settings) {
 23fc558:	b530      	push	{r4, r5, lr}
 23fc55a:	6082      	str	r2, [r0, #8]
class SPISettings : public Printable {
 23fc55c:	4a09      	ldr	r2, [pc, #36]	; (23fc584 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE+0x2c>)
 23fc55e:	4d0a      	ldr	r5, [pc, #40]	; (23fc588 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE+0x30>)
 23fc560:	60c2      	str	r2, [r0, #12]
 23fc562:	791a      	ldrb	r2, [r3, #4]
 23fc564:	e9c0 5100 	strd	r5, r1, [r0]
 23fc568:	7402      	strb	r2, [r0, #16]
 23fc56a:	689a      	ldr	r2, [r3, #8]
 23fc56c:	899b      	ldrh	r3, [r3, #12]
 23fc56e:	6142      	str	r2, [r0, #20]
 23fc570:	8303      	strh	r3, [r0, #24]
 23fc572:	f44f 7300 	mov.w	r3, #512	; 0x200
 23fc576:	8383      	strh	r3, [r0, #28]
 23fc578:	2300      	movs	r3, #0
 23fc57a:	6283      	str	r3, [r0, #40]	; 0x28
 23fc57c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
 23fc580:	bd30      	pop	{r4, r5, pc}
 23fc582:	bf00      	nop
 23fc584:	023ff4f8 	.word	0x023ff4f8
 23fc588:	023ffb8c 	.word	0x023ffb8c

023fc58c <_ZN10ADXL362DMA16beginTransactionEv>:

	syncTransaction(req, resp, sizeof(req));
}


void ADXL362DMA::beginTransaction() {
 23fc58c:	b510      	push	{r4, lr}
	if (!initialized) {
 23fc58e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
void ADXL362DMA::beginTransaction() {
 23fc592:	4604      	mov	r4, r0
	if (!initialized) {
 23fc594:	b933      	cbnz	r3, 23fc5a4 <_ZN10ADXL362DMA16beginTransactionEv+0x18>
		initialized = true;
 23fc596:	2301      	movs	r3, #1
		spi.begin(cs);
 23fc598:	8901      	ldrh	r1, [r0, #8]
		initialized = true;
 23fc59a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		spi.begin(cs);
 23fc59e:	6840      	ldr	r0, [r0, #4]
 23fc5a0:	f002 f8fe 	bl	23fe7a0 <_ZN8SPIClass5beginEt>
	}
	spi.beginTransaction(settings);
 23fc5a4:	f104 010c 	add.w	r1, r4, #12
 23fc5a8:	6860      	ldr	r0, [r4, #4]
 23fc5aa:	f002 f927 	bl	23fe7fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	digitalWrite(cs, LOW);
 23fc5ae:	8920      	ldrh	r0, [r4, #8]
 23fc5b0:	2100      	movs	r1, #0
}
 23fc5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(cs, LOW);
 23fc5b6:	f002 bc59 	b.w	23fee6c <digitalWrite>

023fc5ba <_ZN10ADXL362DMA14endTransactionEv>:

void ADXL362DMA::endTransaction() {
 23fc5ba:	b510      	push	{r4, lr}
 23fc5bc:	4604      	mov	r4, r0
	digitalWrite(cs, HIGH);
 23fc5be:	2101      	movs	r1, #1
 23fc5c0:	8900      	ldrh	r0, [r0, #8]
 23fc5c2:	f002 fc53 	bl	23fee6c <digitalWrite>
	spi.endTransaction();
 23fc5c6:	6860      	ldr	r0, [r4, #4]
}
 23fc5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
 23fc5cc:	f002 b8fc 	b.w	23fe7c8 <_ZN8SPIClass14endTransactionEv>

023fc5d0 <_ZN10ADXL362DMA15syncTransactionEPvS0_j>:

void ADXL362DMA::syncTransaction(void *req, void *resp, size_t len) {
 23fc5d0:	b510      	push	{r4, lr}
 23fc5d2:	b086      	sub	sp, #24
 23fc5d4:	4604      	mov	r4, r0
 23fc5d6:	e9cd 2104 	strd	r2, r1, [sp, #16]
 23fc5da:	9303      	str	r3, [sp, #12]
	beginTransaction();
 23fc5dc:	f7ff ffd6 	bl	23fc58c <_ZN10ADXL362DMA16beginTransactionEv>

	spi.transfer(req, resp, len, nullptr);
 23fc5e0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 23fc5e4:	2000      	movs	r0, #0
 23fc5e6:	9905      	ldr	r1, [sp, #20]
 23fc5e8:	9000      	str	r0, [sp, #0]
 23fc5ea:	6860      	ldr	r0, [r4, #4]
 23fc5ec:	f002 f974 	bl	23fe8d8 <_ZN8SPIClass8transferEPKvPvjPFvvE>

	endTransaction();
 23fc5f0:	4620      	mov	r0, r4
}
 23fc5f2:	b006      	add	sp, #24
 23fc5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	endTransaction();
 23fc5f8:	f7ff bfdf 	b.w	23fc5ba <_ZN10ADXL362DMA14endTransactionEv>

023fc5fc <_ZN10ADXL362DMA13readRegister8Eh>:
	req[0] = CMD_READ_REGISTER;
 23fc5fc:	230b      	movs	r3, #11
uint8_t ADXL362DMA::readRegister8(uint8_t addr) {
 23fc5fe:	b507      	push	{r0, r1, r2, lr}
	req[0] = CMD_READ_REGISTER;
 23fc600:	f88d 3000 	strb.w	r3, [sp]
	req[2] = 0;
 23fc604:	2300      	movs	r3, #0
	req[1] = addr;
 23fc606:	f88d 1001 	strb.w	r1, [sp, #1]
	req[2] = 0;
 23fc60a:	f88d 3002 	strb.w	r3, [sp, #2]
	syncTransaction(req, resp, sizeof(req));
 23fc60e:	4669      	mov	r1, sp
 23fc610:	2303      	movs	r3, #3
 23fc612:	aa01      	add	r2, sp, #4
 23fc614:	f7ff ffdc 	bl	23fc5d0 <_ZN10ADXL362DMA15syncTransactionEPvS0_j>
}
 23fc618:	f89d 0006 	ldrb.w	r0, [sp, #6]
 23fc61c:	b003      	add	sp, #12
 23fc61e:	f85d fb04 	ldr.w	pc, [sp], #4

023fc622 <_ZN10ADXL362DMA10readStatusEv>:
	return readRegister8(REG_STATUS);
 23fc622:	210b      	movs	r1, #11
 23fc624:	f7ff bfea 	b.w	23fc5fc <_ZN10ADXL362DMA13readRegister8Eh>

023fc628 <_ZN10ADXL362DMA14writeRegister8Ehh>:
	req[0] = CMD_WRITE_REGISTER;
 23fc628:	230a      	movs	r3, #10
void ADXL362DMA::writeRegister8(uint8_t addr, uint8_t value) {
 23fc62a:	b507      	push	{r0, r1, r2, lr}
	req[0] = CMD_WRITE_REGISTER;
 23fc62c:	f88d 3000 	strb.w	r3, [sp]
	req[1] = addr;
 23fc630:	f88d 1001 	strb.w	r1, [sp, #1]
	req[2] = value;
 23fc634:	f88d 2002 	strb.w	r2, [sp, #2]
	syncTransaction(req, resp, sizeof(req));
 23fc638:	2303      	movs	r3, #3
 23fc63a:	4669      	mov	r1, sp
 23fc63c:	aa01      	add	r2, sp, #4
 23fc63e:	f7ff ffc7 	bl	23fc5d0 <_ZN10ADXL362DMA15syncTransactionEPvS0_j>
}
 23fc642:	b003      	add	sp, #12
 23fc644:	f85d fb04 	ldr.w	pc, [sp], #4

023fc648 <_ZN10ADXL362DMA9softResetEv>:
	writeRegister8(REG_SOFT_RESET, 'R');
 23fc648:	2252      	movs	r2, #82	; 0x52
 23fc64a:	211f      	movs	r1, #31
 23fc64c:	f7ff bfec 	b.w	23fc628 <_ZN10ADXL362DMA14writeRegister8Ehh>

023fc650 <_ZN10ADXL362DMA14setMeasureModeEb>:
void ADXL362DMA::setMeasureMode(bool enabled) {
 23fc650:	b538      	push	{r3, r4, r5, lr}
 23fc652:	460d      	mov	r5, r1
	uint8_t value = readRegister8(REG_POWER_CTL);
 23fc654:	212d      	movs	r1, #45	; 0x2d
void ADXL362DMA::setMeasureMode(bool enabled) {
 23fc656:	4604      	mov	r4, r0
	uint8_t value = readRegister8(REG_POWER_CTL);
 23fc658:	f7ff ffd0 	bl	23fc5fc <_ZN10ADXL362DMA13readRegister8Eh>
	value &= 0xfc; // remove low 2 bits
 23fc65c:	f000 02fc 	and.w	r2, r0, #252	; 0xfc
	if (enabled) {
 23fc660:	b10d      	cbz	r5, 23fc666 <_ZN10ADXL362DMA14setMeasureModeEb+0x16>
		value |= 0x02;
 23fc662:	f042 0202 	orr.w	r2, r2, #2
	writeRegister8(REG_POWER_CTL, value);
 23fc666:	4620      	mov	r0, r4
}
 23fc668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister8(REG_POWER_CTL, value);
 23fc66c:	212d      	movs	r1, #45	; 0x2d
 23fc66e:	f7ff bfdb 	b.w	23fc628 <_ZN10ADXL362DMA14writeRegister8Ehh>

023fc672 <_ZN10ADXL362DMA18writeFilterControlEhbbh>:
void ADXL362DMA::writeFilterControl(uint8_t range, bool halfBW, bool extSample, uint8_t odr) {
 23fc672:	b430      	push	{r4, r5}
	switch(range) {
 23fc674:	2901      	cmp	r1, #1
	value |= (range & 0x3) << 6;
 23fc676:	ea4f 1481 	mov.w	r4, r1, lsl #6
void ADXL362DMA::writeFilterControl(uint8_t range, bool halfBW, bool extSample, uint8_t odr) {
 23fc67a:	f89d 5008 	ldrb.w	r5, [sp, #8]
	value |= (range & 0x3) << 6;
 23fc67e:	b2e4      	uxtb	r4, r4
	switch(range) {
 23fc680:	d003      	beq.n	23fc68a <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x18>
 23fc682:	2902      	cmp	r1, #2
 23fc684:	d010      	beq.n	23fc6a8 <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x36>
			rangeG = 2;
 23fc686:	2102      	movs	r1, #2
 23fc688:	e000      	b.n	23fc68c <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x1a>
			rangeG = 4;
 23fc68a:	2104      	movs	r1, #4
			rangeG = 2;
 23fc68c:	7741      	strb	r1, [r0, #29]
	if (halfBW) {
 23fc68e:	b10a      	cbz	r2, 23fc694 <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x22>
		value |= 0x10;
 23fc690:	f044 0410 	orr.w	r4, r4, #16
	if (extSample) {
 23fc694:	b10b      	cbz	r3, 23fc69a <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x28>
		value |= 0x08;
 23fc696:	f044 0408 	orr.w	r4, r4, #8
	value |= (odr & 0x7);
 23fc69a:	f005 0207 	and.w	r2, r5, #7
	writeRegister8(REG_FILTER_CTL, value);
 23fc69e:	4322      	orrs	r2, r4
 23fc6a0:	212c      	movs	r1, #44	; 0x2c
}
 23fc6a2:	bc30      	pop	{r4, r5}
	writeRegister8(REG_FILTER_CTL, value);
 23fc6a4:	f7ff bfc0 	b.w	23fc628 <_ZN10ADXL362DMA14writeRegister8Ehh>
			rangeG = 8;
 23fc6a8:	2108      	movs	r1, #8
 23fc6aa:	e7ef      	b.n	23fc68c <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x1a>

023fc6ac <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23fc6ac:	2300      	movs	r3, #0
 23fc6ae:	4802      	ldr	r0, [pc, #8]	; (23fc6b8 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23fc6b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23fc6b2:	f000 b803 	b.w	23fc6bc <os_mutex_create>
 23fc6b6:	bf00      	nop
 23fc6b8:	1007ae54 	.word	0x1007ae54

023fc6bc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23fc6bc:	b509      	push	{r0, r3, lr}
 23fc6be:	4804      	ldr	r0, [pc, #16]	; (23fc6d0 <os_mutex_create+0x14>)
 23fc6c0:	6800      	ldr	r0, [r0, #0]
 23fc6c2:	4b04      	ldr	r3, [pc, #16]	; (23fc6d4 <os_mutex_create+0x18>)
 23fc6c4:	4403      	add	r3, r0
 23fc6c6:	681b      	ldr	r3, [r3, #0]
 23fc6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc6ca:	9302      	str	r3, [sp, #8]
 23fc6cc:	bd09      	pop	{r0, r3, pc}
 23fc6ce:	0000      	.short	0x0000
 23fc6d0:	1007a89c 	.word	0x1007a89c
 23fc6d4:	00000030 	.word	0x00000030

023fc6d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc6d8:	b509      	push	{r0, r3, lr}
 23fc6da:	4804      	ldr	r0, [pc, #16]	; (23fc6ec <os_mutex_recursive_create+0x14>)
 23fc6dc:	6800      	ldr	r0, [r0, #0]
 23fc6de:	4b04      	ldr	r3, [pc, #16]	; (23fc6f0 <os_mutex_recursive_create+0x18>)
 23fc6e0:	4403      	add	r3, r0
 23fc6e2:	681b      	ldr	r3, [r3, #0]
 23fc6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc6e6:	9302      	str	r3, [sp, #8]
 23fc6e8:	bd09      	pop	{r0, r3, pc}
 23fc6ea:	0000      	.short	0x0000
 23fc6ec:	1007a89c 	.word	0x1007a89c
 23fc6f0:	00000030 	.word	0x00000030

023fc6f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc6f4:	b509      	push	{r0, r3, lr}
 23fc6f6:	4804      	ldr	r0, [pc, #16]	; (23fc708 <os_mutex_recursive_destroy+0x14>)
 23fc6f8:	6800      	ldr	r0, [r0, #0]
 23fc6fa:	4b04      	ldr	r3, [pc, #16]	; (23fc70c <os_mutex_recursive_destroy+0x18>)
 23fc6fc:	4403      	add	r3, r0
 23fc6fe:	681b      	ldr	r3, [r3, #0]
 23fc700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc702:	9302      	str	r3, [sp, #8]
 23fc704:	bd09      	pop	{r0, r3, pc}
 23fc706:	0000      	.short	0x0000
 23fc708:	1007a89c 	.word	0x1007a89c
 23fc70c:	00000030 	.word	0x00000030

023fc710 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc710:	b509      	push	{r0, r3, lr}
 23fc712:	4804      	ldr	r0, [pc, #16]	; (23fc724 <os_mutex_recursive_lock+0x14>)
 23fc714:	6800      	ldr	r0, [r0, #0]
 23fc716:	4b04      	ldr	r3, [pc, #16]	; (23fc728 <os_mutex_recursive_lock+0x18>)
 23fc718:	4403      	add	r3, r0
 23fc71a:	681b      	ldr	r3, [r3, #0]
 23fc71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc71e:	9302      	str	r3, [sp, #8]
 23fc720:	bd09      	pop	{r0, r3, pc}
 23fc722:	0000      	.short	0x0000
 23fc724:	1007a89c 	.word	0x1007a89c
 23fc728:	00000030 	.word	0x00000030

023fc72c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc72c:	b509      	push	{r0, r3, lr}
 23fc72e:	4804      	ldr	r0, [pc, #16]	; (23fc740 <os_mutex_recursive_unlock+0x14>)
 23fc730:	6800      	ldr	r0, [r0, #0]
 23fc732:	4b04      	ldr	r3, [pc, #16]	; (23fc744 <os_mutex_recursive_unlock+0x18>)
 23fc734:	4403      	add	r3, r0
 23fc736:	681b      	ldr	r3, [r3, #0]
 23fc738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc73a:	9302      	str	r3, [sp, #8]
 23fc73c:	bd09      	pop	{r0, r3, pc}
 23fc73e:	0000      	.short	0x0000
 23fc740:	1007a89c 	.word	0x1007a89c
 23fc744:	00000030 	.word	0x00000030

023fc748 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc748:	b509      	push	{r0, r3, lr}
 23fc74a:	4804      	ldr	r0, [pc, #16]	; (23fc75c <HAL_RNG_GetRandomNumber+0x14>)
 23fc74c:	6800      	ldr	r0, [r0, #0]
 23fc74e:	4b04      	ldr	r3, [pc, #16]	; (23fc760 <HAL_RNG_GetRandomNumber+0x18>)
 23fc750:	4403      	add	r3, r0
 23fc752:	681b      	ldr	r3, [r3, #0]
 23fc754:	685b      	ldr	r3, [r3, #4]
 23fc756:	9302      	str	r3, [sp, #8]
 23fc758:	bd09      	pop	{r0, r3, pc}
 23fc75a:	0000      	.short	0x0000
 23fc75c:	1007a89c 	.word	0x1007a89c
 23fc760:	00000000 	.word	0x00000000

023fc764 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc764:	b509      	push	{r0, r3, lr}
 23fc766:	4804      	ldr	r0, [pc, #16]	; (23fc778 <HAL_Delay_Microseconds+0x14>)
 23fc768:	6800      	ldr	r0, [r0, #0]
 23fc76a:	4b04      	ldr	r3, [pc, #16]	; (23fc77c <HAL_Delay_Microseconds+0x18>)
 23fc76c:	4403      	add	r3, r0
 23fc76e:	681b      	ldr	r3, [r3, #0]
 23fc770:	68db      	ldr	r3, [r3, #12]
 23fc772:	9302      	str	r3, [sp, #8]
 23fc774:	bd09      	pop	{r0, r3, pc}
 23fc776:	0000      	.short	0x0000
 23fc778:	1007a89c 	.word	0x1007a89c
 23fc77c:	00000000 	.word	0x00000000

023fc780 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc780:	b509      	push	{r0, r3, lr}
 23fc782:	4804      	ldr	r0, [pc, #16]	; (23fc794 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc784:	6800      	ldr	r0, [r0, #0]
 23fc786:	4b04      	ldr	r3, [pc, #16]	; (23fc798 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc788:	4403      	add	r3, r0
 23fc78a:	681b      	ldr	r3, [r3, #0]
 23fc78c:	695b      	ldr	r3, [r3, #20]
 23fc78e:	9302      	str	r3, [sp, #8]
 23fc790:	bd09      	pop	{r0, r3, pc}
 23fc792:	0000      	.short	0x0000
 23fc794:	1007a89c 	.word	0x1007a89c
 23fc798:	00000000 	.word	0x00000000

023fc79c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fc79c:	b509      	push	{r0, r3, lr}
 23fc79e:	4804      	ldr	r0, [pc, #16]	; (23fc7b0 <hal_timer_millis+0x14>)
 23fc7a0:	6800      	ldr	r0, [r0, #0]
 23fc7a2:	4b04      	ldr	r3, [pc, #16]	; (23fc7b4 <hal_timer_millis+0x18>)
 23fc7a4:	4403      	add	r3, r0
 23fc7a6:	681b      	ldr	r3, [r3, #0]
 23fc7a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fc7aa:	9302      	str	r3, [sp, #8]
 23fc7ac:	bd09      	pop	{r0, r3, pc}
 23fc7ae:	0000      	.short	0x0000
 23fc7b0:	1007a89c 	.word	0x1007a89c
 23fc7b4:	00000000 	.word	0x00000000

023fc7b8 <hal_gpio_get_mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc7b8:	b509      	push	{r0, r3, lr}
 23fc7ba:	4804      	ldr	r0, [pc, #16]	; (23fc7cc <hal_gpio_get_mode+0x14>)
 23fc7bc:	6800      	ldr	r0, [r0, #0]
 23fc7be:	4b04      	ldr	r3, [pc, #16]	; (23fc7d0 <hal_gpio_get_mode+0x18>)
 23fc7c0:	4403      	add	r3, r0
 23fc7c2:	681b      	ldr	r3, [r3, #0]
 23fc7c4:	68db      	ldr	r3, [r3, #12]
 23fc7c6:	9302      	str	r3, [sp, #8]
 23fc7c8:	bd09      	pop	{r0, r3, pc}
 23fc7ca:	0000      	.short	0x0000
 23fc7cc:	1007a89c 	.word	0x1007a89c
 23fc7d0:	00000014 	.word	0x00000014

023fc7d4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc7d4:	b509      	push	{r0, r3, lr}
 23fc7d6:	4804      	ldr	r0, [pc, #16]	; (23fc7e8 <hal_gpio_write+0x14>)
 23fc7d8:	6800      	ldr	r0, [r0, #0]
 23fc7da:	4b04      	ldr	r3, [pc, #16]	; (23fc7ec <hal_gpio_write+0x18>)
 23fc7dc:	4403      	add	r3, r0
 23fc7de:	681b      	ldr	r3, [r3, #0]
 23fc7e0:	691b      	ldr	r3, [r3, #16]
 23fc7e2:	9302      	str	r3, [sp, #8]
 23fc7e4:	bd09      	pop	{r0, r3, pc}
 23fc7e6:	0000      	.short	0x0000
 23fc7e8:	1007a89c 	.word	0x1007a89c
 23fc7ec:	00000014 	.word	0x00000014

023fc7f0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc7f0:	b509      	push	{r0, r3, lr}
 23fc7f2:	4804      	ldr	r0, [pc, #16]	; (23fc804 <hal_i2c_write+0x14>)
 23fc7f4:	6800      	ldr	r0, [r0, #0]
 23fc7f6:	4b04      	ldr	r3, [pc, #16]	; (23fc808 <hal_i2c_write+0x18>)
 23fc7f8:	4403      	add	r3, r0
 23fc7fa:	681b      	ldr	r3, [r3, #0]
 23fc7fc:	6a1b      	ldr	r3, [r3, #32]
 23fc7fe:	9302      	str	r3, [sp, #8]
 23fc800:	bd09      	pop	{r0, r3, pc}
 23fc802:	0000      	.short	0x0000
 23fc804:	1007a89c 	.word	0x1007a89c
 23fc808:	00000010 	.word	0x00000010

023fc80c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc80c:	b509      	push	{r0, r3, lr}
 23fc80e:	4804      	ldr	r0, [pc, #16]	; (23fc820 <hal_i2c_available+0x14>)
 23fc810:	6800      	ldr	r0, [r0, #0]
 23fc812:	4b04      	ldr	r3, [pc, #16]	; (23fc824 <hal_i2c_available+0x18>)
 23fc814:	4403      	add	r3, r0
 23fc816:	681b      	ldr	r3, [r3, #0]
 23fc818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc81a:	9302      	str	r3, [sp, #8]
 23fc81c:	bd09      	pop	{r0, r3, pc}
 23fc81e:	0000      	.short	0x0000
 23fc820:	1007a89c 	.word	0x1007a89c
 23fc824:	00000010 	.word	0x00000010

023fc828 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc828:	b509      	push	{r0, r3, lr}
 23fc82a:	4804      	ldr	r0, [pc, #16]	; (23fc83c <hal_i2c_read+0x14>)
 23fc82c:	6800      	ldr	r0, [r0, #0]
 23fc82e:	4b04      	ldr	r3, [pc, #16]	; (23fc840 <hal_i2c_read+0x18>)
 23fc830:	4403      	add	r3, r0
 23fc832:	681b      	ldr	r3, [r3, #0]
 23fc834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc836:	9302      	str	r3, [sp, #8]
 23fc838:	bd09      	pop	{r0, r3, pc}
 23fc83a:	0000      	.short	0x0000
 23fc83c:	1007a89c 	.word	0x1007a89c
 23fc840:	00000010 	.word	0x00000010

023fc844 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc844:	b509      	push	{r0, r3, lr}
 23fc846:	4804      	ldr	r0, [pc, #16]	; (23fc858 <hal_i2c_peek+0x14>)
 23fc848:	6800      	ldr	r0, [r0, #0]
 23fc84a:	4b04      	ldr	r3, [pc, #16]	; (23fc85c <hal_i2c_peek+0x18>)
 23fc84c:	4403      	add	r3, r0
 23fc84e:	681b      	ldr	r3, [r3, #0]
 23fc850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc852:	9302      	str	r3, [sp, #8]
 23fc854:	bd09      	pop	{r0, r3, pc}
 23fc856:	0000      	.short	0x0000
 23fc858:	1007a89c 	.word	0x1007a89c
 23fc85c:	00000010 	.word	0x00000010

023fc860 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc860:	b509      	push	{r0, r3, lr}
 23fc862:	4804      	ldr	r0, [pc, #16]	; (23fc874 <hal_i2c_flush+0x14>)
 23fc864:	6800      	ldr	r0, [r0, #0]
 23fc866:	4b04      	ldr	r3, [pc, #16]	; (23fc878 <hal_i2c_flush+0x18>)
 23fc868:	4403      	add	r3, r0
 23fc86a:	681b      	ldr	r3, [r3, #0]
 23fc86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc86e:	9302      	str	r3, [sp, #8]
 23fc870:	bd09      	pop	{r0, r3, pc}
 23fc872:	0000      	.short	0x0000
 23fc874:	1007a89c 	.word	0x1007a89c
 23fc878:	00000010 	.word	0x00000010

023fc87c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc87c:	b509      	push	{r0, r3, lr}
 23fc87e:	4804      	ldr	r0, [pc, #16]	; (23fc890 <hal_i2c_is_enabled+0x14>)
 23fc880:	6800      	ldr	r0, [r0, #0]
 23fc882:	4b04      	ldr	r3, [pc, #16]	; (23fc894 <hal_i2c_is_enabled+0x18>)
 23fc884:	4403      	add	r3, r0
 23fc886:	681b      	ldr	r3, [r3, #0]
 23fc888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc88a:	9302      	str	r3, [sp, #8]
 23fc88c:	bd09      	pop	{r0, r3, pc}
 23fc88e:	0000      	.short	0x0000
 23fc890:	1007a89c 	.word	0x1007a89c
 23fc894:	00000010 	.word	0x00000010

023fc898 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc898:	b509      	push	{r0, r3, lr}
 23fc89a:	4804      	ldr	r0, [pc, #16]	; (23fc8ac <hal_i2c_init+0x14>)
 23fc89c:	6800      	ldr	r0, [r0, #0]
 23fc89e:	4b04      	ldr	r3, [pc, #16]	; (23fc8b0 <hal_i2c_init+0x18>)
 23fc8a0:	4403      	add	r3, r0
 23fc8a2:	681b      	ldr	r3, [r3, #0]
 23fc8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc8a6:	9302      	str	r3, [sp, #8]
 23fc8a8:	bd09      	pop	{r0, r3, pc}
 23fc8aa:	0000      	.short	0x0000
 23fc8ac:	1007a89c 	.word	0x1007a89c
 23fc8b0:	00000010 	.word	0x00000010

023fc8b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc8b4:	b509      	push	{r0, r3, lr}
 23fc8b6:	4804      	ldr	r0, [pc, #16]	; (23fc8c8 <inet_inet_ntop+0x14>)
 23fc8b8:	6800      	ldr	r0, [r0, #0]
 23fc8ba:	4b04      	ldr	r3, [pc, #16]	; (23fc8cc <inet_inet_ntop+0x18>)
 23fc8bc:	4403      	add	r3, r0
 23fc8be:	681b      	ldr	r3, [r3, #0]
 23fc8c0:	695b      	ldr	r3, [r3, #20]
 23fc8c2:	9302      	str	r3, [sp, #8]
 23fc8c4:	bd09      	pop	{r0, r3, pc}
 23fc8c6:	0000      	.short	0x0000
 23fc8c8:	1007a89c 	.word	0x1007a89c
 23fc8cc:	0000004c 	.word	0x0000004c

023fc8d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc8d0:	b509      	push	{r0, r3, lr}
 23fc8d2:	4804      	ldr	r0, [pc, #16]	; (23fc8e4 <netdb_freeaddrinfo+0x14>)
 23fc8d4:	6800      	ldr	r0, [r0, #0]
 23fc8d6:	4b04      	ldr	r3, [pc, #16]	; (23fc8e8 <netdb_freeaddrinfo+0x18>)
 23fc8d8:	4403      	add	r3, r0
 23fc8da:	681b      	ldr	r3, [r3, #0]
 23fc8dc:	689b      	ldr	r3, [r3, #8]
 23fc8de:	9302      	str	r3, [sp, #8]
 23fc8e0:	bd09      	pop	{r0, r3, pc}
 23fc8e2:	0000      	.short	0x0000
 23fc8e4:	1007a89c 	.word	0x1007a89c
 23fc8e8:	00000050 	.word	0x00000050

023fc8ec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc8ec:	b509      	push	{r0, r3, lr}
 23fc8ee:	4804      	ldr	r0, [pc, #16]	; (23fc900 <netdb_getaddrinfo+0x14>)
 23fc8f0:	6800      	ldr	r0, [r0, #0]
 23fc8f2:	4b04      	ldr	r3, [pc, #16]	; (23fc904 <netdb_getaddrinfo+0x18>)
 23fc8f4:	4403      	add	r3, r0
 23fc8f6:	681b      	ldr	r3, [r3, #0]
 23fc8f8:	68db      	ldr	r3, [r3, #12]
 23fc8fa:	9302      	str	r3, [sp, #8]
 23fc8fc:	bd09      	pop	{r0, r3, pc}
 23fc8fe:	0000      	.short	0x0000
 23fc900:	1007a89c 	.word	0x1007a89c
 23fc904:	00000050 	.word	0x00000050

023fc908 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fc908:	b509      	push	{r0, r3, lr}
 23fc90a:	4804      	ldr	r0, [pc, #16]	; (23fc91c <hal_spi_begin+0x14>)
 23fc90c:	6800      	ldr	r0, [r0, #0]
 23fc90e:	4b04      	ldr	r3, [pc, #16]	; (23fc920 <hal_spi_begin+0x18>)
 23fc910:	4403      	add	r3, r0
 23fc912:	681b      	ldr	r3, [r3, #0]
 23fc914:	681b      	ldr	r3, [r3, #0]
 23fc916:	9302      	str	r3, [sp, #8]
 23fc918:	bd09      	pop	{r0, r3, pc}
 23fc91a:	0000      	.short	0x0000
 23fc91c:	1007a89c 	.word	0x1007a89c
 23fc920:	00000018 	.word	0x00000018

023fc924 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc924:	b509      	push	{r0, r3, lr}
 23fc926:	4804      	ldr	r0, [pc, #16]	; (23fc938 <hal_spi_init+0x14>)
 23fc928:	6800      	ldr	r0, [r0, #0]
 23fc92a:	4b04      	ldr	r3, [pc, #16]	; (23fc93c <hal_spi_init+0x18>)
 23fc92c:	4403      	add	r3, r0
 23fc92e:	681b      	ldr	r3, [r3, #0]
 23fc930:	69db      	ldr	r3, [r3, #28]
 23fc932:	9302      	str	r3, [sp, #8]
 23fc934:	bd09      	pop	{r0, r3, pc}
 23fc936:	0000      	.short	0x0000
 23fc938:	1007a89c 	.word	0x1007a89c
 23fc93c:	00000018 	.word	0x00000018

023fc940 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc940:	b509      	push	{r0, r3, lr}
 23fc942:	4804      	ldr	r0, [pc, #16]	; (23fc954 <hal_spi_is_enabled+0x14>)
 23fc944:	6800      	ldr	r0, [r0, #0]
 23fc946:	4b04      	ldr	r3, [pc, #16]	; (23fc958 <hal_spi_is_enabled+0x18>)
 23fc948:	4403      	add	r3, r0
 23fc94a:	681b      	ldr	r3, [r3, #0]
 23fc94c:	6a1b      	ldr	r3, [r3, #32]
 23fc94e:	9302      	str	r3, [sp, #8]
 23fc950:	bd09      	pop	{r0, r3, pc}
 23fc952:	0000      	.short	0x0000
 23fc954:	1007a89c 	.word	0x1007a89c
 23fc958:	00000018 	.word	0x00000018

023fc95c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fc95c:	b509      	push	{r0, r3, lr}
 23fc95e:	4804      	ldr	r0, [pc, #16]	; (23fc970 <hal_spi_info+0x14>)
 23fc960:	6800      	ldr	r0, [r0, #0]
 23fc962:	4b04      	ldr	r3, [pc, #16]	; (23fc974 <hal_spi_info+0x18>)
 23fc964:	4403      	add	r3, r0
 23fc966:	681b      	ldr	r3, [r3, #0]
 23fc968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc96a:	9302      	str	r3, [sp, #8]
 23fc96c:	bd09      	pop	{r0, r3, pc}
 23fc96e:	0000      	.short	0x0000
 23fc970:	1007a89c 	.word	0x1007a89c
 23fc974:	00000018 	.word	0x00000018

023fc978 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fc978:	b509      	push	{r0, r3, lr}
 23fc97a:	4804      	ldr	r0, [pc, #16]	; (23fc98c <hal_spi_transfer_dma+0x14>)
 23fc97c:	6800      	ldr	r0, [r0, #0]
 23fc97e:	4b04      	ldr	r3, [pc, #16]	; (23fc990 <hal_spi_transfer_dma+0x18>)
 23fc980:	4403      	add	r3, r0
 23fc982:	681b      	ldr	r3, [r3, #0]
 23fc984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc986:	9302      	str	r3, [sp, #8]
 23fc988:	bd09      	pop	{r0, r3, pc}
 23fc98a:	0000      	.short	0x0000
 23fc98c:	1007a89c 	.word	0x1007a89c
 23fc990:	00000018 	.word	0x00000018

023fc994 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fc994:	b509      	push	{r0, r3, lr}
 23fc996:	4804      	ldr	r0, [pc, #16]	; (23fc9a8 <hal_spi_transfer_dma_status+0x14>)
 23fc998:	6800      	ldr	r0, [r0, #0]
 23fc99a:	4b04      	ldr	r3, [pc, #16]	; (23fc9ac <hal_spi_transfer_dma_status+0x18>)
 23fc99c:	4403      	add	r3, r0
 23fc99e:	681b      	ldr	r3, [r3, #0]
 23fc9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fc9a2:	9302      	str	r3, [sp, #8]
 23fc9a4:	bd09      	pop	{r0, r3, pc}
 23fc9a6:	0000      	.short	0x0000
 23fc9a8:	1007a89c 	.word	0x1007a89c
 23fc9ac:	00000018 	.word	0x00000018

023fc9b0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fc9b0:	b509      	push	{r0, r3, lr}
 23fc9b2:	4804      	ldr	r0, [pc, #16]	; (23fc9c4 <hal_spi_set_settings+0x14>)
 23fc9b4:	6800      	ldr	r0, [r0, #0]
 23fc9b6:	4b04      	ldr	r3, [pc, #16]	; (23fc9c8 <hal_spi_set_settings+0x18>)
 23fc9b8:	4403      	add	r3, r0
 23fc9ba:	681b      	ldr	r3, [r3, #0]
 23fc9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc9be:	9302      	str	r3, [sp, #8]
 23fc9c0:	bd09      	pop	{r0, r3, pc}
 23fc9c2:	0000      	.short	0x0000
 23fc9c4:	1007a89c 	.word	0x1007a89c
 23fc9c8:	00000018 	.word	0x00000018

023fc9cc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fc9cc:	b509      	push	{r0, r3, lr}
 23fc9ce:	4804      	ldr	r0, [pc, #16]	; (23fc9e0 <hal_spi_acquire+0x14>)
 23fc9d0:	6800      	ldr	r0, [r0, #0]
 23fc9d2:	4b04      	ldr	r3, [pc, #16]	; (23fc9e4 <hal_spi_acquire+0x18>)
 23fc9d4:	4403      	add	r3, r0
 23fc9d6:	681b      	ldr	r3, [r3, #0]
 23fc9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc9da:	9302      	str	r3, [sp, #8]
 23fc9dc:	bd09      	pop	{r0, r3, pc}
 23fc9de:	0000      	.short	0x0000
 23fc9e0:	1007a89c 	.word	0x1007a89c
 23fc9e4:	00000018 	.word	0x00000018

023fc9e8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fc9e8:	b509      	push	{r0, r3, lr}
 23fc9ea:	4804      	ldr	r0, [pc, #16]	; (23fc9fc <hal_spi_release+0x14>)
 23fc9ec:	6800      	ldr	r0, [r0, #0]
 23fc9ee:	4b04      	ldr	r3, [pc, #16]	; (23fca00 <hal_spi_release+0x18>)
 23fc9f0:	4403      	add	r3, r0
 23fc9f2:	681b      	ldr	r3, [r3, #0]
 23fc9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc9f6:	9302      	str	r3, [sp, #8]
 23fc9f8:	bd09      	pop	{r0, r3, pc}
 23fc9fa:	0000      	.short	0x0000
 23fc9fc:	1007a89c 	.word	0x1007a89c
 23fca00:	00000018 	.word	0x00000018

023fca04 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fca04:	b509      	push	{r0, r3, lr}
 23fca06:	4804      	ldr	r0, [pc, #16]	; (23fca18 <hal_usart_end+0x14>)
 23fca08:	6800      	ldr	r0, [r0, #0]
 23fca0a:	4b04      	ldr	r3, [pc, #16]	; (23fca1c <hal_usart_end+0x18>)
 23fca0c:	4403      	add	r3, r0
 23fca0e:	681b      	ldr	r3, [r3, #0]
 23fca10:	689b      	ldr	r3, [r3, #8]
 23fca12:	9302      	str	r3, [sp, #8]
 23fca14:	bd09      	pop	{r0, r3, pc}
 23fca16:	0000      	.short	0x0000
 23fca18:	1007a89c 	.word	0x1007a89c
 23fca1c:	00000024 	.word	0x00000024

023fca20 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fca20:	b509      	push	{r0, r3, lr}
 23fca22:	4804      	ldr	r0, [pc, #16]	; (23fca34 <hal_usart_write+0x14>)
 23fca24:	6800      	ldr	r0, [r0, #0]
 23fca26:	4b04      	ldr	r3, [pc, #16]	; (23fca38 <hal_usart_write+0x18>)
 23fca28:	4403      	add	r3, r0
 23fca2a:	681b      	ldr	r3, [r3, #0]
 23fca2c:	68db      	ldr	r3, [r3, #12]
 23fca2e:	9302      	str	r3, [sp, #8]
 23fca30:	bd09      	pop	{r0, r3, pc}
 23fca32:	0000      	.short	0x0000
 23fca34:	1007a89c 	.word	0x1007a89c
 23fca38:	00000024 	.word	0x00000024

023fca3c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fca3c:	b509      	push	{r0, r3, lr}
 23fca3e:	4804      	ldr	r0, [pc, #16]	; (23fca50 <hal_usart_available+0x14>)
 23fca40:	6800      	ldr	r0, [r0, #0]
 23fca42:	4b04      	ldr	r3, [pc, #16]	; (23fca54 <hal_usart_available+0x18>)
 23fca44:	4403      	add	r3, r0
 23fca46:	681b      	ldr	r3, [r3, #0]
 23fca48:	691b      	ldr	r3, [r3, #16]
 23fca4a:	9302      	str	r3, [sp, #8]
 23fca4c:	bd09      	pop	{r0, r3, pc}
 23fca4e:	0000      	.short	0x0000
 23fca50:	1007a89c 	.word	0x1007a89c
 23fca54:	00000024 	.word	0x00000024

023fca58 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fca58:	b509      	push	{r0, r3, lr}
 23fca5a:	4804      	ldr	r0, [pc, #16]	; (23fca6c <hal_usart_read+0x14>)
 23fca5c:	6800      	ldr	r0, [r0, #0]
 23fca5e:	4b04      	ldr	r3, [pc, #16]	; (23fca70 <hal_usart_read+0x18>)
 23fca60:	4403      	add	r3, r0
 23fca62:	681b      	ldr	r3, [r3, #0]
 23fca64:	695b      	ldr	r3, [r3, #20]
 23fca66:	9302      	str	r3, [sp, #8]
 23fca68:	bd09      	pop	{r0, r3, pc}
 23fca6a:	0000      	.short	0x0000
 23fca6c:	1007a89c 	.word	0x1007a89c
 23fca70:	00000024 	.word	0x00000024

023fca74 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fca74:	b509      	push	{r0, r3, lr}
 23fca76:	4804      	ldr	r0, [pc, #16]	; (23fca88 <hal_usart_peek+0x14>)
 23fca78:	6800      	ldr	r0, [r0, #0]
 23fca7a:	4b04      	ldr	r3, [pc, #16]	; (23fca8c <hal_usart_peek+0x18>)
 23fca7c:	4403      	add	r3, r0
 23fca7e:	681b      	ldr	r3, [r3, #0]
 23fca80:	699b      	ldr	r3, [r3, #24]
 23fca82:	9302      	str	r3, [sp, #8]
 23fca84:	bd09      	pop	{r0, r3, pc}
 23fca86:	0000      	.short	0x0000
 23fca88:	1007a89c 	.word	0x1007a89c
 23fca8c:	00000024 	.word	0x00000024

023fca90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fca90:	b509      	push	{r0, r3, lr}
 23fca92:	4804      	ldr	r0, [pc, #16]	; (23fcaa4 <hal_usart_flush+0x14>)
 23fca94:	6800      	ldr	r0, [r0, #0]
 23fca96:	4b04      	ldr	r3, [pc, #16]	; (23fcaa8 <hal_usart_flush+0x18>)
 23fca98:	4403      	add	r3, r0
 23fca9a:	681b      	ldr	r3, [r3, #0]
 23fca9c:	69db      	ldr	r3, [r3, #28]
 23fca9e:	9302      	str	r3, [sp, #8]
 23fcaa0:	bd09      	pop	{r0, r3, pc}
 23fcaa2:	0000      	.short	0x0000
 23fcaa4:	1007a89c 	.word	0x1007a89c
 23fcaa8:	00000024 	.word	0x00000024

023fcaac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fcaac:	b509      	push	{r0, r3, lr}
 23fcaae:	4804      	ldr	r0, [pc, #16]	; (23fcac0 <hal_usart_is_enabled+0x14>)
 23fcab0:	6800      	ldr	r0, [r0, #0]
 23fcab2:	4b04      	ldr	r3, [pc, #16]	; (23fcac4 <hal_usart_is_enabled+0x18>)
 23fcab4:	4403      	add	r3, r0
 23fcab6:	681b      	ldr	r3, [r3, #0]
 23fcab8:	6a1b      	ldr	r3, [r3, #32]
 23fcaba:	9302      	str	r3, [sp, #8]
 23fcabc:	bd09      	pop	{r0, r3, pc}
 23fcabe:	0000      	.short	0x0000
 23fcac0:	1007a89c 	.word	0x1007a89c
 23fcac4:	00000024 	.word	0x00000024

023fcac8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fcac8:	b509      	push	{r0, r3, lr}
 23fcaca:	4804      	ldr	r0, [pc, #16]	; (23fcadc <hal_usart_available_data_for_write+0x14>)
 23fcacc:	6800      	ldr	r0, [r0, #0]
 23fcace:	4b04      	ldr	r3, [pc, #16]	; (23fcae0 <hal_usart_available_data_for_write+0x18>)
 23fcad0:	4403      	add	r3, r0
 23fcad2:	681b      	ldr	r3, [r3, #0]
 23fcad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcad6:	9302      	str	r3, [sp, #8]
 23fcad8:	bd09      	pop	{r0, r3, pc}
 23fcada:	0000      	.short	0x0000
 23fcadc:	1007a89c 	.word	0x1007a89c
 23fcae0:	00000024 	.word	0x00000024

023fcae4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fcae4:	b509      	push	{r0, r3, lr}
 23fcae6:	4804      	ldr	r0, [pc, #16]	; (23fcaf8 <hal_usart_begin_config+0x14>)
 23fcae8:	6800      	ldr	r0, [r0, #0]
 23fcaea:	4b04      	ldr	r3, [pc, #16]	; (23fcafc <hal_usart_begin_config+0x18>)
 23fcaec:	4403      	add	r3, r0
 23fcaee:	681b      	ldr	r3, [r3, #0]
 23fcaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcaf2:	9302      	str	r3, [sp, #8]
 23fcaf4:	bd09      	pop	{r0, r3, pc}
 23fcaf6:	0000      	.short	0x0000
 23fcaf8:	1007a89c 	.word	0x1007a89c
 23fcafc:	00000024 	.word	0x00000024

023fcb00 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcb00:	b509      	push	{r0, r3, lr}
 23fcb02:	4804      	ldr	r0, [pc, #16]	; (23fcb14 <hal_usart_init_ex+0x14>)
 23fcb04:	6800      	ldr	r0, [r0, #0]
 23fcb06:	4b04      	ldr	r3, [pc, #16]	; (23fcb18 <hal_usart_init_ex+0x18>)
 23fcb08:	4403      	add	r3, r0
 23fcb0a:	681b      	ldr	r3, [r3, #0]
 23fcb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcb0e:	9302      	str	r3, [sp, #8]
 23fcb10:	bd09      	pop	{r0, r3, pc}
 23fcb12:	0000      	.short	0x0000
 23fcb14:	1007a89c 	.word	0x1007a89c
 23fcb18:	00000024 	.word	0x00000024

023fcb1c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fcb1c:	b509      	push	{r0, r3, lr}
 23fcb1e:	4804      	ldr	r0, [pc, #16]	; (23fcb30 <HAL_USB_USART_Init+0x14>)
 23fcb20:	6800      	ldr	r0, [r0, #0]
 23fcb22:	4b04      	ldr	r3, [pc, #16]	; (23fcb34 <HAL_USB_USART_Init+0x18>)
 23fcb24:	4403      	add	r3, r0
 23fcb26:	681b      	ldr	r3, [r3, #0]
 23fcb28:	681b      	ldr	r3, [r3, #0]
 23fcb2a:	9302      	str	r3, [sp, #8]
 23fcb2c:	bd09      	pop	{r0, r3, pc}
 23fcb2e:	0000      	.short	0x0000
 23fcb30:	1007a89c 	.word	0x1007a89c
 23fcb34:	00000034 	.word	0x00000034

023fcb38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fcb38:	b509      	push	{r0, r3, lr}
 23fcb3a:	4804      	ldr	r0, [pc, #16]	; (23fcb4c <HAL_USB_USART_Begin+0x14>)
 23fcb3c:	6800      	ldr	r0, [r0, #0]
 23fcb3e:	4b04      	ldr	r3, [pc, #16]	; (23fcb50 <HAL_USB_USART_Begin+0x18>)
 23fcb40:	4403      	add	r3, r0
 23fcb42:	681b      	ldr	r3, [r3, #0]
 23fcb44:	685b      	ldr	r3, [r3, #4]
 23fcb46:	9302      	str	r3, [sp, #8]
 23fcb48:	bd09      	pop	{r0, r3, pc}
 23fcb4a:	0000      	.short	0x0000
 23fcb4c:	1007a89c 	.word	0x1007a89c
 23fcb50:	00000034 	.word	0x00000034

023fcb54 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fcb54:	b509      	push	{r0, r3, lr}
 23fcb56:	4804      	ldr	r0, [pc, #16]	; (23fcb68 <HAL_USB_USART_End+0x14>)
 23fcb58:	6800      	ldr	r0, [r0, #0]
 23fcb5a:	4b04      	ldr	r3, [pc, #16]	; (23fcb6c <HAL_USB_USART_End+0x18>)
 23fcb5c:	4403      	add	r3, r0
 23fcb5e:	681b      	ldr	r3, [r3, #0]
 23fcb60:	689b      	ldr	r3, [r3, #8]
 23fcb62:	9302      	str	r3, [sp, #8]
 23fcb64:	bd09      	pop	{r0, r3, pc}
 23fcb66:	0000      	.short	0x0000
 23fcb68:	1007a89c 	.word	0x1007a89c
 23fcb6c:	00000034 	.word	0x00000034

023fcb70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fcb70:	b509      	push	{r0, r3, lr}
 23fcb72:	4804      	ldr	r0, [pc, #16]	; (23fcb84 <HAL_USB_USART_Available_Data+0x14>)
 23fcb74:	6800      	ldr	r0, [r0, #0]
 23fcb76:	4b04      	ldr	r3, [pc, #16]	; (23fcb88 <HAL_USB_USART_Available_Data+0x18>)
 23fcb78:	4403      	add	r3, r0
 23fcb7a:	681b      	ldr	r3, [r3, #0]
 23fcb7c:	691b      	ldr	r3, [r3, #16]
 23fcb7e:	9302      	str	r3, [sp, #8]
 23fcb80:	bd09      	pop	{r0, r3, pc}
 23fcb82:	0000      	.short	0x0000
 23fcb84:	1007a89c 	.word	0x1007a89c
 23fcb88:	00000034 	.word	0x00000034

023fcb8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fcb8c:	b509      	push	{r0, r3, lr}
 23fcb8e:	4804      	ldr	r0, [pc, #16]	; (23fcba0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fcb90:	6800      	ldr	r0, [r0, #0]
 23fcb92:	4b04      	ldr	r3, [pc, #16]	; (23fcba4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fcb94:	4403      	add	r3, r0
 23fcb96:	681b      	ldr	r3, [r3, #0]
 23fcb98:	695b      	ldr	r3, [r3, #20]
 23fcb9a:	9302      	str	r3, [sp, #8]
 23fcb9c:	bd09      	pop	{r0, r3, pc}
 23fcb9e:	0000      	.short	0x0000
 23fcba0:	1007a89c 	.word	0x1007a89c
 23fcba4:	00000034 	.word	0x00000034

023fcba8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcba8:	b509      	push	{r0, r3, lr}
 23fcbaa:	4804      	ldr	r0, [pc, #16]	; (23fcbbc <HAL_USB_USART_Receive_Data+0x14>)
 23fcbac:	6800      	ldr	r0, [r0, #0]
 23fcbae:	4b04      	ldr	r3, [pc, #16]	; (23fcbc0 <HAL_USB_USART_Receive_Data+0x18>)
 23fcbb0:	4403      	add	r3, r0
 23fcbb2:	681b      	ldr	r3, [r3, #0]
 23fcbb4:	699b      	ldr	r3, [r3, #24]
 23fcbb6:	9302      	str	r3, [sp, #8]
 23fcbb8:	bd09      	pop	{r0, r3, pc}
 23fcbba:	0000      	.short	0x0000
 23fcbbc:	1007a89c 	.word	0x1007a89c
 23fcbc0:	00000034 	.word	0x00000034

023fcbc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fcbc4:	b509      	push	{r0, r3, lr}
 23fcbc6:	4804      	ldr	r0, [pc, #16]	; (23fcbd8 <HAL_USB_USART_Send_Data+0x14>)
 23fcbc8:	6800      	ldr	r0, [r0, #0]
 23fcbca:	4b04      	ldr	r3, [pc, #16]	; (23fcbdc <HAL_USB_USART_Send_Data+0x18>)
 23fcbcc:	4403      	add	r3, r0
 23fcbce:	681b      	ldr	r3, [r3, #0]
 23fcbd0:	69db      	ldr	r3, [r3, #28]
 23fcbd2:	9302      	str	r3, [sp, #8]
 23fcbd4:	bd09      	pop	{r0, r3, pc}
 23fcbd6:	0000      	.short	0x0000
 23fcbd8:	1007a89c 	.word	0x1007a89c
 23fcbdc:	00000034 	.word	0x00000034

023fcbe0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fcbe0:	b509      	push	{r0, r3, lr}
 23fcbe2:	4804      	ldr	r0, [pc, #16]	; (23fcbf4 <HAL_USB_USART_Flush_Data+0x14>)
 23fcbe4:	6800      	ldr	r0, [r0, #0]
 23fcbe6:	4b04      	ldr	r3, [pc, #16]	; (23fcbf8 <HAL_USB_USART_Flush_Data+0x18>)
 23fcbe8:	4403      	add	r3, r0
 23fcbea:	681b      	ldr	r3, [r3, #0]
 23fcbec:	6a1b      	ldr	r3, [r3, #32]
 23fcbee:	9302      	str	r3, [sp, #8]
 23fcbf0:	bd09      	pop	{r0, r3, pc}
 23fcbf2:	0000      	.short	0x0000
 23fcbf4:	1007a89c 	.word	0x1007a89c
 23fcbf8:	00000034 	.word	0x00000034

023fcbfc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fcbfc:	b509      	push	{r0, r3, lr}
 23fcbfe:	4804      	ldr	r0, [pc, #16]	; (23fcc10 <HAL_USB_USART_Is_Connected+0x14>)
 23fcc00:	6800      	ldr	r0, [r0, #0]
 23fcc02:	4b04      	ldr	r3, [pc, #16]	; (23fcc14 <HAL_USB_USART_Is_Connected+0x18>)
 23fcc04:	4403      	add	r3, r0
 23fcc06:	681b      	ldr	r3, [r3, #0]
 23fcc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcc0a:	9302      	str	r3, [sp, #8]
 23fcc0c:	bd09      	pop	{r0, r3, pc}
 23fcc0e:	0000      	.short	0x0000
 23fcc10:	1007a89c 	.word	0x1007a89c
 23fcc14:	00000034 	.word	0x00000034

023fcc18 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fcc18:	b509      	push	{r0, r3, lr}
 23fcc1a:	4804      	ldr	r0, [pc, #16]	; (23fcc2c <panic_+0x14>)
 23fcc1c:	6800      	ldr	r0, [r0, #0]
 23fcc1e:	4b04      	ldr	r3, [pc, #16]	; (23fcc30 <panic_+0x18>)
 23fcc20:	4403      	add	r3, r0
 23fcc22:	681b      	ldr	r3, [r3, #0]
 23fcc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcc26:	9302      	str	r3, [sp, #8]
 23fcc28:	bd09      	pop	{r0, r3, pc}
 23fcc2a:	0000      	.short	0x0000
 23fcc2c:	1007a89c 	.word	0x1007a89c
 23fcc30:	00000048 	.word	0x00000048

023fcc34 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fcc34:	b509      	push	{r0, r3, lr}
 23fcc36:	4804      	ldr	r0, [pc, #16]	; (23fcc48 <log_message_v+0x14>)
 23fcc38:	6800      	ldr	r0, [r0, #0]
 23fcc3a:	4b04      	ldr	r3, [pc, #16]	; (23fcc4c <log_message_v+0x18>)
 23fcc3c:	4403      	add	r3, r0
 23fcc3e:	681b      	ldr	r3, [r3, #0]
 23fcc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcc42:	9302      	str	r3, [sp, #8]
 23fcc44:	bd09      	pop	{r0, r3, pc}
 23fcc46:	0000      	.short	0x0000
 23fcc48:	1007a89c 	.word	0x1007a89c
 23fcc4c:	00000048 	.word	0x00000048

023fcc50 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fcc50:	b509      	push	{r0, r3, lr}
 23fcc52:	4804      	ldr	r0, [pc, #16]	; (23fcc64 <log_level_name+0x14>)
 23fcc54:	6800      	ldr	r0, [r0, #0]
 23fcc56:	4b04      	ldr	r3, [pc, #16]	; (23fcc68 <log_level_name+0x18>)
 23fcc58:	4403      	add	r3, r0
 23fcc5a:	681b      	ldr	r3, [r3, #0]
 23fcc5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fcc5e:	9302      	str	r3, [sp, #8]
 23fcc60:	bd09      	pop	{r0, r3, pc}
 23fcc62:	0000      	.short	0x0000
 23fcc64:	1007a89c 	.word	0x1007a89c
 23fcc68:	00000048 	.word	0x00000048

023fcc6c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fcc6c:	b509      	push	{r0, r3, lr}
 23fcc6e:	4804      	ldr	r0, [pc, #16]	; (23fcc80 <log_set_callbacks+0x14>)
 23fcc70:	6800      	ldr	r0, [r0, #0]
 23fcc72:	4b04      	ldr	r3, [pc, #16]	; (23fcc84 <log_set_callbacks+0x18>)
 23fcc74:	4403      	add	r3, r0
 23fcc76:	681b      	ldr	r3, [r3, #0]
 23fcc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fcc7a:	9302      	str	r3, [sp, #8]
 23fcc7c:	bd09      	pop	{r0, r3, pc}
 23fcc7e:	0000      	.short	0x0000
 23fcc80:	1007a89c 	.word	0x1007a89c
 23fcc84:	00000048 	.word	0x00000048

023fcc88 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fcc88:	b509      	push	{r0, r3, lr}
 23fcc8a:	4804      	ldr	r0, [pc, #16]	; (23fcc9c <set_system_mode+0x14>)
 23fcc8c:	6800      	ldr	r0, [r0, #0]
 23fcc8e:	4b04      	ldr	r3, [pc, #16]	; (23fcca0 <set_system_mode+0x18>)
 23fcc90:	4403      	add	r3, r0
 23fcc92:	681b      	ldr	r3, [r3, #0]
 23fcc94:	685b      	ldr	r3, [r3, #4]
 23fcc96:	9302      	str	r3, [sp, #8]
 23fcc98:	bd09      	pop	{r0, r3, pc}
 23fcc9a:	0000      	.short	0x0000
 23fcc9c:	1007a89c 	.word	0x1007a89c
 23fcca0:	00000008 	.word	0x00000008

023fcca4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fcca4:	b509      	push	{r0, r3, lr}
 23fcca6:	4804      	ldr	r0, [pc, #16]	; (23fccb8 <system_delay_ms+0x14>)
 23fcca8:	6800      	ldr	r0, [r0, #0]
 23fccaa:	4b04      	ldr	r3, [pc, #16]	; (23fccbc <system_delay_ms+0x18>)
 23fccac:	4403      	add	r3, r0
 23fccae:	681b      	ldr	r3, [r3, #0]
 23fccb0:	695b      	ldr	r3, [r3, #20]
 23fccb2:	9302      	str	r3, [sp, #8]
 23fccb4:	bd09      	pop	{r0, r3, pc}
 23fccb6:	0000      	.short	0x0000
 23fccb8:	1007a89c 	.word	0x1007a89c
 23fccbc:	00000008 	.word	0x00000008

023fccc0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fccc0:	b509      	push	{r0, r3, lr}
 23fccc2:	4804      	ldr	r0, [pc, #16]	; (23fccd4 <system_thread_set_state+0x14>)
 23fccc4:	6800      	ldr	r0, [r0, #0]
 23fccc6:	4b04      	ldr	r3, [pc, #16]	; (23fccd8 <system_thread_set_state+0x18>)
 23fccc8:	4403      	add	r3, r0
 23fccca:	681b      	ldr	r3, [r3, #0]
 23fcccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fccce:	9302      	str	r3, [sp, #8]
 23fccd0:	bd09      	pop	{r0, r3, pc}
 23fccd2:	0000      	.short	0x0000
 23fccd4:	1007a89c 	.word	0x1007a89c
 23fccd8:	00000008 	.word	0x00000008

023fccdc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fccdc:	b509      	push	{r0, r3, lr}
 23fccde:	4804      	ldr	r0, [pc, #16]	; (23fccf0 <system_ctrl_set_app_request_handler+0x14>)
 23fcce0:	6800      	ldr	r0, [r0, #0]
 23fcce2:	4b04      	ldr	r3, [pc, #16]	; (23fccf4 <system_ctrl_set_app_request_handler+0x18>)
 23fcce4:	4403      	add	r3, r0
 23fcce6:	681b      	ldr	r3, [r3, #0]
 23fcce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fccec:	9302      	str	r3, [sp, #8]
 23fccee:	bd09      	pop	{r0, r3, pc}
 23fccf0:	1007a89c 	.word	0x1007a89c
 23fccf4:	00000008 	.word	0x00000008

023fccf8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fccf8:	b509      	push	{r0, r3, lr}
 23fccfa:	4804      	ldr	r0, [pc, #16]	; (23fcd0c <system_ctrl_set_result+0x14>)
 23fccfc:	6800      	ldr	r0, [r0, #0]
 23fccfe:	4b04      	ldr	r3, [pc, #16]	; (23fcd10 <system_ctrl_set_result+0x18>)
 23fcd00:	4403      	add	r3, r0
 23fcd02:	681b      	ldr	r3, [r3, #0]
 23fcd04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fcd08:	9302      	str	r3, [sp, #8]
 23fcd0a:	bd09      	pop	{r0, r3, pc}
 23fcd0c:	1007a89c 	.word	0x1007a89c
 23fcd10:	00000008 	.word	0x00000008

023fcd14 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fcd14:	b509      	push	{r0, r3, lr}
 23fcd16:	4804      	ldr	r0, [pc, #16]	; (23fcd28 <spark_process+0x14>)
 23fcd18:	6800      	ldr	r0, [r0, #0]
 23fcd1a:	4b04      	ldr	r3, [pc, #16]	; (23fcd2c <spark_process+0x18>)
 23fcd1c:	4403      	add	r3, r0
 23fcd1e:	681b      	ldr	r3, [r3, #0]
 23fcd20:	689b      	ldr	r3, [r3, #8]
 23fcd22:	9302      	str	r3, [sp, #8]
 23fcd24:	bd09      	pop	{r0, r3, pc}
 23fcd26:	0000      	.short	0x0000
 23fcd28:	1007a89c 	.word	0x1007a89c
 23fcd2c:	0000002c 	.word	0x0000002c

023fcd30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fcd30:	b509      	push	{r0, r3, lr}
 23fcd32:	4804      	ldr	r0, [pc, #16]	; (23fcd44 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fcd34:	6800      	ldr	r0, [r0, #0]
 23fcd36:	4b04      	ldr	r3, [pc, #16]	; (23fcd48 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fcd38:	4403      	add	r3, r0
 23fcd3a:	681b      	ldr	r3, [r3, #0]
 23fcd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcd3e:	9302      	str	r3, [sp, #8]
 23fcd40:	bd09      	pop	{r0, r3, pc}
 23fcd42:	0000      	.short	0x0000
 23fcd44:	1007a89c 	.word	0x1007a89c
 23fcd48:	0000002c 	.word	0x0000002c

023fcd4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcd4c:	b509      	push	{r0, r3, lr}
 23fcd4e:	4804      	ldr	r0, [pc, #16]	; (23fcd60 <network_connect+0x14>)
 23fcd50:	6800      	ldr	r0, [r0, #0]
 23fcd52:	4b04      	ldr	r3, [pc, #16]	; (23fcd64 <network_connect+0x18>)
 23fcd54:	4403      	add	r3, r0
 23fcd56:	681b      	ldr	r3, [r3, #0]
 23fcd58:	685b      	ldr	r3, [r3, #4]
 23fcd5a:	9302      	str	r3, [sp, #8]
 23fcd5c:	bd09      	pop	{r0, r3, pc}
 23fcd5e:	0000      	.short	0x0000
 23fcd60:	1007a89c 	.word	0x1007a89c
 23fcd64:	00000028 	.word	0x00000028

023fcd68 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fcd68:	b509      	push	{r0, r3, lr}
 23fcd6a:	4804      	ldr	r0, [pc, #16]	; (23fcd7c <network_connecting+0x14>)
 23fcd6c:	6800      	ldr	r0, [r0, #0]
 23fcd6e:	4b04      	ldr	r3, [pc, #16]	; (23fcd80 <network_connecting+0x18>)
 23fcd70:	4403      	add	r3, r0
 23fcd72:	681b      	ldr	r3, [r3, #0]
 23fcd74:	689b      	ldr	r3, [r3, #8]
 23fcd76:	9302      	str	r3, [sp, #8]
 23fcd78:	bd09      	pop	{r0, r3, pc}
 23fcd7a:	0000      	.short	0x0000
 23fcd7c:	1007a89c 	.word	0x1007a89c
 23fcd80:	00000028 	.word	0x00000028

023fcd84 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fcd84:	b509      	push	{r0, r3, lr}
 23fcd86:	4804      	ldr	r0, [pc, #16]	; (23fcd98 <network_disconnect+0x14>)
 23fcd88:	6800      	ldr	r0, [r0, #0]
 23fcd8a:	4b04      	ldr	r3, [pc, #16]	; (23fcd9c <network_disconnect+0x18>)
 23fcd8c:	4403      	add	r3, r0
 23fcd8e:	681b      	ldr	r3, [r3, #0]
 23fcd90:	68db      	ldr	r3, [r3, #12]
 23fcd92:	9302      	str	r3, [sp, #8]
 23fcd94:	bd09      	pop	{r0, r3, pc}
 23fcd96:	0000      	.short	0x0000
 23fcd98:	1007a89c 	.word	0x1007a89c
 23fcd9c:	00000028 	.word	0x00000028

023fcda0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fcda0:	b509      	push	{r0, r3, lr}
 23fcda2:	4804      	ldr	r0, [pc, #16]	; (23fcdb4 <network_ready+0x14>)
 23fcda4:	6800      	ldr	r0, [r0, #0]
 23fcda6:	4b04      	ldr	r3, [pc, #16]	; (23fcdb8 <network_ready+0x18>)
 23fcda8:	4403      	add	r3, r0
 23fcdaa:	681b      	ldr	r3, [r3, #0]
 23fcdac:	691b      	ldr	r3, [r3, #16]
 23fcdae:	9302      	str	r3, [sp, #8]
 23fcdb0:	bd09      	pop	{r0, r3, pc}
 23fcdb2:	0000      	.short	0x0000
 23fcdb4:	1007a89c 	.word	0x1007a89c
 23fcdb8:	00000028 	.word	0x00000028

023fcdbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcdbc:	b509      	push	{r0, r3, lr}
 23fcdbe:	4804      	ldr	r0, [pc, #16]	; (23fcdd0 <network_on+0x14>)
 23fcdc0:	6800      	ldr	r0, [r0, #0]
 23fcdc2:	4b04      	ldr	r3, [pc, #16]	; (23fcdd4 <network_on+0x18>)
 23fcdc4:	4403      	add	r3, r0
 23fcdc6:	681b      	ldr	r3, [r3, #0]
 23fcdc8:	695b      	ldr	r3, [r3, #20]
 23fcdca:	9302      	str	r3, [sp, #8]
 23fcdcc:	bd09      	pop	{r0, r3, pc}
 23fcdce:	0000      	.short	0x0000
 23fcdd0:	1007a89c 	.word	0x1007a89c
 23fcdd4:	00000028 	.word	0x00000028

023fcdd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcdd8:	b509      	push	{r0, r3, lr}
 23fcdda:	4804      	ldr	r0, [pc, #16]	; (23fcdec <network_off+0x14>)
 23fcddc:	6800      	ldr	r0, [r0, #0]
 23fcdde:	4b04      	ldr	r3, [pc, #16]	; (23fcdf0 <network_off+0x18>)
 23fcde0:	4403      	add	r3, r0
 23fcde2:	681b      	ldr	r3, [r3, #0]
 23fcde4:	699b      	ldr	r3, [r3, #24]
 23fcde6:	9302      	str	r3, [sp, #8]
 23fcde8:	bd09      	pop	{r0, r3, pc}
 23fcdea:	0000      	.short	0x0000
 23fcdec:	1007a89c 	.word	0x1007a89c
 23fcdf0:	00000028 	.word	0x00000028

023fcdf4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fcdf4:	b509      	push	{r0, r3, lr}
 23fcdf6:	4804      	ldr	r0, [pc, #16]	; (23fce08 <network_listen+0x14>)
 23fcdf8:	6800      	ldr	r0, [r0, #0]
 23fcdfa:	4b04      	ldr	r3, [pc, #16]	; (23fce0c <network_listen+0x18>)
 23fcdfc:	4403      	add	r3, r0
 23fcdfe:	681b      	ldr	r3, [r3, #0]
 23fce00:	69db      	ldr	r3, [r3, #28]
 23fce02:	9302      	str	r3, [sp, #8]
 23fce04:	bd09      	pop	{r0, r3, pc}
 23fce06:	0000      	.short	0x0000
 23fce08:	1007a89c 	.word	0x1007a89c
 23fce0c:	00000028 	.word	0x00000028

023fce10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fce10:	b509      	push	{r0, r3, lr}
 23fce12:	4804      	ldr	r0, [pc, #16]	; (23fce24 <network_listening+0x14>)
 23fce14:	6800      	ldr	r0, [r0, #0]
 23fce16:	4b04      	ldr	r3, [pc, #16]	; (23fce28 <network_listening+0x18>)
 23fce18:	4403      	add	r3, r0
 23fce1a:	681b      	ldr	r3, [r3, #0]
 23fce1c:	6a1b      	ldr	r3, [r3, #32]
 23fce1e:	9302      	str	r3, [sp, #8]
 23fce20:	bd09      	pop	{r0, r3, pc}
 23fce22:	0000      	.short	0x0000
 23fce24:	1007a89c 	.word	0x1007a89c
 23fce28:	00000028 	.word	0x00000028

023fce2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fce2c:	b509      	push	{r0, r3, lr}
 23fce2e:	4804      	ldr	r0, [pc, #16]	; (23fce40 <network_set_listen_timeout+0x14>)
 23fce30:	6800      	ldr	r0, [r0, #0]
 23fce32:	4b04      	ldr	r3, [pc, #16]	; (23fce44 <network_set_listen_timeout+0x18>)
 23fce34:	4403      	add	r3, r0
 23fce36:	681b      	ldr	r3, [r3, #0]
 23fce38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fce3a:	9302      	str	r3, [sp, #8]
 23fce3c:	bd09      	pop	{r0, r3, pc}
 23fce3e:	0000      	.short	0x0000
 23fce40:	1007a89c 	.word	0x1007a89c
 23fce44:	00000028 	.word	0x00000028

023fce48 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fce48:	b509      	push	{r0, r3, lr}
 23fce4a:	4804      	ldr	r0, [pc, #16]	; (23fce5c <network_get_listen_timeout+0x14>)
 23fce4c:	6800      	ldr	r0, [r0, #0]
 23fce4e:	4b04      	ldr	r3, [pc, #16]	; (23fce60 <network_get_listen_timeout+0x18>)
 23fce50:	4403      	add	r3, r0
 23fce52:	681b      	ldr	r3, [r3, #0]
 23fce54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fce56:	9302      	str	r3, [sp, #8]
 23fce58:	bd09      	pop	{r0, r3, pc}
 23fce5a:	0000      	.short	0x0000
 23fce5c:	1007a89c 	.word	0x1007a89c
 23fce60:	00000028 	.word	0x00000028

023fce64 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fce64:	b509      	push	{r0, r3, lr}
 23fce66:	4804      	ldr	r0, [pc, #16]	; (23fce78 <network_is_on+0x14>)
 23fce68:	6800      	ldr	r0, [r0, #0]
 23fce6a:	4b04      	ldr	r3, [pc, #16]	; (23fce7c <network_is_on+0x18>)
 23fce6c:	4403      	add	r3, r0
 23fce6e:	681b      	ldr	r3, [r3, #0]
 23fce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fce72:	9302      	str	r3, [sp, #8]
 23fce74:	bd09      	pop	{r0, r3, pc}
 23fce76:	0000      	.short	0x0000
 23fce78:	1007a89c 	.word	0x1007a89c
 23fce7c:	00000028 	.word	0x00000028

023fce80 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fce80:	b509      	push	{r0, r3, lr}
 23fce82:	4804      	ldr	r0, [pc, #16]	; (23fce94 <network_is_off+0x14>)
 23fce84:	6800      	ldr	r0, [r0, #0]
 23fce86:	4b04      	ldr	r3, [pc, #16]	; (23fce98 <network_is_off+0x18>)
 23fce88:	4403      	add	r3, r0
 23fce8a:	681b      	ldr	r3, [r3, #0]
 23fce8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fce8e:	9302      	str	r3, [sp, #8]
 23fce90:	bd09      	pop	{r0, r3, pc}
 23fce92:	0000      	.short	0x0000
 23fce94:	1007a89c 	.word	0x1007a89c
 23fce98:	00000028 	.word	0x00000028

023fce9c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fce9c:	b509      	push	{r0, r3, lr}
 23fce9e:	4804      	ldr	r0, [pc, #16]	; (23fceb0 <malloc+0x14>)
 23fcea0:	6800      	ldr	r0, [r0, #0]
 23fcea2:	4b04      	ldr	r3, [pc, #16]	; (23fceb4 <malloc+0x18>)
 23fcea4:	4403      	add	r3, r0
 23fcea6:	681b      	ldr	r3, [r3, #0]
 23fcea8:	681b      	ldr	r3, [r3, #0]
 23fceaa:	9302      	str	r3, [sp, #8]
 23fceac:	bd09      	pop	{r0, r3, pc}
 23fceae:	0000      	.short	0x0000
 23fceb0:	1007a89c 	.word	0x1007a89c
 23fceb4:	00000004 	.word	0x00000004

023fceb8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fceb8:	b509      	push	{r0, r3, lr}
 23fceba:	4804      	ldr	r0, [pc, #16]	; (23fcecc <free+0x14>)
 23fcebc:	6800      	ldr	r0, [r0, #0]
 23fcebe:	4b04      	ldr	r3, [pc, #16]	; (23fced0 <free+0x18>)
 23fcec0:	4403      	add	r3, r0
 23fcec2:	681b      	ldr	r3, [r3, #0]
 23fcec4:	685b      	ldr	r3, [r3, #4]
 23fcec6:	9302      	str	r3, [sp, #8]
 23fcec8:	bd09      	pop	{r0, r3, pc}
 23fceca:	0000      	.short	0x0000
 23fcecc:	1007a89c 	.word	0x1007a89c
 23fced0:	00000004 	.word	0x00000004

023fced4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fced4:	b509      	push	{r0, r3, lr}
 23fced6:	4804      	ldr	r0, [pc, #16]	; (23fcee8 <realloc+0x14>)
 23fced8:	6800      	ldr	r0, [r0, #0]
 23fceda:	4b04      	ldr	r3, [pc, #16]	; (23fceec <realloc+0x18>)
 23fcedc:	4403      	add	r3, r0
 23fcede:	681b      	ldr	r3, [r3, #0]
 23fcee0:	689b      	ldr	r3, [r3, #8]
 23fcee2:	9302      	str	r3, [sp, #8]
 23fcee4:	bd09      	pop	{r0, r3, pc}
 23fcee6:	0000      	.short	0x0000
 23fcee8:	1007a89c 	.word	0x1007a89c
 23fceec:	00000004 	.word	0x00000004

023fcef0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fcef0:	b509      	push	{r0, r3, lr}
 23fcef2:	4804      	ldr	r0, [pc, #16]	; (23fcf04 <vsnprintf+0x14>)
 23fcef4:	6800      	ldr	r0, [r0, #0]
 23fcef6:	4b04      	ldr	r3, [pc, #16]	; (23fcf08 <vsnprintf+0x18>)
 23fcef8:	4403      	add	r3, r0
 23fcefa:	681b      	ldr	r3, [r3, #0]
 23fcefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcefe:	9302      	str	r3, [sp, #8]
 23fcf00:	bd09      	pop	{r0, r3, pc}
 23fcf02:	0000      	.short	0x0000
 23fcf04:	1007a89c 	.word	0x1007a89c
 23fcf08:	00000004 	.word	0x00000004

023fcf0c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fcf0c:	b509      	push	{r0, r3, lr}
 23fcf0e:	4804      	ldr	r0, [pc, #16]	; (23fcf20 <__errno+0x14>)
 23fcf10:	6800      	ldr	r0, [r0, #0]
 23fcf12:	4b04      	ldr	r3, [pc, #16]	; (23fcf24 <__errno+0x18>)
 23fcf14:	4403      	add	r3, r0
 23fcf16:	681b      	ldr	r3, [r3, #0]
 23fcf18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcf1a:	9302      	str	r3, [sp, #8]
 23fcf1c:	bd09      	pop	{r0, r3, pc}
 23fcf1e:	0000      	.short	0x0000
 23fcf20:	1007a89c 	.word	0x1007a89c
 23fcf24:	00000004 	.word	0x00000004

023fcf28 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fcf28:	b509      	push	{r0, r3, lr}
 23fcf2a:	4804      	ldr	r0, [pc, #16]	; (23fcf3c <__assert_func+0x14>)
 23fcf2c:	6800      	ldr	r0, [r0, #0]
 23fcf2e:	4b04      	ldr	r3, [pc, #16]	; (23fcf40 <__assert_func+0x18>)
 23fcf30:	4403      	add	r3, r0
 23fcf32:	681b      	ldr	r3, [r3, #0]
 23fcf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcf36:	9302      	str	r3, [sp, #8]
 23fcf38:	bd09      	pop	{r0, r3, pc}
 23fcf3a:	0000      	.short	0x0000
 23fcf3c:	1007a89c 	.word	0x1007a89c
 23fcf40:	00000004 	.word	0x00000004

023fcf44 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fcf44:	b509      	push	{r0, r3, lr}
 23fcf46:	4804      	ldr	r0, [pc, #16]	; (23fcf58 <newlib_impure_ptr_callback+0x14>)
 23fcf48:	6800      	ldr	r0, [r0, #0]
 23fcf4a:	4b04      	ldr	r3, [pc, #16]	; (23fcf5c <newlib_impure_ptr_callback+0x18>)
 23fcf4c:	4403      	add	r3, r0
 23fcf4e:	681b      	ldr	r3, [r3, #0]
 23fcf50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcf52:	9302      	str	r3, [sp, #8]
 23fcf54:	bd09      	pop	{r0, r3, pc}
 23fcf56:	0000      	.short	0x0000
 23fcf58:	1007a89c 	.word	0x1007a89c
 23fcf5c:	00000004 	.word	0x00000004

023fcf60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fcf60:	2100      	movs	r1, #0
 23fcf62:	f7ff be9f 	b.w	23fcca4 <system_delay_ms>

023fcf66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fcf66:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fcf68:	6843      	ldr	r3, [r0, #4]
    {
 23fcf6a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fcf6c:	3b01      	subs	r3, #1
 23fcf6e:	6043      	str	r3, [r0, #4]
 23fcf70:	b963      	cbnz	r3, 23fcf8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fcf72:	6803      	ldr	r3, [r0, #0]
 23fcf74:	689b      	ldr	r3, [r3, #8]
 23fcf76:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcf78:	68a3      	ldr	r3, [r4, #8]
 23fcf7a:	3b01      	subs	r3, #1
 23fcf7c:	60a3      	str	r3, [r4, #8]
 23fcf7e:	b92b      	cbnz	r3, 23fcf8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fcf80:	6823      	ldr	r3, [r4, #0]
 23fcf82:	4620      	mov	r0, r4
        }
    }
 23fcf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fcf88:	68db      	ldr	r3, [r3, #12]
 23fcf8a:	4718      	bx	r3
    }
 23fcf8c:	bd10      	pop	{r4, pc}

023fcf8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcf8e:	b570      	push	{r4, r5, r6, lr}
 23fcf90:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcf92:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcf96:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcf9a:	42ae      	cmp	r6, r5
 23fcf9c:	d004      	beq.n	23fcfa8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fcf9e:	4628      	mov	r0, r5
 23fcfa0:	f001 fcad 	bl	23fe8fe <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcfa4:	3510      	adds	r5, #16
 23fcfa6:	e7f8      	b.n	23fcf9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcfa8:	6820      	ldr	r0, [r4, #0]
 23fcfaa:	f7ff ff85 	bl	23fceb8 <free>
    AllocatorT::free(data_);
}
 23fcfae:	4620      	mov	r0, r4
 23fcfb0:	bd70      	pop	{r4, r5, r6, pc}

023fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fcfb2:	b510      	push	{r4, lr}
 23fcfb4:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 23fcfb6:	6800      	ldr	r0, [r0, #0]
 23fcfb8:	b108      	cbz	r0, 23fcfbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fcfba:	f7ff ffd4 	bl	23fcf66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fcfbe:	4620      	mov	r0, r4
 23fcfc0:	bd10      	pop	{r4, pc}
	...

023fcfc4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcfc4:	2300      	movs	r3, #0
 23fcfc6:	4802      	ldr	r0, [pc, #8]	; (23fcfd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcfc8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcfca:	f7ff bb85 	b.w	23fc6d8 <os_mutex_recursive_create>
 23fcfce:	bf00      	nop
 23fcfd0:	1007ae58 	.word	0x1007ae58

023fcfd4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcfd4:	2200      	movs	r2, #0
 23fcfd6:	6840      	ldr	r0, [r0, #4]
 23fcfd8:	4611      	mov	r1, r2
 23fcfda:	f7ff bf19 	b.w	23fce10 <network_listening>

023fcfde <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcfde:	2200      	movs	r2, #0
 23fcfe0:	6840      	ldr	r0, [r0, #4]
 23fcfe2:	4611      	mov	r1, r2
 23fcfe4:	f7ff bf30 	b.w	23fce48 <network_get_listen_timeout>

023fcfe8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcfe8:	2200      	movs	r2, #0
 23fcfea:	6840      	ldr	r0, [r0, #4]
 23fcfec:	f7ff bf1e 	b.w	23fce2c <network_set_listen_timeout>

023fcff0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcff0:	2200      	movs	r2, #0
 23fcff2:	6840      	ldr	r0, [r0, #4]
 23fcff4:	f081 0101 	eor.w	r1, r1, #1
 23fcff8:	f7ff befc 	b.w	23fcdf4 <network_listen>

023fcffc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcffc:	2300      	movs	r3, #0
 23fcffe:	6840      	ldr	r0, [r0, #4]
 23fd000:	461a      	mov	r2, r3
 23fd002:	4619      	mov	r1, r3
 23fd004:	f7ff bee8 	b.w	23fcdd8 <network_off>

023fd008 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd008:	2300      	movs	r3, #0
 23fd00a:	6840      	ldr	r0, [r0, #4]
 23fd00c:	461a      	mov	r2, r3
 23fd00e:	4619      	mov	r1, r3
 23fd010:	f7ff bed4 	b.w	23fcdbc <network_on>

023fd014 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd014:	2200      	movs	r2, #0
 23fd016:	6840      	ldr	r0, [r0, #4]
 23fd018:	4611      	mov	r1, r2
 23fd01a:	f7ff bec1 	b.w	23fcda0 <network_ready>

023fd01e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd01e:	2200      	movs	r2, #0
 23fd020:	6840      	ldr	r0, [r0, #4]
 23fd022:	4611      	mov	r1, r2
 23fd024:	f7ff bea0 	b.w	23fcd68 <network_connecting>

023fd028 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd028:	2200      	movs	r2, #0
 23fd02a:	2102      	movs	r1, #2
 23fd02c:	6840      	ldr	r0, [r0, #4]
 23fd02e:	f7ff bea9 	b.w	23fcd84 <network_disconnect>

023fd032 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd032:	2300      	movs	r3, #0
 23fd034:	6840      	ldr	r0, [r0, #4]
 23fd036:	461a      	mov	r2, r3
 23fd038:	f7ff be88 	b.w	23fcd4c <network_connect>

023fd03c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd03c:	2203      	movs	r2, #3
 23fd03e:	4b02      	ldr	r3, [pc, #8]	; (23fd048 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd040:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd042:	4a02      	ldr	r2, [pc, #8]	; (23fd04c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd044:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd046:	4770      	bx	lr
 23fd048:	1007ae5c 	.word	0x1007ae5c
 23fd04c:	023ffb9c 	.word	0x023ffb9c

023fd050 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd050:	4770      	bx	lr

023fd052 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd054:	4606      	mov	r6, r0
 23fd056:	4615      	mov	r5, r2
 23fd058:	460c      	mov	r4, r1
 23fd05a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd05c:	42bc      	cmp	r4, r7
 23fd05e:	d006      	beq.n	23fd06e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd060:	6833      	ldr	r3, [r6, #0]
 23fd062:	4630      	mov	r0, r6
 23fd064:	689b      	ldr	r3, [r3, #8]
 23fd066:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd06a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd06c:	e7f6      	b.n	23fd05c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd06e:	4628      	mov	r0, r5
 23fd070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd072 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd072:	2200      	movs	r2, #0
 23fd074:	7c00      	ldrb	r0, [r0, #16]
 23fd076:	f7ff bbbb 	b.w	23fc7f0 <hal_i2c_write>

023fd07a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd07a:	2100      	movs	r1, #0
 23fd07c:	7c00      	ldrb	r0, [r0, #16]
 23fd07e:	f7ff bbc5 	b.w	23fc80c <hal_i2c_available>

023fd082 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd082:	2100      	movs	r1, #0
 23fd084:	7c00      	ldrb	r0, [r0, #16]
 23fd086:	f7ff bbcf 	b.w	23fc828 <hal_i2c_read>

023fd08a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd08a:	2100      	movs	r1, #0
 23fd08c:	7c00      	ldrb	r0, [r0, #16]
 23fd08e:	f7ff bbd9 	b.w	23fc844 <hal_i2c_peek>

023fd092 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd092:	2100      	movs	r1, #0
 23fd094:	7c00      	ldrb	r0, [r0, #16]
 23fd096:	f7ff bbe3 	b.w	23fc860 <hal_i2c_flush>

023fd09a <_ZN7TwoWireD0Ev>:
 23fd09a:	b510      	push	{r4, lr}
 23fd09c:	4604      	mov	r4, r0
 23fd09e:	2114      	movs	r1, #20
 23fd0a0:	f7ff f831 	bl	23fc106 <_ZdlPvj>
 23fd0a4:	4620      	mov	r0, r4
 23fd0a6:	bd10      	pop	{r4, pc}

023fd0a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd0a8:	b538      	push	{r3, r4, r5, lr}
 23fd0aa:	4604      	mov	r4, r0
 23fd0ac:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd0ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd0b2:	2200      	movs	r2, #0
 23fd0b4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd0b8:	4b09      	ldr	r3, [pc, #36]	; (23fd0e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd0ba:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd0bc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd0be:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd0c0:	4629      	mov	r1, r5
 23fd0c2:	f7ff fbe9 	bl	23fc898 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd0c6:	30bf      	adds	r0, #191	; 0xbf
 23fd0c8:	d108      	bne.n	23fd0dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd0ca:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd0cc:	07db      	lsls	r3, r3, #31
 23fd0ce:	d505      	bpl.n	23fd0dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd0d0:	6868      	ldr	r0, [r5, #4]
 23fd0d2:	f7ff fef1 	bl	23fceb8 <free>
    free(conf.tx_buffer);
 23fd0d6:	68e8      	ldr	r0, [r5, #12]
 23fd0d8:	f7ff feee 	bl	23fceb8 <free>
}
 23fd0dc:	4620      	mov	r0, r4
 23fd0de:	bd38      	pop	{r3, r4, r5, pc}
 23fd0e0:	023ffbd8 	.word	0x023ffbd8

023fd0e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd0e4:	4770      	bx	lr

023fd0e6 <_ZN9IPAddressD0Ev>:
 23fd0e6:	b510      	push	{r4, lr}
 23fd0e8:	4604      	mov	r4, r0
 23fd0ea:	2118      	movs	r1, #24
 23fd0ec:	f7ff f80b 	bl	23fc106 <_ZdlPvj>
 23fd0f0:	4620      	mov	r0, r4
 23fd0f2:	bd10      	pop	{r4, pc}

023fd0f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd0f6:	7d03      	ldrb	r3, [r0, #20]
{
 23fd0f8:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd0fa:	2b06      	cmp	r3, #6
 23fd0fc:	f04f 0400 	mov.w	r4, #0
{
 23fd100:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd102:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd106:	d012      	beq.n	23fd12e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd108:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd10c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd110:	220a      	movs	r2, #10
 23fd112:	4630      	mov	r0, r6
 23fd114:	f001 fadf 	bl	23fe6d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd118:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd11a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd11c:	d019      	beq.n	23fd152 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd11e:	2c00      	cmp	r4, #0
 23fd120:	d0f4      	beq.n	23fd10c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd122:	212e      	movs	r1, #46	; 0x2e
 23fd124:	4630      	mov	r0, r6
 23fd126:	f001 fac7 	bl	23fe6b8 <_ZN5Print5printEc>
 23fd12a:	4404      	add	r4, r0
 23fd12c:	e7ee      	b.n	23fd10c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd12e:	232f      	movs	r3, #47	; 0x2f
 23fd130:	466a      	mov	r2, sp
 23fd132:	4639      	mov	r1, r7
 23fd134:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd136:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd13a:	f7ff fbbb 	bl	23fc8b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd13e:	4668      	mov	r0, sp
 23fd140:	f7fe ffb8 	bl	23fc0b4 <strlen>
 23fd144:	6833      	ldr	r3, [r6, #0]
 23fd146:	4602      	mov	r2, r0
 23fd148:	4669      	mov	r1, sp
 23fd14a:	4630      	mov	r0, r6
 23fd14c:	68db      	ldr	r3, [r3, #12]
 23fd14e:	4798      	blx	r3
 23fd150:	4604      	mov	r4, r0
    }
    return n;
}
 23fd152:	4620      	mov	r0, r4
 23fd154:	b00d      	add	sp, #52	; 0x34
 23fd156:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd158 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd158:	b510      	push	{r4, lr}
 23fd15a:	4604      	mov	r4, r0
 23fd15c:	4b04      	ldr	r3, [pc, #16]	; (23fd170 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd15e:	2211      	movs	r2, #17
 23fd160:	2100      	movs	r1, #0
 23fd162:	f840 3b04 	str.w	r3, [r0], #4
 23fd166:	f001 ffd5 	bl	23ff114 <memset>
}
 23fd16a:	4620      	mov	r0, r4
 23fd16c:	bd10      	pop	{r4, pc}
 23fd16e:	bf00      	nop
 23fd170:	023ffc00 	.word	0x023ffc00

023fd174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd174:	4603      	mov	r3, r0
 23fd176:	4a07      	ldr	r2, [pc, #28]	; (23fd194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd178:	b510      	push	{r4, lr}
 23fd17a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd17e:	f101 0210 	add.w	r2, r1, #16
 23fd182:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd186:	4291      	cmp	r1, r2
 23fd188:	f843 4b04 	str.w	r4, [r3], #4
 23fd18c:	d1f9      	bne.n	23fd182 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd18e:	780a      	ldrb	r2, [r1, #0]
 23fd190:	701a      	strb	r2, [r3, #0]
}
 23fd192:	bd10      	pop	{r4, pc}
 23fd194:	023ffc00 	.word	0x023ffc00

023fd198 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd198:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd19a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd19e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd1a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd1a6:	2304      	movs	r3, #4
 23fd1a8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd1ac:	6041      	str	r1, [r0, #4]
 23fd1ae:	7503      	strb	r3, [r0, #20]
}
 23fd1b0:	bd10      	pop	{r4, pc}
	...

023fd1b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd1b4:	b507      	push	{r0, r1, r2, lr}
 23fd1b6:	4b06      	ldr	r3, [pc, #24]	; (23fd1d0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd1b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd1ba:	78cb      	ldrb	r3, [r1, #3]
 23fd1bc:	9300      	str	r3, [sp, #0]
 23fd1be:	788b      	ldrb	r3, [r1, #2]
 23fd1c0:	784a      	ldrb	r2, [r1, #1]
 23fd1c2:	7809      	ldrb	r1, [r1, #0]
 23fd1c4:	f7ff ffe8 	bl	23fd198 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd1c8:	b003      	add	sp, #12
 23fd1ca:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd1ce:	bf00      	nop
 23fd1d0:	023ffc00 	.word	0x023ffc00

023fd1d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd1d4:	2201      	movs	r2, #1
 23fd1d6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd1da:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd1de:	4618      	mov	r0, r3
 23fd1e0:	2901      	cmp	r1, #1
 23fd1e2:	d108      	bne.n	23fd1f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd1e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd1e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd1ec:	3a01      	subs	r2, #1
 23fd1ee:	f103 0310 	add.w	r3, r3, #16
 23fd1f2:	d1f2      	bne.n	23fd1da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd1f4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd1f6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd1f8:	bf04      	itt	eq
 23fd1fa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd1fe:	1852      	addeq	r2, r2, r1
 23fd200:	e7f4      	b.n	23fd1ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd202 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd202:	b40e      	push	{r1, r2, r3}
 23fd204:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd206:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd208:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd20a:	af00      	add	r7, sp, #0
 23fd20c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd210:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd214:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd216:	462b      	mov	r3, r5
 23fd218:	1878      	adds	r0, r7, r1
 23fd21a:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd21c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd21e:	f7ff fe67 	bl	23fcef0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fd222:	280f      	cmp	r0, #15
 23fd224:	687a      	ldr	r2, [r7, #4]
 23fd226:	d91a      	bls.n	23fd25e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fd228:	f100 0308 	add.w	r3, r0, #8
 23fd22c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fd230:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fd232:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd236:	1c41      	adds	r1, r0, #1
 23fd238:	462b      	mov	r3, r5
 23fd23a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd23c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd23e:	f7ff fe57 	bl	23fcef0 <vsnprintf>
        if (n > 0) {
 23fd242:	1e02      	subs	r2, r0, #0
 23fd244:	dd04      	ble.n	23fd250 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fd246:	6823      	ldr	r3, [r4, #0]
 23fd248:	4669      	mov	r1, sp
 23fd24a:	4620      	mov	r0, r4
 23fd24c:	689b      	ldr	r3, [r3, #8]
 23fd24e:	4798      	blx	r3
 23fd250:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fd252:	3720      	adds	r7, #32
 23fd254:	46bd      	mov	sp, r7
 23fd256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd25a:	b003      	add	sp, #12
 23fd25c:	4770      	bx	lr
    } else if (n > 0) {
 23fd25e:	2800      	cmp	r0, #0
 23fd260:	d0f7      	beq.n	23fd252 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fd262:	6823      	ldr	r3, [r4, #0]
 23fd264:	4602      	mov	r2, r0
 23fd266:	689b      	ldr	r3, [r3, #8]
 23fd268:	4620      	mov	r0, r4
 23fd26a:	f107 0110 	add.w	r1, r7, #16
 23fd26e:	4798      	blx	r3
}
 23fd270:	e7ef      	b.n	23fd252 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fd272 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd272:	b538      	push	{r3, r4, r5, lr}
 23fd274:	680b      	ldr	r3, [r1, #0]
 23fd276:	4604      	mov	r4, r0
 23fd278:	6003      	str	r3, [r0, #0]
 23fd27a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fd27c:	6843      	ldr	r3, [r0, #4]
 23fd27e:	429d      	cmp	r5, r3
 23fd280:	d008      	beq.n	23fd294 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fd282:	b115      	cbz	r5, 23fd28a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fd284:	686b      	ldr	r3, [r5, #4]
 23fd286:	3301      	adds	r3, #1
 23fd288:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fd28a:	6860      	ldr	r0, [r4, #4]
 23fd28c:	b108      	cbz	r0, 23fd292 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fd28e:	f7ff fe6a 	bl	23fcf66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd292:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd294:	bd38      	pop	{r3, r4, r5, pc}

023fd296 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fd296:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd298:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fd29a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd29e:	2201      	movs	r2, #1
 23fd2a0:	689b      	ldr	r3, [r3, #8]
 23fd2a2:	f10d 0107 	add.w	r1, sp, #7
 23fd2a6:	4798      	blx	r3
}
 23fd2a8:	b003      	add	sp, #12
 23fd2aa:	f85d fb04 	ldr.w	pc, [sp], #4

023fd2ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd2ae:	460b      	mov	r3, r1
 23fd2b0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fd2b2:	2200      	movs	r2, #0
 23fd2b4:	b510      	push	{r4, lr}
 23fd2b6:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd2b8:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fd2bc:	6083      	str	r3, [r0, #8]
    if (t) {
 23fd2be:	b90b      	cbnz	r3, 23fd2c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fd2c0:	4620      	mov	r0, r4
 23fd2c2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fd2c4:	f7ff ffd5 	bl	23fd272 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fd2c8:	e7fa      	b.n	23fd2c0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fd2ca <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fd2ca:	6883      	ldr	r3, [r0, #8]
 23fd2cc:	b1eb      	cbz	r3, 23fd30a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fd2ce:	781a      	ldrb	r2, [r3, #0]
 23fd2d0:	2a03      	cmp	r2, #3
 23fd2d2:	d81a      	bhi.n	23fd30a <_ZNK5spark9JSONValue4typeEv+0x40>
 23fd2d4:	e8df f002 	tbb	[pc, r2]
 23fd2d8:	1b021704 	.word	0x1b021704
 23fd2dc:	2005      	movs	r0, #5
 23fd2de:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fd2e0:	6802      	ldr	r2, [r0, #0]
 23fd2e2:	685b      	ldr	r3, [r3, #4]
 23fd2e4:	6852      	ldr	r2, [r2, #4]
 23fd2e6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fd2e8:	282d      	cmp	r0, #45	; 0x2d
 23fd2ea:	d012      	beq.n	23fd312 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fd2ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fd2f0:	2b09      	cmp	r3, #9
 23fd2f2:	d90e      	bls.n	23fd312 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fd2f4:	2874      	cmp	r0, #116	; 0x74
 23fd2f6:	d00e      	beq.n	23fd316 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fd2f8:	2866      	cmp	r0, #102	; 0x66
 23fd2fa:	d00c      	beq.n	23fd316 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fd2fc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fd300:	4258      	negs	r0, r3
 23fd302:	4158      	adcs	r0, r3
 23fd304:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fd306:	2006      	movs	r0, #6
 23fd308:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fd30a:	2000      	movs	r0, #0
 23fd30c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fd30e:	2004      	movs	r0, #4
 23fd310:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fd312:	2003      	movs	r0, #3
 23fd314:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fd316:	2002      	movs	r0, #2
}
 23fd318:	4770      	bx	lr

023fd31a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fd31a:	b510      	push	{r4, lr}
 23fd31c:	4604      	mov	r4, r0
    switch (type()) {
 23fd31e:	f7ff ffd4 	bl	23fd2ca <_ZNK5spark9JSONValue4typeEv>
 23fd322:	2802      	cmp	r0, #2
 23fd324:	d00e      	beq.n	23fd344 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fd326:	1ec3      	subs	r3, r0, #3
 23fd328:	b2db      	uxtb	r3, r3
 23fd32a:	2b01      	cmp	r3, #1
 23fd32c:	d814      	bhi.n	23fd358 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fd32e:	6822      	ldr	r2, [r4, #0]
 23fd330:	68a3      	ldr	r3, [r4, #8]
 23fd332:	6850      	ldr	r0, [r2, #4]
 23fd334:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fd336:	220a      	movs	r2, #10
}
 23fd338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fd33c:	2100      	movs	r1, #0
 23fd33e:	4418      	add	r0, r3
 23fd340:	f001 bfe8 	b.w	23ff314 <strtol>
        const char* const s = d_->json + t_->start;
 23fd344:	6822      	ldr	r2, [r4, #0]
 23fd346:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fd348:	6852      	ldr	r2, [r2, #4]
 23fd34a:	685b      	ldr	r3, [r3, #4]
 23fd34c:	5cd0      	ldrb	r0, [r2, r3]
 23fd34e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fd352:	4258      	negs	r0, r3
 23fd354:	4158      	adcs	r0, r3
}
 23fd356:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fd358:	2000      	movs	r0, #0
 23fd35a:	e7fc      	b.n	23fd356 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fd35c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd35c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd35e:	2300      	movs	r3, #0
 23fd360:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd362:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fd366:	480e      	ldr	r0, [pc, #56]	; (23fd3a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fd368:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fd36c:	b1a9      	cbz	r1, 23fd39a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fd36e:	780b      	ldrb	r3, [r1, #0]
 23fd370:	2b03      	cmp	r3, #3
 23fd372:	d006      	beq.n	23fd382 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fd374:	b98b      	cbnz	r3, 23fd39a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fd376:	6813      	ldr	r3, [r2, #0]
 23fd378:	6858      	ldr	r0, [r3, #4]
 23fd37a:	684b      	ldr	r3, [r1, #4]
 23fd37c:	5cc3      	ldrb	r3, [r0, r3]
 23fd37e:	2b6e      	cmp	r3, #110	; 0x6e
 23fd380:	d007      	beq.n	23fd392 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fd382:	6813      	ldr	r3, [r2, #0]
 23fd384:	684d      	ldr	r5, [r1, #4]
 23fd386:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fd388:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fd38a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fd38c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fd38e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fd390:	60e3      	str	r3, [r4, #12]
 23fd392:	4611      	mov	r1, r2
 23fd394:	4620      	mov	r0, r4
 23fd396:	f7ff ff6c 	bl	23fd272 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd39a:	4620      	mov	r0, r4
 23fd39c:	bd38      	pop	{r3, r4, r5, pc}
 23fd39e:	bf00      	nop
 23fd3a0:	023ff4b8 	.word	0x023ff4b8

023fd3a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd3a4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd3a6:	2500      	movs	r5, #0
 23fd3a8:	460b      	mov	r3, r1
 23fd3aa:	4604      	mov	r4, r0
 23fd3ac:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd3ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fd3b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd3b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fd3ba:	b14b      	cbz	r3, 23fd3d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fd3bc:	781a      	ldrb	r2, [r3, #0]
 23fd3be:	2a01      	cmp	r2, #1
 23fd3c0:	d106      	bne.n	23fd3d0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fd3c2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fd3c6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fd3c8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fd3ca:	6143      	str	r3, [r0, #20]
 23fd3cc:	f7ff ff51 	bl	23fd272 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd3d0:	4620      	mov	r0, r4
 23fd3d2:	bd38      	pop	{r3, r4, r5, pc}

023fd3d4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fd3d4:	b510      	push	{r4, lr}
    if (!n_) {
 23fd3d6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fd3d8:	4604      	mov	r4, r0
    if (!n_) {
 23fd3da:	b163      	cbz	r3, 23fd3f6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fd3dc:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fd3de:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fd3e0:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fd3e2:	3010      	adds	r0, #16
 23fd3e4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fd3e6:	6120      	str	r0, [r4, #16]
    --n_;
 23fd3e8:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fd3ea:	b113      	cbz	r3, 23fd3f2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fd3ec:	f7ff fef2 	bl	23fd1d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fd3f0:	60a0      	str	r0, [r4, #8]
    return true;
 23fd3f2:	2001      	movs	r0, #1
 23fd3f4:	e000      	b.n	23fd3f8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fd3f6:	4618      	mov	r0, r3
}
 23fd3f8:	bd10      	pop	{r4, pc}

023fd3fa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd3fa:	b510      	push	{r4, lr}
    write('}');
 23fd3fc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd3fe:	4604      	mov	r4, r0
    write('}');
 23fd400:	f7ff ff49 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fd404:	2301      	movs	r3, #1
}
 23fd406:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd408:	7123      	strb	r3, [r4, #4]
}
 23fd40a:	bd10      	pop	{r4, pc}

023fd40c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fd40c:	b508      	push	{r3, lr}
    switch (state_) {
 23fd40e:	7903      	ldrb	r3, [r0, #4]
 23fd410:	2b01      	cmp	r3, #1
 23fd412:	d002      	beq.n	23fd41a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fd414:	2b02      	cmp	r3, #2
 23fd416:	d004      	beq.n	23fd422 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fd418:	bd08      	pop	{r3, pc}
        write(',');
 23fd41a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fd41c:	f7ff ff3b 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
}
 23fd420:	e7fa      	b.n	23fd418 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fd422:	213a      	movs	r1, #58	; 0x3a
 23fd424:	e7fa      	b.n	23fd41c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fd426 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fd426:	b510      	push	{r4, lr}
 23fd428:	4604      	mov	r4, r0
    writeSeparator();
 23fd42a:	f7ff ffef 	bl	23fd40c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fd42e:	4620      	mov	r0, r4
 23fd430:	217b      	movs	r1, #123	; 0x7b
 23fd432:	f7ff ff30 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fd436:	2300      	movs	r3, #0
}
 23fd438:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fd43a:	7123      	strb	r3, [r4, #4]
}
 23fd43c:	bd10      	pop	{r4, pc}
	...

023fd440 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fd440:	b513      	push	{r0, r1, r4, lr}
 23fd442:	4604      	mov	r4, r0
 23fd444:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd446:	f7ff ffe1 	bl	23fd40c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fd44a:	6823      	ldr	r3, [r4, #0]
 23fd44c:	4620      	mov	r0, r4
 23fd44e:	68db      	ldr	r3, [r3, #12]
 23fd450:	9a01      	ldr	r2, [sp, #4]
 23fd452:	4903      	ldr	r1, [pc, #12]	; (23fd460 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fd454:	4798      	blx	r3
    state_ = NEXT;
 23fd456:	2301      	movs	r3, #1
}
 23fd458:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd45a:	7123      	strb	r3, [r4, #4]
}
 23fd45c:	b002      	add	sp, #8
 23fd45e:	bd10      	pop	{r4, pc}
 23fd460:	023ffc0c 	.word	0x023ffc0c

023fd464 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fd464:	b513      	push	{r0, r1, r4, lr}
 23fd466:	4604      	mov	r4, r0
 23fd468:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd46a:	f7ff ffcf 	bl	23fd40c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fd46e:	6823      	ldr	r3, [r4, #0]
 23fd470:	4620      	mov	r0, r4
 23fd472:	68db      	ldr	r3, [r3, #12]
 23fd474:	9a01      	ldr	r2, [sp, #4]
 23fd476:	4903      	ldr	r1, [pc, #12]	; (23fd484 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fd478:	4798      	blx	r3
    state_ = NEXT;
 23fd47a:	2301      	movs	r3, #1
}
 23fd47c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd47e:	7123      	strb	r3, [r4, #4]
}
 23fd480:	b002      	add	sp, #8
 23fd482:	bd10      	pop	{r4, pc}
 23fd484:	023ffc0f 	.word	0x023ffc0f

023fd488 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd48c:	460d      	mov	r5, r1
 23fd48e:	4690      	mov	r8, r2
    write('"');
 23fd490:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd492:	4604      	mov	r4, r0
 23fd494:	462f      	mov	r7, r5
    write('"');
 23fd496:	f7ff fefe 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fd49a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fd540 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fd49e:	44a8      	add	r8, r5
    while (s != end) {
 23fd4a0:	4547      	cmp	r7, r8
 23fd4a2:	46ba      	mov	sl, r7
 23fd4a4:	d03d      	beq.n	23fd522 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fd4a6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fd4aa:	2e22      	cmp	r6, #34	; 0x22
 23fd4ac:	d006      	beq.n	23fd4bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd4ae:	2e5c      	cmp	r6, #92	; 0x5c
 23fd4b0:	d004      	beq.n	23fd4bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd4b2:	4630      	mov	r0, r6
 23fd4b4:	f001 fdfc 	bl	23ff0b0 <isprint>
 23fd4b8:	2800      	cmp	r0, #0
 23fd4ba:	d1f1      	bne.n	23fd4a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fd4bc:	6823      	ldr	r3, [r4, #0]
 23fd4be:	4629      	mov	r1, r5
 23fd4c0:	4620      	mov	r0, r4
 23fd4c2:	689b      	ldr	r3, [r3, #8]
 23fd4c4:	ebaa 0205 	sub.w	r2, sl, r5
 23fd4c8:	4798      	blx	r3
            write('\\');
 23fd4ca:	215c      	movs	r1, #92	; 0x5c
 23fd4cc:	4620      	mov	r0, r4
 23fd4ce:	f7ff fee2 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fd4d2:	2e0d      	cmp	r6, #13
 23fd4d4:	d80a      	bhi.n	23fd4ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fd4d6:	2e07      	cmp	r6, #7
 23fd4d8:	d91c      	bls.n	23fd514 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd4da:	f1a6 0308 	sub.w	r3, r6, #8
 23fd4de:	2b05      	cmp	r3, #5
 23fd4e0:	d818      	bhi.n	23fd514 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd4e2:	e8df f003 	tbb	[pc, r3]
 23fd4e6:	0f0d      	.short	0x0f0d
 23fd4e8:	15131711 	.word	0x15131711
 23fd4ec:	2e22      	cmp	r6, #34	; 0x22
 23fd4ee:	d001      	beq.n	23fd4f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fd4f0:	2e5c      	cmp	r6, #92	; 0x5c
 23fd4f2:	d10f      	bne.n	23fd514 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fd4f4:	4631      	mov	r1, r6
                write('b');
 23fd4f6:	4620      	mov	r0, r4
 23fd4f8:	f7ff fecd 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fd4fc:	463d      	mov	r5, r7
    while (s != end) {
 23fd4fe:	e7cf      	b.n	23fd4a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fd500:	2162      	movs	r1, #98	; 0x62
 23fd502:	e7f8      	b.n	23fd4f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fd504:	2174      	movs	r1, #116	; 0x74
 23fd506:	e7f6      	b.n	23fd4f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fd508:	216e      	movs	r1, #110	; 0x6e
 23fd50a:	e7f4      	b.n	23fd4f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fd50c:	2166      	movs	r1, #102	; 0x66
 23fd50e:	e7f2      	b.n	23fd4f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fd510:	2172      	movs	r1, #114	; 0x72
 23fd512:	e7f0      	b.n	23fd4f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fd514:	6823      	ldr	r3, [r4, #0]
 23fd516:	4632      	mov	r2, r6
 23fd518:	4649      	mov	r1, r9
 23fd51a:	4620      	mov	r0, r4
 23fd51c:	68db      	ldr	r3, [r3, #12]
 23fd51e:	4798      	blx	r3
                break;
 23fd520:	e7ec      	b.n	23fd4fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fd522:	42bd      	cmp	r5, r7
 23fd524:	d005      	beq.n	23fd532 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fd526:	6823      	ldr	r3, [r4, #0]
 23fd528:	4629      	mov	r1, r5
 23fd52a:	4620      	mov	r0, r4
 23fd52c:	689b      	ldr	r3, [r3, #8]
 23fd52e:	1b7a      	subs	r2, r7, r5
 23fd530:	4798      	blx	r3
    }
    write('"');
 23fd532:	2122      	movs	r1, #34	; 0x22
 23fd534:	4620      	mov	r0, r4
 23fd536:	f7ff feae 	bl	23fd296 <_ZN5spark10JSONWriter5writeEc>
}
 23fd53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd53e:	bf00      	nop
 23fd540:	023ffc12 	.word	0x023ffc12

023fd544 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fd544:	b513      	push	{r0, r1, r4, lr}
 23fd546:	4604      	mov	r4, r0
 23fd548:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd54c:	f7ff ff5e 	bl	23fd40c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fd550:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd554:	4620      	mov	r0, r4
 23fd556:	f7ff ff97 	bl	23fd488 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fd55a:	2302      	movs	r3, #2
}
 23fd55c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fd55e:	7123      	strb	r3, [r4, #4]
}
 23fd560:	b002      	add	sp, #8
 23fd562:	bd10      	pop	{r4, pc}

023fd564 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fd564:	b513      	push	{r0, r1, r4, lr}
 23fd566:	4604      	mov	r4, r0
 23fd568:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd56c:	f7ff ff4e 	bl	23fd40c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fd570:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd574:	4620      	mov	r0, r4
 23fd576:	f7ff ff87 	bl	23fd488 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fd57a:	2301      	movs	r3, #1
}
 23fd57c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd57e:	7123      	strb	r3, [r4, #4]
}
 23fd580:	b002      	add	sp, #8
 23fd582:	bd10      	pop	{r4, pc}

023fd584 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd584:	6880      	ldr	r0, [r0, #8]
 23fd586:	6803      	ldr	r3, [r0, #0]
 23fd588:	68db      	ldr	r3, [r3, #12]
 23fd58a:	4718      	bx	r3

023fd58c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd58c:	4770      	bx	lr

023fd58e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd58e:	4608      	mov	r0, r1
 23fd590:	b111      	cbz	r1, 23fd598 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd592:	680b      	ldr	r3, [r1, #0]
 23fd594:	685b      	ldr	r3, [r3, #4]
 23fd596:	4718      	bx	r3
}
 23fd598:	4770      	bx	lr

023fd59a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd59a:	4770      	bx	lr

023fd59c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd59c:	4770      	bx	lr

023fd59e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd59e:	4770      	bx	lr

023fd5a0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd5a0:	4770      	bx	lr

023fd5a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd5a2:	b538      	push	{r3, r4, r5, lr}
 23fd5a4:	4604      	mov	r4, r0
 23fd5a6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd5a8:	6800      	ldr	r0, [r0, #0]
 23fd5aa:	212e      	movs	r1, #46	; 0x2e
 23fd5ac:	f001 fdf5 	bl	23ff19a <strchrnul>
    size = s - category;
 23fd5b0:	6823      	ldr	r3, [r4, #0]
 23fd5b2:	1ac3      	subs	r3, r0, r3
 23fd5b4:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd5b6:	b123      	cbz	r3, 23fd5c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd5b8:	7803      	ldrb	r3, [r0, #0]
 23fd5ba:	b103      	cbz	r3, 23fd5be <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd5bc:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fd5be:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd5c0:	6020      	str	r0, [r4, #0]
}
 23fd5c2:	4618      	mov	r0, r3
 23fd5c4:	bd38      	pop	{r3, r4, r5, pc}

023fd5c6 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd5c6:	b510      	push	{r4, lr}
 23fd5c8:	4604      	mov	r4, r0
 23fd5ca:	210c      	movs	r1, #12
 23fd5cc:	f7fe fd9b 	bl	23fc106 <_ZdlPvj>
 23fd5d0:	4620      	mov	r0, r4
 23fd5d2:	bd10      	pop	{r4, pc}

023fd5d4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd5d4:	b510      	push	{r4, lr}
 23fd5d6:	4604      	mov	r4, r0
 23fd5d8:	2104      	movs	r1, #4
 23fd5da:	f7fe fd94 	bl	23fc106 <_ZdlPvj>
 23fd5de:	4620      	mov	r0, r4
 23fd5e0:	bd10      	pop	{r4, pc}

023fd5e2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd5e2:	b510      	push	{r4, lr}
 23fd5e4:	4604      	mov	r4, r0
 23fd5e6:	2104      	movs	r1, #4
 23fd5e8:	f7fe fd8d 	bl	23fc106 <_ZdlPvj>
 23fd5ec:	4620      	mov	r0, r4
 23fd5ee:	bd10      	pop	{r4, pc}

023fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd5f0:	f7ff b88e 	b.w	23fc710 <os_mutex_recursive_lock>

023fd5f4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd5f4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd5f6:	f7fe fd53 	bl	23fc0a0 <strcmp>
}
 23fd5fa:	fab0 f080 	clz	r0, r0
 23fd5fe:	0940      	lsrs	r0, r0, #5
 23fd600:	bd08      	pop	{r3, pc}

023fd602 <__tcf_1>:
 23fd602:	4770      	bx	lr

023fd604 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd604:	b510      	push	{r4, lr}
 23fd606:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd608:	f001 fae8 	bl	23febdc <_Z16_fetch_usbserialv>
 23fd60c:	4284      	cmp	r4, r0
 23fd60e:	d105      	bne.n	23fd61c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd610:	f001 fae4 	bl	23febdc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd618:	f001 bad2 	b.w	23febc0 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd61c:	f001 fcae 	bl	23fef7c <_Z22__fetch_global_Serial1v>
 23fd620:	4284      	cmp	r4, r0
 23fd622:	d105      	bne.n	23fd630 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd624:	f001 fcaa 	bl	23fef7c <_Z22__fetch_global_Serial1v>
}
 23fd628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd62c:	f001 ba6b 	b.w	23feb06 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd630:	b12c      	cbz	r4, 23fd63e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd632:	6823      	ldr	r3, [r4, #0]
 23fd634:	4620      	mov	r0, r4
}
 23fd636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd63a:	685b      	ldr	r3, [r3, #4]
 23fd63c:	4718      	bx	r3
 23fd63e:	bd10      	pop	{r4, pc}

023fd640 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd640:	680b      	ldr	r3, [r1, #0]
 23fd642:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd644:	684b      	ldr	r3, [r1, #4]
 23fd646:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd648:	b113      	cbz	r3, 23fd650 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd64a:	685a      	ldr	r2, [r3, #4]
 23fd64c:	3201      	adds	r2, #1
 23fd64e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd650:	4770      	bx	lr

023fd652 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd652:	b513      	push	{r0, r1, r4, lr}
 23fd654:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd656:	4608      	mov	r0, r1
 23fd658:	9101      	str	r1, [sp, #4]
 23fd65a:	f7fe fd2b 	bl	23fc0b4 <strlen>
 23fd65e:	4602      	mov	r2, r0
 23fd660:	4620      	mov	r0, r4
 23fd662:	9901      	ldr	r1, [sp, #4]
}
 23fd664:	b002      	add	sp, #8
 23fd666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd66a:	f7ff bf7b 	b.w	23fd564 <_ZN5spark10JSONWriter5valueEPKcj>

023fd66e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd66e:	b513      	push	{r0, r1, r4, lr}
 23fd670:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd672:	4608      	mov	r0, r1
 23fd674:	9101      	str	r1, [sp, #4]
 23fd676:	f7fe fd1d 	bl	23fc0b4 <strlen>
 23fd67a:	4602      	mov	r2, r0
 23fd67c:	4620      	mov	r0, r4
 23fd67e:	6823      	ldr	r3, [r4, #0]
 23fd680:	9901      	ldr	r1, [sp, #4]
 23fd682:	68db      	ldr	r3, [r3, #12]
}
 23fd684:	b002      	add	sp, #8
 23fd686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd68a:	4718      	bx	r3

023fd68c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd68c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd68e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd690:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd694:	2201      	movs	r2, #1
 23fd696:	68db      	ldr	r3, [r3, #12]
 23fd698:	f10d 0107 	add.w	r1, sp, #7
 23fd69c:	4798      	blx	r3
}
 23fd69e:	b003      	add	sp, #12
 23fd6a0:	f85d fb04 	ldr.w	pc, [sp], #4

023fd6a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd6a4:	680a      	ldr	r2, [r1, #0]
 23fd6a6:	b510      	push	{r4, lr}
 23fd6a8:	6002      	str	r2, [r0, #0]
 23fd6aa:	684a      	ldr	r2, [r1, #4]
 23fd6ac:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd6ae:	2200      	movs	r2, #0
 23fd6b0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd6b4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd6b6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd6b8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd6ba:	6084      	str	r4, [r0, #8]
 23fd6bc:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd6be:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd6c0:	60c4      	str	r4, [r0, #12]
 23fd6c2:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd6c4:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd6c6:	6104      	str	r4, [r0, #16]
 23fd6c8:	bd10      	pop	{r4, pc}
	...

023fd6cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd6d0:	f04f 0a14 	mov.w	sl, #20
 23fd6d4:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd6d8:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd6da:	4645      	mov	r5, r8
 23fd6dc:	fb0a f404 	mul.w	r4, sl, r4
 23fd6e0:	9300      	str	r3, [sp, #0]
 23fd6e2:	4b17      	ldr	r3, [pc, #92]	; (23fd740 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd6e4:	10a4      	asrs	r4, r4, #2
 23fd6e6:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd6e8:	2c00      	cmp	r4, #0
 23fd6ea:	dd21      	ble.n	23fd730 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd6ec:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd6ee:	fb0a f006 	mul.w	r0, sl, r6
 23fd6f2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd6f6:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd6fa:	463a      	mov	r2, r7
 23fd6fc:	455f      	cmp	r7, fp
 23fd6fe:	bf28      	it	cs
 23fd700:	465a      	movcs	r2, fp
 23fd702:	5828      	ldr	r0, [r5, r0]
 23fd704:	9101      	str	r1, [sp, #4]
 23fd706:	f001 fd5a 	bl	23ff1be <strncmp>
                if (cmp == 0) {
 23fd70a:	2800      	cmp	r0, #0
 23fd70c:	f04f 0301 	mov.w	r3, #1
 23fd710:	9901      	ldr	r1, [sp, #4]
 23fd712:	d10b      	bne.n	23fd72c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd714:	455f      	cmp	r7, fp
 23fd716:	d103      	bne.n	23fd720 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd718:	9a00      	ldr	r2, [sp, #0]
 23fd71a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd71c:	4634      	mov	r4, r6
 23fd71e:	e7e3      	b.n	23fd6e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd720:	d9fc      	bls.n	23fd71c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd722:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd724:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd728:	3e01      	subs	r6, #1
 23fd72a:	e7f7      	b.n	23fd71c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd72c:	dbf9      	blt.n	23fd722 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd72e:	e7f5      	b.n	23fd71c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd730:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd734:	4802      	ldr	r0, [pc, #8]	; (23fd740 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd736:	10ad      	asrs	r5, r5, #2
 23fd738:	4368      	muls	r0, r5
 23fd73a:	b003      	add	sp, #12
 23fd73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd740:	cccccccd 	.word	0xcccccccd

023fd744 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd746:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd748:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd74a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd74c:	b303      	cbz	r3, 23fd790 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd74e:	b1f9      	cbz	r1, 23fd790 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd750:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd752:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd756:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd758:	a903      	add	r1, sp, #12
 23fd75a:	a801      	add	r0, sp, #4
 23fd75c:	f7ff ff21 	bl	23fd5a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd760:	4601      	mov	r1, r0
 23fd762:	b1a8      	cbz	r0, 23fd790 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd764:	f10d 030b 	add.w	r3, sp, #11
 23fd768:	4620      	mov	r0, r4
 23fd76a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd76c:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd770:	f7ff ffac 	bl	23fd6cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd774:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd778:	b153      	cbz	r3, 23fd790 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd77a:	6823      	ldr	r3, [r4, #0]
 23fd77c:	2414      	movs	r4, #20
 23fd77e:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd782:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd786:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd788:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd78a:	bfa8      	it	ge
 23fd78c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd78e:	e7e3      	b.n	23fd758 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd790:	4628      	mov	r0, r5
 23fd792:	b004      	add	sp, #16
 23fd794:	bd70      	pop	{r4, r5, r6, pc}

023fd796 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd796:	b40e      	push	{r1, r2, r3}
 23fd798:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd79a:	b08c      	sub	sp, #48	; 0x30
 23fd79c:	af00      	add	r7, sp, #0
 23fd79e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd7a2:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd7a6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd7a8:	462b      	mov	r3, r5
 23fd7aa:	2120      	movs	r1, #32
 23fd7ac:	f107 0010 	add.w	r0, r7, #16
 23fd7b0:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd7b2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd7b4:	f7ff fb9c 	bl	23fcef0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd7b8:	281f      	cmp	r0, #31
 23fd7ba:	687a      	ldr	r2, [r7, #4]
 23fd7bc:	d91a      	bls.n	23fd7f4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd7be:	f100 0308 	add.w	r3, r0, #8
 23fd7c2:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd7c6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd7c8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd7cc:	1c41      	adds	r1, r0, #1
 23fd7ce:	462b      	mov	r3, r5
 23fd7d0:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd7d2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd7d4:	f7ff fb8c 	bl	23fcef0 <vsnprintf>
        if (n > 0) {
 23fd7d8:	1e02      	subs	r2, r0, #0
 23fd7da:	dd04      	ble.n	23fd7e6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd7dc:	6823      	ldr	r3, [r4, #0]
 23fd7de:	4669      	mov	r1, sp
 23fd7e0:	4620      	mov	r0, r4
 23fd7e2:	68db      	ldr	r3, [r3, #12]
 23fd7e4:	4798      	blx	r3
 23fd7e6:	46b5      	mov	sp, r6
}
 23fd7e8:	3730      	adds	r7, #48	; 0x30
 23fd7ea:	46bd      	mov	sp, r7
 23fd7ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd7f0:	b003      	add	sp, #12
 23fd7f2:	4770      	bx	lr
    } else if (n > 0) {
 23fd7f4:	2800      	cmp	r0, #0
 23fd7f6:	d0f7      	beq.n	23fd7e8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd7f8:	6823      	ldr	r3, [r4, #0]
 23fd7fa:	4602      	mov	r2, r0
 23fd7fc:	68db      	ldr	r3, [r3, #12]
 23fd7fe:	4620      	mov	r0, r4
 23fd800:	f107 0110 	add.w	r1, r7, #16
 23fd804:	4798      	blx	r3
}
 23fd806:	e7ef      	b.n	23fd7e8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd808 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd808:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd80a:	4c08      	ldr	r4, [pc, #32]	; (23fd82c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd80c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd810:	07db      	lsls	r3, r3, #31
 23fd812:	d409      	bmi.n	23fd828 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd814:	4620      	mov	r0, r4
 23fd816:	f7fe fc85 	bl	23fc124 <__cxa_guard_acquire>
 23fd81a:	b128      	cbz	r0, 23fd828 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd81c:	4620      	mov	r0, r4
 23fd81e:	f7fe fc86 	bl	23fc12e <__cxa_guard_release>
 23fd822:	4803      	ldr	r0, [pc, #12]	; (23fd830 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd824:	f001 fc3e 	bl	23ff0a4 <atexit>
}
 23fd828:	4802      	ldr	r0, [pc, #8]	; (23fd834 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd82a:	bd10      	pop	{r4, pc}
 23fd82c:	1007ae68 	.word	0x1007ae68
 23fd830:	023fd59b 	.word	0x023fd59b
 23fd834:	1007a9a8 	.word	0x1007a9a8

023fd838 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd838:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd83a:	4c08      	ldr	r4, [pc, #32]	; (23fd85c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd83c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd840:	07db      	lsls	r3, r3, #31
 23fd842:	d409      	bmi.n	23fd858 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd844:	4620      	mov	r0, r4
 23fd846:	f7fe fc6d 	bl	23fc124 <__cxa_guard_acquire>
 23fd84a:	b128      	cbz	r0, 23fd858 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd84c:	4620      	mov	r0, r4
 23fd84e:	f7fe fc6e 	bl	23fc12e <__cxa_guard_release>
 23fd852:	4803      	ldr	r0, [pc, #12]	; (23fd860 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd854:	f001 fc26 	bl	23ff0a4 <atexit>
    return &factory;
}
 23fd858:	4802      	ldr	r0, [pc, #8]	; (23fd864 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd85a:	bd10      	pop	{r4, pc}
 23fd85c:	1007ae6c 	.word	0x1007ae6c
 23fd860:	023fd603 	.word	0x023fd603
 23fd864:	1007a9ac 	.word	0x1007a9ac

023fd868 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd868:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd86a:	2500      	movs	r5, #0
 23fd86c:	4604      	mov	r4, r0
 23fd86e:	e9c0 5500 	strd	r5, r5, [r0]
 23fd872:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd876:	6085      	str	r5, [r0, #8]
 23fd878:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd87a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd87e:	f7fe ff2b 	bl	23fc6d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd882:	f7ff ffc1 	bl	23fd808 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd886:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd888:	f7ff ffd6 	bl	23fd838 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd88c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd88e:	6220      	str	r0, [r4, #32]
}
 23fd890:	4620      	mov	r0, r4
 23fd892:	bd38      	pop	{r3, r4, r5, pc}

023fd894 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd894:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd896:	4c0a      	ldr	r4, [pc, #40]	; (23fd8c0 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd898:	e8d4 3f8f 	ldab	r3, [r4]
 23fd89c:	07db      	lsls	r3, r3, #31
 23fd89e:	d40c      	bmi.n	23fd8ba <_ZN5spark10LogManager8instanceEv+0x26>
 23fd8a0:	4620      	mov	r0, r4
 23fd8a2:	f7fe fc3f 	bl	23fc124 <__cxa_guard_acquire>
 23fd8a6:	b140      	cbz	r0, 23fd8ba <_ZN5spark10LogManager8instanceEv+0x26>
 23fd8a8:	4806      	ldr	r0, [pc, #24]	; (23fd8c4 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd8aa:	f7ff ffdd 	bl	23fd868 <_ZN5spark10LogManagerC1Ev>
 23fd8ae:	4620      	mov	r0, r4
 23fd8b0:	f7fe fc3d 	bl	23fc12e <__cxa_guard_release>
 23fd8b4:	4804      	ldr	r0, [pc, #16]	; (23fd8c8 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd8b6:	f001 fbf5 	bl	23ff0a4 <atexit>
    return &mgr;
}
 23fd8ba:	4802      	ldr	r0, [pc, #8]	; (23fd8c4 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd8bc:	bd10      	pop	{r4, pc}
 23fd8be:	bf00      	nop
 23fd8c0:	1007ae64 	.word	0x1007ae64
 23fd8c4:	1007ae74 	.word	0x1007ae74
 23fd8c8:	023fdde5 	.word	0x023fdde5

023fd8cc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd8cc:	2300      	movs	r3, #0
 23fd8ce:	4a02      	ldr	r2, [pc, #8]	; (23fd8d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd8d0:	4902      	ldr	r1, [pc, #8]	; (23fd8dc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd8d2:	4803      	ldr	r0, [pc, #12]	; (23fd8e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd8d4:	f7ff b9ca 	b.w	23fcc6c <log_set_callbacks>
 23fd8d8:	023fdbcd 	.word	0x023fdbcd
 23fd8dc:	023fdb59 	.word	0x023fdb59
 23fd8e0:	023fdad9 	.word	0x023fdad9

023fd8e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd8e4:	2300      	movs	r3, #0
 23fd8e6:	461a      	mov	r2, r3
 23fd8e8:	4619      	mov	r1, r3
 23fd8ea:	4618      	mov	r0, r3
 23fd8ec:	f7ff b9be 	b.w	23fcc6c <log_set_callbacks>

023fd8f0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd8f2:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd8f4:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd8f6:	4668      	mov	r0, sp
 23fd8f8:	f7ff fea2 	bl	23fd640 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd8fc:	466a      	mov	r2, sp
 23fd8fe:	4629      	mov	r1, r5
 23fd900:	4620      	mov	r0, r4
 23fd902:	f7ff fd4f 	bl	23fd3a4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd906:	a801      	add	r0, sp, #4
 23fd908:	f7ff fb53 	bl	23fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd90c:	4620      	mov	r0, r4
 23fd90e:	b003      	add	sp, #12
 23fd910:	bd30      	pop	{r4, r5, pc}

023fd912 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd912:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd914:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd916:	68cd      	ldr	r5, [r1, #12]
 23fd918:	4668      	mov	r0, sp
 23fd91a:	f7ff fe91 	bl	23fd640 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd91e:	466a      	mov	r2, sp
 23fd920:	4629      	mov	r1, r5
 23fd922:	4620      	mov	r0, r4
 23fd924:	f7ff fd1a 	bl	23fd35c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd928:	a801      	add	r0, sp, #4
 23fd92a:	f7ff fb42 	bl	23fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd92e:	4620      	mov	r0, r4
 23fd930:	b003      	add	sp, #12
 23fd932:	bd30      	pop	{r4, r5, pc}

023fd934 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd936:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd938:	690d      	ldr	r5, [r1, #16]
 23fd93a:	4668      	mov	r0, sp
 23fd93c:	f7ff fe80 	bl	23fd640 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd940:	466a      	mov	r2, sp
 23fd942:	4629      	mov	r1, r5
 23fd944:	4620      	mov	r0, r4
 23fd946:	f7ff fcb2 	bl	23fd2ae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd94a:	a801      	add	r0, sp, #4
 23fd94c:	f7ff fb31 	bl	23fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd950:	4620      	mov	r0, r4
 23fd952:	b003      	add	sp, #12
 23fd954:	bd30      	pop	{r4, r5, pc}
	...

023fd958 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd958:	b570      	push	{r4, r5, r6, lr}
 23fd95a:	b08a      	sub	sp, #40	; 0x28
 23fd95c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd95e:	4601      	mov	r1, r0
 23fd960:	a804      	add	r0, sp, #16
 23fd962:	f7ff ffc5 	bl	23fd8f0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd966:	4e14      	ldr	r6, [pc, #80]	; (23fd9b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd968:	a804      	add	r0, sp, #16
 23fd96a:	f7ff fd33 	bl	23fd3d4 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd96e:	b1e8      	cbz	r0, 23fd9ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd970:	4668      	mov	r0, sp
 23fd972:	a904      	add	r1, sp, #16
 23fd974:	f7ff ffcd 	bl	23fd912 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd978:	4631      	mov	r1, r6
 23fd97a:	9802      	ldr	r0, [sp, #8]
 23fd97c:	f7ff fe3a 	bl	23fd5f4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd980:	4604      	mov	r4, r0
 23fd982:	b110      	cbz	r0, 23fd98a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd984:	1e2c      	subs	r4, r5, #0
 23fd986:	bf18      	it	ne
 23fd988:	2401      	movne	r4, #1
 23fd98a:	a801      	add	r0, sp, #4
 23fd98c:	f7ff fb11 	bl	23fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd990:	2c00      	cmp	r4, #0
 23fd992:	d0e9      	beq.n	23fd968 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd994:	4668      	mov	r0, sp
 23fd996:	a904      	add	r1, sp, #16
 23fd998:	f7ff ffcc 	bl	23fd934 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd99c:	4668      	mov	r0, sp
 23fd99e:	f7ff fcbc 	bl	23fd31a <_ZNK5spark9JSONValue5toIntEv>
 23fd9a2:	6028      	str	r0, [r5, #0]
 23fd9a4:	a801      	add	r0, sp, #4
 23fd9a6:	f7ff fb04 	bl	23fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd9aa:	e7dd      	b.n	23fd968 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd9ac:	a805      	add	r0, sp, #20
 23fd9ae:	f7ff fb00 	bl	23fcfb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd9b2:	b00a      	add	sp, #40	; 0x28
 23fd9b4:	bd70      	pop	{r4, r5, r6, pc}
 23fd9b6:	bf00      	nop
 23fd9b8:	023ffc18 	.word	0x023ffc18

023fd9bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd9be:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd9c0:	4913      	ldr	r1, [pc, #76]	; (23fda10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd9c2:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd9c4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd9c6:	f7fe fb6b 	bl	23fc0a0 <strcmp>
 23fd9ca:	b950      	cbnz	r0, 23fd9e2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd9cc:	f001 f906 	bl	23febdc <_Z16_fetch_usbserialv>
 23fd9d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd9d4:	f001 f8f0 	bl	23febb8 <_ZN9USBSerial5beginEl>
}
 23fd9d8:	b003      	add	sp, #12
 23fd9da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd9de:	f001 b8fd 	b.w	23febdc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd9e2:	4620      	mov	r0, r4
 23fd9e4:	490b      	ldr	r1, [pc, #44]	; (23fda14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd9e6:	f7fe fb5b 	bl	23fc0a0 <strcmp>
 23fd9ea:	b978      	cbnz	r0, 23fda0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd9ec:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd9f0:	a901      	add	r1, sp, #4
 23fd9f2:	4628      	mov	r0, r5
        int baud = 9600;
 23fd9f4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd9f6:	f7ff ffaf 	bl	23fd958 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd9fa:	f001 fabf 	bl	23fef7c <_Z22__fetch_global_Serial1v>
 23fd9fe:	9901      	ldr	r1, [sp, #4]
 23fda00:	f001 f87e 	bl	23feb00 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fda04:	f001 faba 	bl	23fef7c <_Z22__fetch_global_Serial1v>
}
 23fda08:	b003      	add	sp, #12
 23fda0a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fda0c:	2000      	movs	r0, #0
 23fda0e:	e7fb      	b.n	23fda08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fda10:	023ffc1d 	.word	0x023ffc1d
 23fda14:	023ffc24 	.word	0x023ffc24

023fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fda18:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fda1a:	2614      	movs	r6, #20
 23fda1c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fda20:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fda22:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fda26:	42ae      	cmp	r6, r5
 23fda28:	d005      	beq.n	23fda36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fda2a:	f105 0008 	add.w	r0, r5, #8
 23fda2e:	f7ff fff3 	bl	23fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fda32:	3514      	adds	r5, #20
 23fda34:	e7f7      	b.n	23fda26 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fda36:	6820      	ldr	r0, [r4, #0]
 23fda38:	f7ff fa3e 	bl	23fceb8 <free>
}
 23fda3c:	4620      	mov	r0, r4
 23fda3e:	bd70      	pop	{r4, r5, r6, pc}

023fda40 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fda40:	b510      	push	{r4, lr}
 23fda42:	4604      	mov	r4, r0
 23fda44:	300c      	adds	r0, #12
 23fda46:	f7ff ffe7 	bl	23fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fda4a:	4620      	mov	r0, r4
 23fda4c:	f7ff fa9f 	bl	23fcf8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fda50:	4620      	mov	r0, r4
 23fda52:	bd10      	pop	{r4, pc}

023fda54 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fda54:	b510      	push	{r4, lr}
 23fda56:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fda58:	4b03      	ldr	r3, [pc, #12]	; (23fda68 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fda5a:	f840 3b04 	str.w	r3, [r0], #4
 23fda5e:	f7ff ffef 	bl	23fda40 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fda62:	4620      	mov	r0, r4
 23fda64:	bd10      	pop	{r4, pc}
 23fda66:	bf00      	nop
 23fda68:	023ff50c 	.word	0x023ff50c

023fda6c <_ZN5spark16StreamLogHandlerD0Ev>:
 23fda6c:	b510      	push	{r4, lr}
 23fda6e:	4604      	mov	r4, r0
 23fda70:	f7ff fff0 	bl	23fda54 <_ZN5spark16StreamLogHandlerD1Ev>
 23fda74:	4620      	mov	r0, r4
 23fda76:	2124      	movs	r1, #36	; 0x24
 23fda78:	f7fe fb45 	bl	23fc106 <_ZdlPvj>
 23fda7c:	4620      	mov	r0, r4
 23fda7e:	bd10      	pop	{r4, pc}

023fda80 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fda80:	b510      	push	{r4, lr}
 23fda82:	4604      	mov	r4, r0
 23fda84:	4b02      	ldr	r3, [pc, #8]	; (23fda90 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fda86:	6003      	str	r3, [r0, #0]
 23fda88:	f7ff ffe4 	bl	23fda54 <_ZN5spark16StreamLogHandlerD1Ev>
 23fda8c:	4620      	mov	r0, r4
 23fda8e:	bd10      	pop	{r4, pc}
 23fda90:	023ffcc0 	.word	0x023ffcc0

023fda94 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fda94:	b510      	push	{r4, lr}
 23fda96:	4604      	mov	r4, r0
 23fda98:	f7ff fff2 	bl	23fda80 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fda9c:	4620      	mov	r0, r4
 23fda9e:	2124      	movs	r1, #36	; 0x24
 23fdaa0:	f7fe fb31 	bl	23fc106 <_ZdlPvj>
 23fdaa4:	4620      	mov	r0, r4
 23fdaa6:	bd10      	pop	{r4, pc}

023fdaa8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fdaa8:	2200      	movs	r2, #0
 23fdaaa:	e9c0 2200 	strd	r2, r2, [r0]
 23fdaae:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fdab0:	b510      	push	{r4, lr}
 23fdab2:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdab4:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdab6:	6004      	str	r4, [r0, #0]
 23fdab8:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdaba:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdabc:	6044      	str	r4, [r0, #4]
 23fdabe:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdac0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdac2:	6084      	str	r4, [r0, #8]
}
 23fdac4:	bd10      	pop	{r4, pc}

023fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fdac6:	b510      	push	{r4, lr}
 23fdac8:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdaca:	6803      	ldr	r3, [r0, #0]
 23fdacc:	6818      	ldr	r0, [r3, #0]
 23fdace:	f7fe fe2d 	bl	23fc72c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fdad2:	4620      	mov	r0, r4
 23fdad4:	bd10      	pop	{r4, pc}
	...

023fdad8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fdad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdadc:	b087      	sub	sp, #28
 23fdade:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fdae0:	4b1c      	ldr	r3, [pc, #112]	; (23fdb54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fdae2:	4680      	mov	r8, r0
 23fdae4:	685b      	ldr	r3, [r3, #4]
 23fdae6:	4689      	mov	r9, r1
 23fdae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdaec:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fdaee:	b96b      	cbnz	r3, 23fdb0c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fdaf0:	f7ff fed0 	bl	23fd894 <_ZN5spark10LogManager8instanceEv>
 23fdaf4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdaf6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fdafa:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdafc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdafe:	f7ff fd77 	bl	23fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdb02:	7b23      	ldrb	r3, [r4, #12]
 23fdb04:	b12b      	cbz	r3, 23fdb12 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdb06:	a805      	add	r0, sp, #20
 23fdb08:	f7ff ffdd 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdb0c:	b007      	add	sp, #28
 23fdb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdb12:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdb14:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdb18:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdb1a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdb1e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb22:	45aa      	cmp	sl, r5
 23fdb24:	d012      	beq.n	23fdb4c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdb26:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdb2a:	4631      	mov	r1, r6
 23fdb2c:	1d38      	adds	r0, r7, #4
 23fdb2e:	f7ff fe09 	bl	23fd744 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdb32:	4581      	cmp	r9, r0
 23fdb34:	d3f5      	bcc.n	23fdb22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdb36:	9a03      	ldr	r2, [sp, #12]
 23fdb38:	683b      	ldr	r3, [r7, #0]
 23fdb3a:	9200      	str	r2, [sp, #0]
 23fdb3c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdb40:	464a      	mov	r2, r9
 23fdb42:	4633      	mov	r3, r6
 23fdb44:	4641      	mov	r1, r8
 23fdb46:	4638      	mov	r0, r7
 23fdb48:	47d8      	blx	fp
 23fdb4a:	e7ea      	b.n	23fdb22 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdb4c:	2300      	movs	r3, #0
 23fdb4e:	7323      	strb	r3, [r4, #12]
 23fdb50:	e7d9      	b.n	23fdb06 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdb52:	bf00      	nop
 23fdb54:	e000ed00 	.word	0xe000ed00

023fdb58 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdb5c:	469b      	mov	fp, r3
 23fdb5e:	4b1a      	ldr	r3, [pc, #104]	; (23fdbc8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdb60:	4680      	mov	r8, r0
 23fdb62:	685b      	ldr	r3, [r3, #4]
 23fdb64:	4689      	mov	r9, r1
 23fdb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdb6a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdb6c:	b96b      	cbnz	r3, 23fdb8a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdb6e:	f7ff fe91 	bl	23fd894 <_ZN5spark10LogManager8instanceEv>
 23fdb72:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdb74:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdb78:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb7a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdb7c:	f7ff fd38 	bl	23fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdb80:	7b23      	ldrb	r3, [r4, #12]
 23fdb82:	b12b      	cbz	r3, 23fdb90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdb84:	a801      	add	r0, sp, #4
 23fdb86:	f7ff ff9e 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdb8a:	b003      	add	sp, #12
 23fdb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdb90:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdb92:	b2f6      	uxtb	r6, r6
 23fdb94:	7323      	strb	r3, [r4, #12]
 23fdb96:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdb9a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdb9e:	4555      	cmp	r5, sl
 23fdba0:	d00e      	beq.n	23fdbc0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdba2:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdba6:	4659      	mov	r1, fp
 23fdba8:	1d38      	adds	r0, r7, #4
 23fdbaa:	f7ff fdcb 	bl	23fd744 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdbae:	4286      	cmp	r6, r0
 23fdbb0:	d3f5      	bcc.n	23fdb9e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdbb2:	683b      	ldr	r3, [r7, #0]
 23fdbb4:	464a      	mov	r2, r9
 23fdbb6:	4641      	mov	r1, r8
 23fdbb8:	4638      	mov	r0, r7
 23fdbba:	68db      	ldr	r3, [r3, #12]
 23fdbbc:	4798      	blx	r3
 23fdbbe:	e7ee      	b.n	23fdb9e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdbc0:	2300      	movs	r3, #0
 23fdbc2:	7323      	strb	r3, [r4, #12]
 23fdbc4:	e7de      	b.n	23fdb84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fdbc6:	bf00      	nop
 23fdbc8:	e000ed00 	.word	0xe000ed00

023fdbcc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fdbcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fdbd0:	4b16      	ldr	r3, [pc, #88]	; (23fdc2c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fdbd2:	4605      	mov	r5, r0
 23fdbd4:	685b      	ldr	r3, [r3, #4]
 23fdbd6:	460f      	mov	r7, r1
 23fdbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fdbdc:	bb1b      	cbnz	r3, 23fdc26 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fdbde:	f7ff fe59 	bl	23fd894 <_ZN5spark10LogManager8instanceEv>
 23fdbe2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdbe4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdbe8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdbea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdbec:	f7ff fd00 	bl	23fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fdbf0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fdbf4:	2446      	movs	r4, #70	; 0x46
 23fdbf6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdbfa:	45b0      	cmp	r8, r6
 23fdbfc:	d109      	bne.n	23fdc12 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fdbfe:	a801      	add	r0, sp, #4
 23fdc00:	f7ff ff61 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fdc04:	42a5      	cmp	r5, r4
 23fdc06:	bfb4      	ite	lt
 23fdc08:	2000      	movlt	r0, #0
 23fdc0a:	2001      	movge	r0, #1
}
 23fdc0c:	b002      	add	sp, #8
 23fdc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fdc12:	f856 0b04 	ldr.w	r0, [r6], #4
 23fdc16:	4639      	mov	r1, r7
 23fdc18:	3004      	adds	r0, #4
 23fdc1a:	f7ff fd93 	bl	23fd744 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fdc1e:	4284      	cmp	r4, r0
 23fdc20:	bfa8      	it	ge
 23fdc22:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fdc24:	e7e9      	b.n	23fdbfa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fdc26:	2000      	movs	r0, #0
 23fdc28:	e7f0      	b.n	23fdc0c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fdc2a:	bf00      	nop
 23fdc2c:	e000ed00 	.word	0xe000ed00

023fdc30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdc32:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fdc36:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdc38:	4604      	mov	r4, r0
 23fdc3a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdc3c:	db0d      	blt.n	23fdc5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fdc3e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fdc40:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdc42:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdc44:	dd04      	ble.n	23fdc50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fdc46:	00b9      	lsls	r1, r7, #2
 23fdc48:	f7ff f944 	bl	23fced4 <realloc>
            if (!d) {
 23fdc4c:	b918      	cbnz	r0, 23fdc56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fdc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fdc50:	f7ff f932 	bl	23fceb8 <free>
        T* d = nullptr;
 23fdc54:	2000      	movs	r0, #0
        data_ = d;
 23fdc56:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdc58:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fdc5a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fdc5c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdc5e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fdc62:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdc64:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fdc68:	1d08      	adds	r0, r1, #4
 23fdc6a:	f001 fa39 	bl	23ff0e0 <memmove>
    new(p) T(std::move(value));
 23fdc6e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fdc72:	6863      	ldr	r3, [r4, #4]
    return true;
 23fdc74:	2001      	movs	r0, #1
    ++size_;
 23fdc76:	3301      	adds	r3, #1
 23fdc78:	6063      	str	r3, [r4, #4]
    return true;
 23fdc7a:	e7e8      	b.n	23fdc4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fdc7c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdc7e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdc80:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdc84:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdc86:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fdc88:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fdc8a:	f7ff fcb1 	bl	23fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fdc8e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fdc92:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fdc96:	4293      	cmp	r3, r2
 23fdc98:	4619      	mov	r1, r3
 23fdc9a:	d00a      	beq.n	23fdcb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fdc9c:	6809      	ldr	r1, [r1, #0]
 23fdc9e:	3304      	adds	r3, #4
 23fdca0:	42a9      	cmp	r1, r5
 23fdca2:	d1f8      	bne.n	23fdc96 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fdca4:	a801      	add	r0, sp, #4
 23fdca6:	f7ff ff0e 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdcaa:	2500      	movs	r5, #0
}
 23fdcac:	4628      	mov	r0, r5
 23fdcae:	b003      	add	sp, #12
 23fdcb0:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fdcb2:	4629      	mov	r1, r5
 23fdcb4:	4620      	mov	r0, r4
 23fdcb6:	f7ff ffbb 	bl	23fdc30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fdcba:	4605      	mov	r5, r0
 23fdcbc:	2800      	cmp	r0, #0
 23fdcbe:	d0f1      	beq.n	23fdca4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fdcc0:	6863      	ldr	r3, [r4, #4]
 23fdcc2:	2b01      	cmp	r3, #1
 23fdcc4:	d101      	bne.n	23fdcca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fdcc6:	f7ff fe01 	bl	23fd8cc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdcca:	a801      	add	r0, sp, #4
 23fdccc:	f7ff fefb 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fdcd0:	e7ec      	b.n	23fdcac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fdcd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fdcd2:	460b      	mov	r3, r1
 23fdcd4:	b570      	push	{r4, r5, r6, lr}
 23fdcd6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdcd8:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdcdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdce0:	4282      	cmp	r2, r0
 23fdce2:	d00f      	beq.n	23fdd04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdce4:	4601      	mov	r1, r0
            if (*p == value) {
 23fdce6:	681d      	ldr	r5, [r3, #0]
 23fdce8:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdcec:	42ae      	cmp	r6, r5
 23fdcee:	d107      	bne.n	23fdd00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdcf0:	1a52      	subs	r2, r2, r1
 23fdcf2:	f001 f9f5 	bl	23ff0e0 <memmove>
    return true;
 23fdcf6:	2001      	movs	r0, #1
    --size_;
 23fdcf8:	6863      	ldr	r3, [r4, #4]
 23fdcfa:	3b01      	subs	r3, #1
 23fdcfc:	6063      	str	r3, [r4, #4]
}
 23fdcfe:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdd00:	4608      	mov	r0, r1
 23fdd02:	e7ed      	b.n	23fdce0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdd04:	2000      	movs	r0, #0
 23fdd06:	e7fa      	b.n	23fdcfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdd08 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdd0a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdd0c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdd10:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdd12:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdd14:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdd16:	f7ff fc6b 	bl	23fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdd1a:	4620      	mov	r0, r4
 23fdd1c:	a901      	add	r1, sp, #4
 23fdd1e:	f7ff ffd8 	bl	23fdcd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdd22:	b118      	cbz	r0, 23fdd2c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdd24:	6863      	ldr	r3, [r4, #4]
 23fdd26:	b90b      	cbnz	r3, 23fdd2c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdd28:	f7ff fddc 	bl	23fd8e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd2c:	a803      	add	r0, sp, #12
 23fdd2e:	f7ff feca 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdd32:	b004      	add	sp, #16
 23fdd34:	bd10      	pop	{r4, pc}

023fdd36 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdd36:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdd38:	b570      	push	{r4, r5, r6, lr}
 23fdd3a:	4604      	mov	r4, r0
 23fdd3c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdd40:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdd44:	42ae      	cmp	r6, r5
 23fdd46:	d015      	beq.n	23fdd74 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdd48:	4620      	mov	r0, r4
 23fdd4a:	f105 0110 	add.w	r1, r5, #16
 23fdd4e:	f7ff ffc0 	bl	23fdcd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdd52:	6863      	ldr	r3, [r4, #4]
 23fdd54:	b90b      	cbnz	r3, 23fdd5a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdd56:	f7ff fdc5 	bl	23fd8e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdd5a:	69e0      	ldr	r0, [r4, #28]
 23fdd5c:	6929      	ldr	r1, [r5, #16]
 23fdd5e:	6803      	ldr	r3, [r0, #0]
 23fdd60:	68db      	ldr	r3, [r3, #12]
 23fdd62:	4798      	blx	r3
        if (h.stream) {
 23fdd64:	6969      	ldr	r1, [r5, #20]
 23fdd66:	b119      	cbz	r1, 23fdd70 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fdd68:	6a20      	ldr	r0, [r4, #32]
 23fdd6a:	6803      	ldr	r3, [r0, #0]
 23fdd6c:	68db      	ldr	r3, [r3, #12]
 23fdd6e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdd70:	3518      	adds	r5, #24
 23fdd72:	e7e7      	b.n	23fdd44 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fdd74:	2618      	movs	r6, #24
 23fdd76:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdd7a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdd7e:	42ae      	cmp	r6, r5
 23fdd80:	d004      	beq.n	23fdd8c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fdd82:	4628      	mov	r0, r5
 23fdd84:	f000 fdbb 	bl	23fe8fe <_ZN6StringD1Ev>
 23fdd88:	3518      	adds	r5, #24
 23fdd8a:	e7f8      	b.n	23fdd7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdd8c:	2300      	movs	r3, #0
 23fdd8e:	6163      	str	r3, [r4, #20]
}
 23fdd90:	bd70      	pop	{r4, r5, r6, pc}

023fdd92 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdd92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdd94:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdd96:	f7ff fda5 	bl	23fd8e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdd9a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fdd9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdda0:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdda2:	f7ff fc25 	bl	23fd5f0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fdda6:	4620      	mov	r0, r4
 23fdda8:	f7ff ffc5 	bl	23fdd36 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fddac:	a801      	add	r0, sp, #4
 23fddae:	f7ff fe8a 	bl	23fdac6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fddb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fddb4:	b108      	cbz	r0, 23fddba <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fddb6:	f7fe fc9d 	bl	23fc6f4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fddba:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fddbe:	2618      	movs	r6, #24
 23fddc0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fddc4:	42ae      	cmp	r6, r5
 23fddc6:	d004      	beq.n	23fddd2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fddc8:	4628      	mov	r0, r5
 23fddca:	f000 fd98 	bl	23fe8fe <_ZN6StringD1Ev>
 23fddce:	3518      	adds	r5, #24
 23fddd0:	e7f8      	b.n	23fddc4 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fddd2:	6920      	ldr	r0, [r4, #16]
 23fddd4:	f7ff f870 	bl	23fceb8 <free>
 23fddd8:	6820      	ldr	r0, [r4, #0]
 23fddda:	f7ff f86d 	bl	23fceb8 <free>
}
 23fddde:	4620      	mov	r0, r4
 23fdde0:	b002      	add	sp, #8
 23fdde2:	bd70      	pop	{r4, r5, r6, pc}

023fdde4 <__tcf_2>:
    static LogManager mgr;
 23fdde4:	4801      	ldr	r0, [pc, #4]	; (23fddec <__tcf_2+0x8>)
 23fdde6:	f7ff bfd4 	b.w	23fdd92 <_ZN5spark10LogManagerD1Ev>
 23fddea:	bf00      	nop
 23fddec:	1007ae74 	.word	0x1007ae74

023fddf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fddf0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fddf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fddf4:	4604      	mov	r4, r0
 23fddf6:	460d      	mov	r5, r1
 23fddf8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fddfa:	d915      	bls.n	23fde28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fddfc:	4290      	cmp	r0, r2
 23fddfe:	d214      	bcs.n	23fde2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fde00:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fde04:	1a75      	subs	r5, r6, r1
 23fde06:	f1a1 0714 	sub.w	r7, r1, #20
 23fde0a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fde0c:	42b7      	cmp	r7, r6
 23fde0e:	d01a      	beq.n	23fde46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fde10:	b11c      	cbz	r4, 23fde1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fde12:	4631      	mov	r1, r6
 23fde14:	4620      	mov	r0, r4
 23fde16:	f7ff fc45 	bl	23fd6a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fde1a:	f106 0008 	add.w	r0, r6, #8
 23fde1e:	f7ff fdfb 	bl	23fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fde22:	3e14      	subs	r6, #20
 23fde24:	3c14      	subs	r4, #20
 23fde26:	e7f1      	b.n	23fde0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fde28:	d00d      	beq.n	23fde46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fde2a:	42b5      	cmp	r5, r6
 23fde2c:	d00b      	beq.n	23fde46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fde2e:	b11c      	cbz	r4, 23fde38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fde30:	4629      	mov	r1, r5
 23fde32:	4620      	mov	r0, r4
 23fde34:	f7ff fc36 	bl	23fd6a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fde38:	f105 0008 	add.w	r0, r5, #8
 23fde3c:	f7ff fdec 	bl	23fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fde40:	3514      	adds	r5, #20
 23fde42:	3414      	adds	r4, #20
 23fde44:	e7f1      	b.n	23fde2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fde46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fde48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fde4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fde4c:	4604      	mov	r4, r0
 23fde4e:	460d      	mov	r5, r1
 23fde50:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fde52:	d914      	bls.n	23fde7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fde54:	4290      	cmp	r0, r2
 23fde56:	d213      	bcs.n	23fde80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fde58:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fde5c:	1a75      	subs	r5, r6, r1
 23fde5e:	f1a1 0710 	sub.w	r7, r1, #16
 23fde62:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fde64:	42b7      	cmp	r7, r6
 23fde66:	d018      	beq.n	23fde9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fde68:	b11c      	cbz	r4, 23fde72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fde6a:	4631      	mov	r1, r6
 23fde6c:	4620      	mov	r0, r4
 23fde6e:	f000 fdaf 	bl	23fe9d0 <_ZN6StringC1EOS_>
                end->~T();
 23fde72:	4630      	mov	r0, r6
 23fde74:	f000 fd43 	bl	23fe8fe <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fde78:	3e10      	subs	r6, #16
 23fde7a:	3c10      	subs	r4, #16
 23fde7c:	e7f2      	b.n	23fde64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fde7e:	d00c      	beq.n	23fde9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fde80:	42b5      	cmp	r5, r6
 23fde82:	d00a      	beq.n	23fde9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fde84:	b11c      	cbz	r4, 23fde8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fde86:	4629      	mov	r1, r5
 23fde88:	4620      	mov	r0, r4
 23fde8a:	f000 fda1 	bl	23fe9d0 <_ZN6StringC1EOS_>
                p->~T();
 23fde8e:	4628      	mov	r0, r5
 23fde90:	f000 fd35 	bl	23fe8fe <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fde94:	3510      	adds	r5, #16
 23fde96:	3410      	adds	r4, #16
 23fde98:	e7f2      	b.n	23fde80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fde9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fde9c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fde9e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fdea0:	4605      	mov	r5, r0
        if (n > 0) {
 23fdea2:	dd11      	ble.n	23fdec8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fdea4:	0130      	lsls	r0, r6, #4
 23fdea6:	f7fe fff9 	bl	23fce9c <malloc>
            if (!d) {
 23fdeaa:	4604      	mov	r4, r0
 23fdeac:	b158      	cbz	r0, 23fdec6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fdeae:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdeb2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fdeb6:	f7ff ffc7 	bl	23fde48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fdeba:	6828      	ldr	r0, [r5, #0]
 23fdebc:	f7fe fffc 	bl	23fceb8 <free>
        return true;
 23fdec0:	2001      	movs	r0, #1
        data_ = d;
 23fdec2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fdec4:	60ae      	str	r6, [r5, #8]
    }
 23fdec6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fdec8:	2400      	movs	r4, #0
 23fdeca:	e7f6      	b.n	23fdeba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fdecc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fded0:	4690      	mov	r8, r2
        capacity_(0) {
 23fded2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fded4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fded6:	b095      	sub	sp, #84	; 0x54
 23fded8:	9103      	str	r1, [sp, #12]
    return size_;
 23fdeda:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fdede:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fdee0:	4299      	cmp	r1, r3
        capacity_(0) {
 23fdee2:	e9c0 3300 	strd	r3, r3, [r0]
 23fdee6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fdeea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fdeee:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdef2:	7602      	strb	r2, [r0, #24]
 23fdef4:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fdef6:	dc23      	bgt.n	23fdf40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fdef8:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fdefc:	2314      	movs	r3, #20
 23fdefe:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fdf02:	42af      	cmp	r7, r5
 23fdf04:	d03b      	beq.n	23fdf7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fdf06:	4629      	mov	r1, r5
 23fdf08:	a80b      	add	r0, sp, #44	; 0x2c
 23fdf0a:	f000 fd61 	bl	23fe9d0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fdf0e:	a90b      	add	r1, sp, #44	; 0x2c
 23fdf10:	a80f      	add	r0, sp, #60	; 0x3c
 23fdf12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fdf14:	f000 fd5c 	bl	23fe9d0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdf18:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fdf1c:	4299      	cmp	r1, r3
 23fdf1e:	da1b      	bge.n	23fdf58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fdf20:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fdf22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fdf24:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fdf28:	4631      	mov	r1, r6
 23fdf2a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fdf2e:	f106 0010 	add.w	r0, r6, #16
 23fdf32:	f7ff ff89 	bl	23fde48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdf36:	b9ee      	cbnz	r6, 23fdf74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdf3a:	3301      	adds	r3, #1
 23fdf3c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdf3e:	e011      	b.n	23fdf64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdf40:	a808      	add	r0, sp, #32
 23fdf42:	f7ff ffab 	bl	23fde9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdf46:	2800      	cmp	r0, #0
 23fdf48:	d1d6      	bne.n	23fdef8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdf4a:	a808      	add	r0, sp, #32
 23fdf4c:	f7ff f81f 	bl	23fcf8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdf50:	4620      	mov	r0, r4
 23fdf52:	b015      	add	sp, #84	; 0x54
 23fdf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdf58:	3101      	adds	r1, #1
 23fdf5a:	a808      	add	r0, sp, #32
 23fdf5c:	f7ff ff9e 	bl	23fde9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdf60:	2800      	cmp	r0, #0
 23fdf62:	d1dd      	bne.n	23fdf20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fdf64:	a80f      	add	r0, sp, #60	; 0x3c
 23fdf66:	f000 fcca 	bl	23fe8fe <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fdf6a:	a80b      	add	r0, sp, #44	; 0x2c
 23fdf6c:	f000 fcc7 	bl	23fe8fe <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdf70:	3514      	adds	r5, #20
 23fdf72:	e7c6      	b.n	23fdf02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fdf74:	4630      	mov	r0, r6
 23fdf76:	a90f      	add	r1, sp, #60	; 0x3c
 23fdf78:	f000 fd2a 	bl	23fe9d0 <_ZN6StringC1EOS_>
 23fdf7c:	e7dc      	b.n	23fdf38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fdf7e:	2600      	movs	r6, #0
 23fdf80:	f04f 0914 	mov.w	r9, #20
 23fdf84:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fdf88:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fdf8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fdf8e:	429e      	cmp	r6, r3
 23fdf90:	da7c      	bge.n	23fe08c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fdf92:	0133      	lsls	r3, r6, #4
 23fdf94:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fdf96:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fdf98:	b90b      	cbnz	r3, 23fdf9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fdf9a:	3601      	adds	r6, #1
 23fdf9c:	e7f5      	b.n	23fdf8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fdf9e:	2300      	movs	r3, #0
 23fdfa0:	9307      	str	r3, [sp, #28]
 23fdfa2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fdfa6:	ad0b      	add	r5, sp, #44	; 0x2c
 23fdfa8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fdfaa:	a907      	add	r1, sp, #28
 23fdfac:	a806      	add	r0, sp, #24
 23fdfae:	f7ff faf8 	bl	23fd5a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdfb2:	4682      	mov	sl, r0
 23fdfb4:	2800      	cmp	r0, #0
 23fdfb6:	d0f0      	beq.n	23fdf9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fdfb8:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdfbc:	4601      	mov	r1, r0
            bool found = false;
 23fdfbe:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdfc2:	4628      	mov	r0, r5
 23fdfc4:	9a07      	ldr	r2, [sp, #28]
 23fdfc6:	f10d 0317 	add.w	r3, sp, #23
 23fdfca:	f7ff fb7f 	bl	23fd6cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdfce:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdfd2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdfd4:	2f00      	cmp	r7, #0
 23fdfd6:	d14a      	bne.n	23fe06e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fdfd8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fdfdc:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fdfe0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fdfe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fdfe8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fdfec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fdff0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdff2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fdff6:	4293      	cmp	r3, r2
 23fdff8:	db17      	blt.n	23fe02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fdffa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fdffe:	f1ba 0f00 	cmp.w	sl, #0
 23fe002:	dd30      	ble.n	23fe066 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe004:	fb09 f00a 	mul.w	r0, r9, sl
 23fe008:	f7fe ff48 	bl	23fce9c <malloc>
            if (!d) {
 23fe00c:	4683      	mov	fp, r0
 23fe00e:	b360      	cbz	r0, 23fe06a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe010:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe014:	fb09 1202 	mla	r2, r9, r2, r1
 23fe018:	f7ff feea 	bl	23fddf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe01c:	6828      	ldr	r0, [r5, #0]
 23fe01e:	f7fe ff4b 	bl	23fceb8 <free>
        data_ = d;
 23fe022:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe026:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe02a:	682b      	ldr	r3, [r5, #0]
 23fe02c:	9a01      	ldr	r2, [sp, #4]
 23fe02e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe032:	686a      	ldr	r2, [r5, #4]
 23fe034:	4651      	mov	r1, sl
 23fe036:	fb09 3202 	mla	r2, r9, r2, r3
 23fe03a:	f10a 0014 	add.w	r0, sl, #20
 23fe03e:	f7ff fed7 	bl	23fddf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe042:	f1ba 0f00 	cmp.w	sl, #0
 23fe046:	d003      	beq.n	23fe050 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe048:	4650      	mov	r0, sl
 23fe04a:	a90f      	add	r1, sp, #60	; 0x3c
 23fe04c:	f7ff fb2a 	bl	23fd6a4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe050:	686b      	ldr	r3, [r5, #4]
 23fe052:	3301      	adds	r3, #1
 23fe054:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe056:	a811      	add	r0, sp, #68	; 0x44
 23fe058:	f7ff fcde 	bl	23fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe05c:	b13f      	cbz	r7, 23fe06e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe05e:	a80b      	add	r0, sp, #44	; 0x2c
 23fe060:	f7ff fcda 	bl	23fda18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe064:	e771      	b.n	23fdf4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe066:	46bb      	mov	fp, r7
 23fe068:	e7d8      	b.n	23fe01c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe06a:	2701      	movs	r7, #1
 23fe06c:	e7f3      	b.n	23fe056 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe06e:	9b01      	ldr	r3, [sp, #4]
 23fe070:	682d      	ldr	r5, [r5, #0]
 23fe072:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe076:	9b06      	ldr	r3, [sp, #24]
 23fe078:	781b      	ldrb	r3, [r3, #0]
 23fe07a:	b92b      	cbnz	r3, 23fe088 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe07c:	f8d8 3000 	ldr.w	r3, [r8]
 23fe080:	9a02      	ldr	r2, [sp, #8]
 23fe082:	4413      	add	r3, r2
 23fe084:	7c1b      	ldrb	r3, [r3, #16]
 23fe086:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe088:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe08a:	e78e      	b.n	23fdfaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe08c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe08e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe090:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe092:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe094:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe096:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe09a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe09c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe09e:	60a2      	str	r2, [r4, #8]
 23fe0a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0a2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0a4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe0a6:	60e2      	str	r2, [r4, #12]
 23fe0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0aa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe0ac:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe0ae:	6122      	str	r2, [r4, #16]
 23fe0b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe0b2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe0b4:	9b03      	ldr	r3, [sp, #12]
 23fe0b6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe0b8:	6162      	str	r2, [r4, #20]
 23fe0ba:	7623      	strb	r3, [r4, #24]
 23fe0bc:	e7cf      	b.n	23fe05e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe0c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe0c2:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe0c4:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe0c6:	4617      	mov	r7, r2
 23fe0c8:	b087      	sub	sp, #28
 23fe0ca:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe0cc:	4668      	mov	r0, sp
 23fe0ce:	4619      	mov	r1, r3
 23fe0d0:	f7fe f981 	bl	23fc3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe0d4:	4b0b      	ldr	r3, [pc, #44]	; (23fe104 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe0d6:	4669      	mov	r1, sp
 23fe0d8:	f846 3b04 	str.w	r3, [r6], #4
 23fe0dc:	a803      	add	r0, sp, #12
 23fe0de:	f7fe f97a 	bl	23fc3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe0e2:	4639      	mov	r1, r7
 23fe0e4:	aa03      	add	r2, sp, #12
 23fe0e6:	4630      	mov	r0, r6
 23fe0e8:	f7ff fef0 	bl	23fdecc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe0ec:	a803      	add	r0, sp, #12
 23fe0ee:	f7fe f931 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe0f2:	4668      	mov	r0, sp
 23fe0f4:	f7fe f92e 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe0f8:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe0fa:	4b03      	ldr	r3, [pc, #12]	; (23fe108 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe0fc:	6225      	str	r5, [r4, #32]
 23fe0fe:	6023      	str	r3, [r4, #0]
}
 23fe100:	b007      	add	sp, #28
 23fe102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe104:	023ff50c 	.word	0x023ff50c
 23fe108:	023ffca8 	.word	0x023ffca8

023fe10c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe10e:	460f      	mov	r7, r1
 23fe110:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe112:	4638      	mov	r0, r7
 23fe114:	491c      	ldr	r1, [pc, #112]	; (23fe188 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe116:	4616      	mov	r6, r2
 23fe118:	461d      	mov	r5, r3
 23fe11a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe11c:	f7fd ffc0 	bl	23fc0a0 <strcmp>
 23fe120:	b9c0      	cbnz	r0, 23fe154 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe122:	b1a4      	cbz	r4, 23fe14e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe124:	4629      	mov	r1, r5
 23fe126:	a801      	add	r0, sp, #4
 23fe128:	f7ff fcbe 	bl	23fdaa8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe12c:	2024      	movs	r0, #36	; 0x24
 23fe12e:	4917      	ldr	r1, [pc, #92]	; (23fe18c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe130:	f000 ffb4 	bl	23ff09c <_ZnwjRKSt9nothrow_t>
 23fe134:	4605      	mov	r5, r0
 23fe136:	b130      	cbz	r0, 23fe146 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe138:	ab01      	add	r3, sp, #4
 23fe13a:	4632      	mov	r2, r6
 23fe13c:	4621      	mov	r1, r4
 23fe13e:	f7ff ffbf 	bl	23fe0c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe142:	4b13      	ldr	r3, [pc, #76]	; (23fe190 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe144:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe146:	a801      	add	r0, sp, #4
 23fe148:	f7fe f904 	bl	23fc354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe14c:	462c      	mov	r4, r5
}
 23fe14e:	4620      	mov	r0, r4
 23fe150:	b005      	add	sp, #20
 23fe152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe154:	4638      	mov	r0, r7
 23fe156:	490f      	ldr	r1, [pc, #60]	; (23fe194 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe158:	f7fd ffa2 	bl	23fc0a0 <strcmp>
 23fe15c:	b990      	cbnz	r0, 23fe184 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe15e:	2c00      	cmp	r4, #0
 23fe160:	d0f5      	beq.n	23fe14e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe162:	4629      	mov	r1, r5
 23fe164:	a801      	add	r0, sp, #4
 23fe166:	f7ff fc9f 	bl	23fdaa8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe16a:	2024      	movs	r0, #36	; 0x24
 23fe16c:	4907      	ldr	r1, [pc, #28]	; (23fe18c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe16e:	f000 ff95 	bl	23ff09c <_ZnwjRKSt9nothrow_t>
 23fe172:	4605      	mov	r5, r0
 23fe174:	2800      	cmp	r0, #0
 23fe176:	d0e6      	beq.n	23fe146 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe178:	4632      	mov	r2, r6
 23fe17a:	4621      	mov	r1, r4
 23fe17c:	ab01      	add	r3, sp, #4
 23fe17e:	f7ff ff9f 	bl	23fe0c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe182:	e7e0      	b.n	23fe146 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe184:	2400      	movs	r4, #0
 23fe186:	e7e2      	b.n	23fe14e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe188:	023ffc2c 	.word	0x023ffc2c
 23fe18c:	023ffdfc 	.word	0x023ffdfc
 23fe190:	023ffcc0 	.word	0x023ffcc0
 23fe194:	023ffc30 	.word	0x023ffc30

023fe198 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe198:	4b01      	ldr	r3, [pc, #4]	; (23fe1a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe19a:	4a02      	ldr	r2, [pc, #8]	; (23fe1a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe19c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe19e:	4770      	bx	lr
 23fe1a0:	1007ae70 	.word	0x1007ae70
 23fe1a4:	023ffc41 	.word	0x023ffc41

023fe1a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe1ac:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe1ae:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe1b2:	4604      	mov	r4, r0
 23fe1b4:	460e      	mov	r6, r1
 23fe1b6:	4617      	mov	r7, r2
 23fe1b8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe1ba:	f000 fd0f 	bl	23febdc <_Z16_fetch_usbserialv>
 23fe1be:	4581      	cmp	r9, r0
 23fe1c0:	d04d      	beq.n	23fe25e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe1c2:	792b      	ldrb	r3, [r5, #4]
 23fe1c4:	0719      	lsls	r1, r3, #28
 23fe1c6:	d504      	bpl.n	23fe1d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe1c8:	4620      	mov	r0, r4
 23fe1ca:	696a      	ldr	r2, [r5, #20]
 23fe1cc:	4954      	ldr	r1, [pc, #336]	; (23fe320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe1ce:	f7ff fae2 	bl	23fd796 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe1d2:	f1b8 0f00 	cmp.w	r8, #0
 23fe1d6:	d00d      	beq.n	23fe1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe1d8:	215b      	movs	r1, #91	; 0x5b
 23fe1da:	4620      	mov	r0, r4
 23fe1dc:	f7ff fa56 	bl	23fd68c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe1e0:	4641      	mov	r1, r8
 23fe1e2:	4620      	mov	r0, r4
 23fe1e4:	f7ff fa43 	bl	23fd66e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe1e8:	6823      	ldr	r3, [r4, #0]
 23fe1ea:	2202      	movs	r2, #2
 23fe1ec:	4620      	mov	r0, r4
 23fe1ee:	68db      	ldr	r3, [r3, #12]
 23fe1f0:	494c      	ldr	r1, [pc, #304]	; (23fe324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe1f2:	4798      	blx	r3
    if (attr.has_file) {
 23fe1f4:	792b      	ldrb	r3, [r5, #4]
 23fe1f6:	07da      	lsls	r2, r3, #31
 23fe1f8:	d524      	bpl.n	23fe244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe1fa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe1fe:	212f      	movs	r1, #47	; 0x2f
 23fe200:	4640      	mov	r0, r8
 23fe202:	f000 fff0 	bl	23ff1e6 <strrchr>
    if (s1) {
 23fe206:	b108      	cbz	r0, 23fe20c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe208:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe20c:	4641      	mov	r1, r8
 23fe20e:	4620      	mov	r0, r4
 23fe210:	f7ff fa2d 	bl	23fd66e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe214:	792b      	ldrb	r3, [r5, #4]
 23fe216:	079b      	lsls	r3, r3, #30
 23fe218:	d508      	bpl.n	23fe22c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe21a:	213a      	movs	r1, #58	; 0x3a
 23fe21c:	4620      	mov	r0, r4
 23fe21e:	f7ff fa35 	bl	23fd68c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe222:	4620      	mov	r0, r4
 23fe224:	68ea      	ldr	r2, [r5, #12]
 23fe226:	4940      	ldr	r1, [pc, #256]	; (23fe328 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe228:	f7ff fab5 	bl	23fd796 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe22c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe22e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe230:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe234:	4620      	mov	r0, r4
            write(", ", 2);
 23fe236:	f04f 0202 	mov.w	r2, #2
 23fe23a:	68db      	ldr	r3, [r3, #12]
 23fe23c:	bf14      	ite	ne
 23fe23e:	493b      	ldrne	r1, [pc, #236]	; (23fe32c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe240:	493b      	ldreq	r1, [pc, #236]	; (23fe330 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe242:	4798      	blx	r3
    if (attr.has_function) {
 23fe244:	792b      	ldrb	r3, [r5, #4]
 23fe246:	0758      	lsls	r0, r3, #29
 23fe248:	d51d      	bpl.n	23fe286 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe24a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe24c:	460b      	mov	r3, r1
 23fe24e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe250:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe254:	b160      	cbz	r0, 23fe270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe256:	2820      	cmp	r0, #32
 23fe258:	d108      	bne.n	23fe26c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe25a:	4619      	mov	r1, r3
 23fe25c:	e7f7      	b.n	23fe24e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe25e:	4835      	ldr	r0, [pc, #212]	; (23fe334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe260:	f000 f983 	bl	23fe56a <_ZN5spark12NetworkClass9listeningEv>
 23fe264:	2800      	cmp	r0, #0
 23fe266:	d0ac      	beq.n	23fe1c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe26c:	2828      	cmp	r0, #40	; 0x28
 23fe26e:	d1ee      	bne.n	23fe24e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe270:	6823      	ldr	r3, [r4, #0]
 23fe272:	1a52      	subs	r2, r2, r1
 23fe274:	4620      	mov	r0, r4
 23fe276:	68db      	ldr	r3, [r3, #12]
 23fe278:	4798      	blx	r3
        write("(): ", 4);
 23fe27a:	6823      	ldr	r3, [r4, #0]
 23fe27c:	2204      	movs	r2, #4
 23fe27e:	4620      	mov	r0, r4
 23fe280:	68db      	ldr	r3, [r3, #12]
 23fe282:	492d      	ldr	r1, [pc, #180]	; (23fe338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe284:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe286:	2100      	movs	r1, #0
 23fe288:	4638      	mov	r0, r7
 23fe28a:	f7fe fce1 	bl	23fcc50 <log_level_name>
 23fe28e:	4601      	mov	r1, r0
    write(s);
 23fe290:	4620      	mov	r0, r4
 23fe292:	f7ff f9ec 	bl	23fd66e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe296:	6823      	ldr	r3, [r4, #0]
 23fe298:	2202      	movs	r2, #2
 23fe29a:	4620      	mov	r0, r4
 23fe29c:	68db      	ldr	r3, [r3, #12]
 23fe29e:	4924      	ldr	r1, [pc, #144]	; (23fe330 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe2a0:	4798      	blx	r3
    if (msg) {
 23fe2a2:	b11e      	cbz	r6, 23fe2ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe2a4:	4631      	mov	r1, r6
 23fe2a6:	4620      	mov	r0, r4
 23fe2a8:	f7ff f9e1 	bl	23fd66e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe2ac:	792b      	ldrb	r3, [r5, #4]
 23fe2ae:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe2b2:	d02c      	beq.n	23fe30e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe2b4:	6823      	ldr	r3, [r4, #0]
 23fe2b6:	4921      	ldr	r1, [pc, #132]	; (23fe33c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe2b8:	68db      	ldr	r3, [r3, #12]
 23fe2ba:	2202      	movs	r2, #2
 23fe2bc:	4620      	mov	r0, r4
 23fe2be:	4798      	blx	r3
        if (attr.has_code) {
 23fe2c0:	792b      	ldrb	r3, [r5, #4]
 23fe2c2:	06d9      	lsls	r1, r3, #27
 23fe2c4:	d50a      	bpl.n	23fe2dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe2c6:	6823      	ldr	r3, [r4, #0]
 23fe2c8:	2207      	movs	r2, #7
 23fe2ca:	4620      	mov	r0, r4
 23fe2cc:	491c      	ldr	r1, [pc, #112]	; (23fe340 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe2ce:	68db      	ldr	r3, [r3, #12]
 23fe2d0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe2d2:	4620      	mov	r0, r4
 23fe2d4:	69aa      	ldr	r2, [r5, #24]
 23fe2d6:	491b      	ldr	r1, [pc, #108]	; (23fe344 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe2d8:	f7ff fa5d 	bl	23fd796 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe2dc:	792b      	ldrb	r3, [r5, #4]
 23fe2de:	069a      	lsls	r2, r3, #26
 23fe2e0:	d511      	bpl.n	23fe306 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe2e2:	06db      	lsls	r3, r3, #27
 23fe2e4:	d505      	bpl.n	23fe2f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe2e6:	6823      	ldr	r3, [r4, #0]
 23fe2e8:	2202      	movs	r2, #2
 23fe2ea:	4620      	mov	r0, r4
 23fe2ec:	68db      	ldr	r3, [r3, #12]
 23fe2ee:	490f      	ldr	r1, [pc, #60]	; (23fe32c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe2f0:	4798      	blx	r3
            write("details = ", 10);
 23fe2f2:	6823      	ldr	r3, [r4, #0]
 23fe2f4:	4620      	mov	r0, r4
 23fe2f6:	4914      	ldr	r1, [pc, #80]	; (23fe348 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe2f8:	220a      	movs	r2, #10
 23fe2fa:	68db      	ldr	r3, [r3, #12]
 23fe2fc:	4798      	blx	r3
            write(attr.details);
 23fe2fe:	4620      	mov	r0, r4
 23fe300:	69e9      	ldr	r1, [r5, #28]
 23fe302:	f7ff f9b4 	bl	23fd66e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe306:	215d      	movs	r1, #93	; 0x5d
 23fe308:	4620      	mov	r0, r4
 23fe30a:	f7ff f9bf 	bl	23fd68c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe30e:	6823      	ldr	r3, [r4, #0]
 23fe310:	4620      	mov	r0, r4
}
 23fe312:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe316:	2202      	movs	r2, #2
 23fe318:	68db      	ldr	r3, [r3, #12]
 23fe31a:	490c      	ldr	r1, [pc, #48]	; (23fe34c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe31c:	4718      	bx	r3
 23fe31e:	bf00      	nop
 23fe320:	023ffc45 	.word	0x023ffc45
 23fe324:	023ffc4c 	.word	0x023ffc4c
 23fe328:	023ffc0c 	.word	0x023ffc0c
 23fe32c:	023ffc4f 	.word	0x023ffc4f
 23fe330:	023ffc54 	.word	0x023ffc54
 23fe334:	1007ae9c 	.word	0x1007ae9c
 23fe338:	023ffc52 	.word	0x023ffc52
 23fe33c:	023ffc57 	.word	0x023ffc57
 23fe340:	023ffc5a 	.word	0x023ffc5a
 23fe344:	023ffc62 	.word	0x023ffc62
 23fe348:	023ffc65 	.word	0x023ffc65
 23fe34c:	023ff4b6 	.word	0x023ff4b6

023fe350 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe354:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe356:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe358:	460d      	mov	r5, r1
 23fe35a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe35c:	f000 fc3e 	bl	23febdc <_Z16_fetch_usbserialv>
 23fe360:	4287      	cmp	r7, r0
 23fe362:	d007      	beq.n	23fe374 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe364:	6a20      	ldr	r0, [r4, #32]
 23fe366:	4632      	mov	r2, r6
 23fe368:	6803      	ldr	r3, [r0, #0]
 23fe36a:	4629      	mov	r1, r5
}
 23fe36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe370:	68db      	ldr	r3, [r3, #12]
 23fe372:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe374:	4803      	ldr	r0, [pc, #12]	; (23fe384 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe376:	f000 f8f8 	bl	23fe56a <_ZN5spark12NetworkClass9listeningEv>
 23fe37a:	2800      	cmp	r0, #0
 23fe37c:	d0f2      	beq.n	23fe364 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe382:	bf00      	nop
 23fe384:	1007ae9c 	.word	0x1007ae9c

023fe388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe38c:	b085      	sub	sp, #20
    return stream_;
 23fe38e:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe392:	4605      	mov	r5, r0
 23fe394:	460f      	mov	r7, r1
 23fe396:	4690      	mov	r8, r2
 23fe398:	461e      	mov	r6, r3
 23fe39a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe39c:	f000 fc1e 	bl	23febdc <_Z16_fetch_usbserialv>
 23fe3a0:	4581      	cmp	r9, r0
 23fe3a2:	d105      	bne.n	23fe3b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe3a4:	4849      	ldr	r0, [pc, #292]	; (23fe4cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe3a6:	f000 f8e0 	bl	23fe56a <_ZN5spark12NetworkClass9listeningEv>
 23fe3aa:	2800      	cmp	r0, #0
 23fe3ac:	f040 808a 	bne.w	23fe4c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe3b0:	f04f 0900 	mov.w	r9, #0
 23fe3b4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe3b6:	4a46      	ldr	r2, [pc, #280]	; (23fe4d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe3b8:	a801      	add	r0, sp, #4
 23fe3ba:	9201      	str	r2, [sp, #4]
 23fe3bc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe3be:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe3c2:	f7ff f830 	bl	23fd426 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe3c6:	4649      	mov	r1, r9
 23fe3c8:	4640      	mov	r0, r8
 23fe3ca:	f7fe fc41 	bl	23fcc50 <log_level_name>
 23fe3ce:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe3d0:	4940      	ldr	r1, [pc, #256]	; (23fe4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe3d2:	2201      	movs	r2, #1
 23fe3d4:	a801      	add	r0, sp, #4
 23fe3d6:	f7ff f8b5 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3da:	4641      	mov	r1, r8
 23fe3dc:	f7ff f939 	bl	23fd652 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe3e0:	b13f      	cbz	r7, 23fe3f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe3e2:	493d      	ldr	r1, [pc, #244]	; (23fe4d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe3e4:	2201      	movs	r2, #1
 23fe3e6:	a801      	add	r0, sp, #4
 23fe3e8:	f7ff f8ac 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3ec:	4639      	mov	r1, r7
 23fe3ee:	f7ff f930 	bl	23fd652 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe3f2:	b13e      	cbz	r6, 23fe404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe3f4:	4939      	ldr	r1, [pc, #228]	; (23fe4dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe3f6:	2201      	movs	r2, #1
 23fe3f8:	a801      	add	r0, sp, #4
 23fe3fa:	f7ff f8a3 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe3fe:	4631      	mov	r1, r6
 23fe400:	f7ff f927 	bl	23fd652 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe404:	7923      	ldrb	r3, [r4, #4]
 23fe406:	07df      	lsls	r7, r3, #31
 23fe408:	d50e      	bpl.n	23fe428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe40a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe40c:	212f      	movs	r1, #47	; 0x2f
 23fe40e:	4630      	mov	r0, r6
 23fe410:	f000 fee9 	bl	23ff1e6 <strrchr>
    if (s1) {
 23fe414:	b100      	cbz	r0, 23fe418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe416:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe418:	4931      	ldr	r1, [pc, #196]	; (23fe4e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe41a:	2201      	movs	r2, #1
 23fe41c:	a801      	add	r0, sp, #4
 23fe41e:	f7ff f891 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe422:	4631      	mov	r1, r6
 23fe424:	f7ff f915 	bl	23fd652 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe428:	7923      	ldrb	r3, [r4, #4]
 23fe42a:	079e      	lsls	r6, r3, #30
 23fe42c:	d507      	bpl.n	23fe43e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe42e:	492d      	ldr	r1, [pc, #180]	; (23fe4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe430:	2202      	movs	r2, #2
 23fe432:	a801      	add	r0, sp, #4
 23fe434:	f7ff f886 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe438:	68e1      	ldr	r1, [r4, #12]
 23fe43a:	f7ff f801 	bl	23fd440 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe43e:	7923      	ldrb	r3, [r4, #4]
 23fe440:	0758      	lsls	r0, r3, #29
 23fe442:	d514      	bpl.n	23fe46e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe444:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe446:	4633      	mov	r3, r6
 23fe448:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe44e:	b12a      	cbz	r2, 23fe45c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe450:	2a20      	cmp	r2, #32
 23fe452:	d101      	bne.n	23fe458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe454:	461e      	mov	r6, r3
 23fe456:	e7f7      	b.n	23fe448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe458:	2a28      	cmp	r2, #40	; 0x28
 23fe45a:	d1f5      	bne.n	23fe448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe45c:	2202      	movs	r2, #2
 23fe45e:	4922      	ldr	r1, [pc, #136]	; (23fe4e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe460:	a801      	add	r0, sp, #4
 23fe462:	f7ff f86f 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe466:	4631      	mov	r1, r6
 23fe468:	1bba      	subs	r2, r7, r6
 23fe46a:	f7ff f87b 	bl	23fd564 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe46e:	7923      	ldrb	r3, [r4, #4]
 23fe470:	0719      	lsls	r1, r3, #28
 23fe472:	d507      	bpl.n	23fe484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe474:	491d      	ldr	r1, [pc, #116]	; (23fe4ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe476:	2201      	movs	r2, #1
 23fe478:	a801      	add	r0, sp, #4
 23fe47a:	f7ff f863 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe47e:	6961      	ldr	r1, [r4, #20]
 23fe480:	f7fe fff0 	bl	23fd464 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe484:	7923      	ldrb	r3, [r4, #4]
 23fe486:	06da      	lsls	r2, r3, #27
 23fe488:	d508      	bpl.n	23fe49c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe48a:	2204      	movs	r2, #4
 23fe48c:	4918      	ldr	r1, [pc, #96]	; (23fe4f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe48e:	eb0d 0002 	add.w	r0, sp, r2
 23fe492:	f7ff f857 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe496:	69a1      	ldr	r1, [r4, #24]
 23fe498:	f7fe ffd2 	bl	23fd440 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe49c:	7923      	ldrb	r3, [r4, #4]
 23fe49e:	069b      	lsls	r3, r3, #26
 23fe4a0:	d507      	bpl.n	23fe4b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe4a2:	4914      	ldr	r1, [pc, #80]	; (23fe4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe4a4:	2206      	movs	r2, #6
 23fe4a6:	a801      	add	r0, sp, #4
 23fe4a8:	f7ff f84c 	bl	23fd544 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe4ac:	69e1      	ldr	r1, [r4, #28]
 23fe4ae:	f7ff f8d0 	bl	23fd652 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe4b2:	a801      	add	r0, sp, #4
 23fe4b4:	f7fe ffa1 	bl	23fd3fa <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe4b8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe4ba:	2202      	movs	r2, #2
 23fe4bc:	6803      	ldr	r3, [r0, #0]
 23fe4be:	490e      	ldr	r1, [pc, #56]	; (23fe4f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe4c0:	68db      	ldr	r3, [r3, #12]
 23fe4c2:	4798      	blx	r3
}
 23fe4c4:	b005      	add	sp, #20
 23fe4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe4ca:	bf00      	nop
 23fe4cc:	1007ae9c 	.word	0x1007ae9c
 23fe4d0:	023ffc90 	.word	0x023ffc90
 23fe4d4:	023ffc22 	.word	0x023ffc22
 23fe4d8:	023ffc70 	.word	0x023ffc70
 23fe4dc:	023ffe6b 	.word	0x023ffe6b
 23fe4e0:	023ffc72 	.word	0x023ffc72
 23fe4e4:	023ffc74 	.word	0x023ffc74
 23fe4e8:	023ffc77 	.word	0x023ffc77
 23fe4ec:	023ffc7a 	.word	0x023ffc7a
 23fe4f0:	023ffc7c 	.word	0x023ffc7c
 23fe4f4:	023ffc81 	.word	0x023ffc81
 23fe4f8:	023ff4b6 	.word	0x023ff4b6

023fe4fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe4fc:	2300      	movs	r3, #0
 23fe4fe:	6840      	ldr	r0, [r0, #4]
 23fe500:	461a      	mov	r2, r3
 23fe502:	f7fe bc23 	b.w	23fcd4c <network_connect>

023fe506 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe506:	2200      	movs	r2, #0
 23fe508:	2102      	movs	r1, #2
 23fe50a:	6840      	ldr	r0, [r0, #4]
 23fe50c:	f7fe bc3a 	b.w	23fcd84 <network_disconnect>

023fe510 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe510:	2200      	movs	r2, #0
 23fe512:	6840      	ldr	r0, [r0, #4]
 23fe514:	4611      	mov	r1, r2
 23fe516:	f7fe bc27 	b.w	23fcd68 <network_connecting>

023fe51a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe51a:	2200      	movs	r2, #0
 23fe51c:	6840      	ldr	r0, [r0, #4]
 23fe51e:	4611      	mov	r1, r2
 23fe520:	f7fe bc3e 	b.w	23fcda0 <network_ready>

023fe524 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe524:	2300      	movs	r3, #0
 23fe526:	6840      	ldr	r0, [r0, #4]
 23fe528:	461a      	mov	r2, r3
 23fe52a:	4619      	mov	r1, r3
 23fe52c:	f7fe bc46 	b.w	23fcdbc <network_on>

023fe530 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe530:	2300      	movs	r3, #0
 23fe532:	6840      	ldr	r0, [r0, #4]
 23fe534:	461a      	mov	r2, r3
 23fe536:	4619      	mov	r1, r3
 23fe538:	f7fe bc4e 	b.w	23fcdd8 <network_off>

023fe53c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe53c:	2100      	movs	r1, #0
 23fe53e:	6840      	ldr	r0, [r0, #4]
 23fe540:	f7fe bc90 	b.w	23fce64 <network_is_on>

023fe544 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe544:	2100      	movs	r1, #0
 23fe546:	6840      	ldr	r0, [r0, #4]
 23fe548:	f7fe bc9a 	b.w	23fce80 <network_is_off>

023fe54c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe54c:	2200      	movs	r2, #0
 23fe54e:	6840      	ldr	r0, [r0, #4]
 23fe550:	f081 0101 	eor.w	r1, r1, #1
 23fe554:	f7fe bc4e 	b.w	23fcdf4 <network_listen>

023fe558 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe558:	2200      	movs	r2, #0
 23fe55a:	6840      	ldr	r0, [r0, #4]
 23fe55c:	f7fe bc66 	b.w	23fce2c <network_set_listen_timeout>

023fe560 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe560:	2200      	movs	r2, #0
 23fe562:	6840      	ldr	r0, [r0, #4]
 23fe564:	4611      	mov	r1, r2
 23fe566:	f7fe bc6f 	b.w	23fce48 <network_get_listen_timeout>

023fe56a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe56a:	2200      	movs	r2, #0
 23fe56c:	6840      	ldr	r0, [r0, #4]
 23fe56e:	4611      	mov	r1, r2
 23fe570:	f7fe bc4e 	b.w	23fce10 <network_listening>

023fe574 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe578:	b095      	sub	sp, #84	; 0x54
 23fe57a:	4614      	mov	r4, r2
 23fe57c:	460d      	mov	r5, r1
 23fe57e:	4607      	mov	r7, r0
    IPAddress addr;
 23fe580:	f7fe fdea 	bl	23fd158 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe584:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe586:	221c      	movs	r2, #28
 23fe588:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe58a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe58c:	f000 fdc2 	bl	23ff114 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe590:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe592:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe594:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe596:	2100      	movs	r1, #0
 23fe598:	466b      	mov	r3, sp
 23fe59a:	aa0c      	add	r2, sp, #48	; 0x30
 23fe59c:	f7fe f9a6 	bl	23fc8ec <netdb_getaddrinfo>
    if (!r) {
 23fe5a0:	4604      	mov	r4, r0
 23fe5a2:	2800      	cmp	r0, #0
 23fe5a4:	d14b      	bne.n	23fe63e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe5a6:	4602      	mov	r2, r0
 23fe5a8:	2101      	movs	r1, #1
 23fe5aa:	6868      	ldr	r0, [r5, #4]
 23fe5ac:	f7fe fbf8 	bl	23fcda0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe5b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe5b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe5b4:	4622      	mov	r2, r4
 23fe5b6:	6868      	ldr	r0, [r5, #4]
 23fe5b8:	f7fe fbf2 	bl	23fcda0 <network_ready>
        bool ok = false;
 23fe5bc:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe5be:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe5c0:	9e00      	ldr	r6, [sp, #0]
 23fe5c2:	2e00      	cmp	r6, #0
 23fe5c4:	d03b      	beq.n	23fe63e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe5c6:	2900      	cmp	r1, #0
 23fe5c8:	d139      	bne.n	23fe63e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe5ca:	6873      	ldr	r3, [r6, #4]
 23fe5cc:	2b02      	cmp	r3, #2
 23fe5ce:	d003      	beq.n	23fe5d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe5d0:	2b0a      	cmp	r3, #10
 23fe5d2:	d011      	beq.n	23fe5f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe5d4:	69f6      	ldr	r6, [r6, #28]
 23fe5d6:	e7f4      	b.n	23fe5c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe5d8:	f1b8 0f00 	cmp.w	r8, #0
 23fe5dc:	d0fa      	beq.n	23fe5d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe5de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe5e0:	a806      	add	r0, sp, #24
 23fe5e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe5e4:	1d3c      	adds	r4, r7, #4
 23fe5e6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe5e8:	f7fe fde4 	bl	23fd1b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe5ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe5ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe5f0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe5f2:	4641      	mov	r1, r8
 23fe5f4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe5f6:	e7ed      	b.n	23fe5d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe5f8:	f1b9 0f00 	cmp.w	r9, #0
 23fe5fc:	d0ea      	beq.n	23fe5d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe5fe:	2210      	movs	r2, #16
 23fe600:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe602:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe604:	f000 fd86 	bl	23ff114 <memset>
                    a.v = 6;
 23fe608:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe60a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe60c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe610:	f104 0308 	add.w	r3, r4, #8
 23fe614:	3418      	adds	r4, #24
 23fe616:	462a      	mov	r2, r5
 23fe618:	6818      	ldr	r0, [r3, #0]
 23fe61a:	6859      	ldr	r1, [r3, #4]
 23fe61c:	3308      	adds	r3, #8
 23fe61e:	c203      	stmia	r2!, {r0, r1}
 23fe620:	42a3      	cmp	r3, r4
 23fe622:	4615      	mov	r5, r2
 23fe624:	d1f7      	bne.n	23fe616 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe626:	a901      	add	r1, sp, #4
 23fe628:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe62a:	1d3c      	adds	r4, r7, #4
 23fe62c:	ad07      	add	r5, sp, #28
 23fe62e:	f7fe fda1 	bl	23fd174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe636:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe638:	4649      	mov	r1, r9
 23fe63a:	7023      	strb	r3, [r4, #0]
                    break;
 23fe63c:	e7ca      	b.n	23fe5d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe63e:	9800      	ldr	r0, [sp, #0]
 23fe640:	f7fe f946 	bl	23fc8d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe644:	4638      	mov	r0, r7
 23fe646:	b015      	add	sp, #84	; 0x54
 23fe648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe64c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe64c:	4b02      	ldr	r3, [pc, #8]	; (23fe658 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe64e:	4a03      	ldr	r2, [pc, #12]	; (23fe65c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe650:	601a      	str	r2, [r3, #0]
 23fe652:	2200      	movs	r2, #0
 23fe654:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe656:	4770      	bx	lr
 23fe658:	1007ae9c 	.word	0x1007ae9c
 23fe65c:	023ffd08 	.word	0x023ffd08

023fe660 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe662:	4606      	mov	r6, r0
 23fe664:	460d      	mov	r5, r1
  size_t n = 0;
 23fe666:	2400      	movs	r4, #0
 23fe668:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe66a:	42bd      	cmp	r5, r7
 23fe66c:	d00c      	beq.n	23fe688 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe66e:	6833      	ldr	r3, [r6, #0]
 23fe670:	4630      	mov	r0, r6
 23fe672:	689b      	ldr	r3, [r3, #8]
 23fe674:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe678:	4798      	blx	r3
     if (chunk>=0)
 23fe67a:	1e03      	subs	r3, r0, #0
 23fe67c:	db01      	blt.n	23fe682 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe67e:	441c      	add	r4, r3
  while (size--) {
 23fe680:	e7f3      	b.n	23fe66a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe682:	2c00      	cmp	r4, #0
 23fe684:	bf08      	it	eq
 23fe686:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe688:	4620      	mov	r0, r4
 23fe68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe68c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe68c:	b513      	push	{r0, r1, r4, lr}
 23fe68e:	4604      	mov	r4, r0
    }
 23fe690:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe692:	b159      	cbz	r1, 23fe6ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe694:	9101      	str	r1, [sp, #4]
 23fe696:	f7fd fd0d 	bl	23fc0b4 <strlen>
 23fe69a:	4602      	mov	r2, r0
 23fe69c:	4620      	mov	r0, r4
 23fe69e:	6823      	ldr	r3, [r4, #0]
 23fe6a0:	9901      	ldr	r1, [sp, #4]
 23fe6a2:	68db      	ldr	r3, [r3, #12]
    }
 23fe6a4:	b002      	add	sp, #8
 23fe6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe6aa:	4718      	bx	r3
    }
 23fe6ac:	b002      	add	sp, #8
 23fe6ae:	bd10      	pop	{r4, pc}

023fe6b0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fe6b0:	b508      	push	{r3, lr}
  return write(str);
 23fe6b2:	f7ff ffeb 	bl	23fe68c <_ZN5Print5writeEPKc>
}
 23fe6b6:	bd08      	pop	{r3, pc}

023fe6b8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fe6b8:	6803      	ldr	r3, [r0, #0]
 23fe6ba:	689b      	ldr	r3, [r3, #8]
 23fe6bc:	4718      	bx	r3

023fe6be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fe6be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fe6c0:	210d      	movs	r1, #13
{
 23fe6c2:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fe6c4:	f7ff fff8 	bl	23fe6b8 <_ZN5Print5printEc>
  n += print('\n');
 23fe6c8:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fe6ca:	4604      	mov	r4, r0
  n += print('\n');
 23fe6cc:	4628      	mov	r0, r5
 23fe6ce:	f7ff fff3 	bl	23fe6b8 <_ZN5Print5printEc>
  return n;
}
 23fe6d2:	4420      	add	r0, r4
 23fe6d4:	bd38      	pop	{r3, r4, r5, pc}

023fe6d6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe6d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe6d8:	2a01      	cmp	r2, #1
 23fe6da:	bf98      	it	ls
 23fe6dc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe6de:	b530      	push	{r4, r5, lr}
 23fe6e0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe6e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe6e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe6e8:	460d      	mov	r5, r1
 23fe6ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe6ee:	fb01 5312 	mls	r3, r1, r2, r5
 23fe6f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe6f6:	2b09      	cmp	r3, #9
 23fe6f8:	bf94      	ite	ls
 23fe6fa:	3330      	addls	r3, #48	; 0x30
 23fe6fc:	3337      	addhi	r3, #55	; 0x37
 23fe6fe:	b2db      	uxtb	r3, r3
  } while(n);
 23fe700:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe702:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe706:	d9ef      	bls.n	23fe6e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe708:	4621      	mov	r1, r4
 23fe70a:	f7ff ffbf 	bl	23fe68c <_ZN5Print5writeEPKc>
}
 23fe70e:	b00b      	add	sp, #44	; 0x2c
 23fe710:	bd30      	pop	{r4, r5, pc}

023fe712 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fe712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe716:	b086      	sub	sp, #24
 23fe718:	af00      	add	r7, sp, #0
 23fe71a:	4605      	mov	r5, r0
 23fe71c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fe71e:	1d38      	adds	r0, r7, #4
 23fe720:	2114      	movs	r1, #20
{
 23fe722:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fe724:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fe726:	f7fe fbe3 	bl	23fcef0 <vsnprintf>

    if (n<bufsize)
 23fe72a:	2813      	cmp	r0, #19
 23fe72c:	d80e      	bhi.n	23fe74c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fe72e:	4628      	mov	r0, r5
 23fe730:	1d39      	adds	r1, r7, #4
 23fe732:	f7ff ffab 	bl	23fe68c <_ZN5Print5writeEPKc>
 23fe736:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fe738:	b11e      	cbz	r6, 23fe742 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fe73a:	4628      	mov	r0, r5
 23fe73c:	f7ff ffbf 	bl	23fe6be <_ZN5Print7printlnEv>
 23fe740:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fe742:	4620      	mov	r0, r4
 23fe744:	3718      	adds	r7, #24
 23fe746:	46bd      	mov	sp, r7
 23fe748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fe74c:	f100 0308 	add.w	r3, r0, #8
 23fe750:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fe754:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fe756:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fe75a:	4622      	mov	r2, r4
 23fe75c:	1c41      	adds	r1, r0, #1
 23fe75e:	683b      	ldr	r3, [r7, #0]
 23fe760:	4668      	mov	r0, sp
 23fe762:	f7fe fbc5 	bl	23fcef0 <vsnprintf>
  return write(str);
 23fe766:	4669      	mov	r1, sp
 23fe768:	4628      	mov	r0, r5
 23fe76a:	f7ff ff8f 	bl	23fe68c <_ZN5Print5writeEPKc>
 23fe76e:	4604      	mov	r4, r0
 23fe770:	46c5      	mov	sp, r8
 23fe772:	e7e1      	b.n	23fe738 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fe774 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fe774:	2200      	movs	r2, #0
 23fe776:	4b01      	ldr	r3, [pc, #4]	; (23fe77c <_GLOBAL__sub_I_RGB+0x8>)
 23fe778:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe77a:	4770      	bx	lr
 23fe77c:	1007aea4 	.word	0x1007aea4

023fe780 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fe780:	2100      	movs	r1, #0
 23fe782:	f7fe b931 	b.w	23fc9e8 <hal_spi_release>

023fe786 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe786:	2100      	movs	r1, #0
 23fe788:	f7fe b920 	b.w	23fc9cc <hal_spi_acquire>

023fe78c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe78c:	b510      	push	{r4, lr}
 23fe78e:	4604      	mov	r4, r0
 23fe790:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe792:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe794:	f7fe f8c6 	bl	23fc924 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe798:	2300      	movs	r3, #0
}
 23fe79a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe79c:	6063      	str	r3, [r4, #4]
}
 23fe79e:	bd10      	pop	{r4, pc}

023fe7a0 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 23fe7a0:	b513      	push	{r0, r1, r4, lr}
 23fe7a2:	4604      	mov	r4, r0
    if (!lock())
 23fe7a4:	7800      	ldrb	r0, [r0, #0]
{
 23fe7a6:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fe7a8:	f7ff ffed 	bl	23fe786 <_ZN8SPIClass4lockEv.isra.0>
 23fe7ac:	9901      	ldr	r1, [sp, #4]
 23fe7ae:	b948      	cbnz	r0, 23fe7c4 <_ZN8SPIClass5beginEt+0x24>
 23fe7b0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23fe7b2:	9001      	str	r0, [sp, #4]
 23fe7b4:	f7fe f8a8 	bl	23fc908 <hal_spi_begin>
        unlock();
 23fe7b8:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe7ba:	b002      	add	sp, #8
 23fe7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe7c0:	f7ff bfde 	b.w	23fe780 <_ZN8SPIClass6unlockEv.isra.0>
 23fe7c4:	b002      	add	sp, #8
 23fe7c6:	bd10      	pop	{r4, pc}

023fe7c8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fe7c8:	7800      	ldrb	r0, [r0, #0]
 23fe7ca:	f7ff bfd9 	b.w	23fe780 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fe7d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe7d0:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe7d2:	2400      	movs	r4, #0
 23fe7d4:	0840      	lsrs	r0, r0, #1
 23fe7d6:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe7d8:	6818      	ldr	r0, [r3, #0]
 23fe7da:	b2e5      	uxtb	r5, r4
 23fe7dc:	4288      	cmp	r0, r1
 23fe7de:	d906      	bls.n	23fe7ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe7e0:	3401      	adds	r4, #1
 23fe7e2:	2c08      	cmp	r4, #8
 23fe7e4:	d002      	beq.n	23fe7ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe7e6:	0840      	lsrs	r0, r0, #1
 23fe7e8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe7ea:	e7f5      	b.n	23fe7d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe7ec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe7ee:	4b02      	ldr	r3, [pc, #8]	; (23fe7f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe7f0:	5d5b      	ldrb	r3, [r3, r5]
 23fe7f2:	7013      	strb	r3, [r2, #0]
}
 23fe7f4:	bd30      	pop	{r4, r5, pc}
 23fe7f6:	bf00      	nop
 23fe7f8:	023ffd3c 	.word	0x023ffd3c

023fe7fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fe7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe800:	4606      	mov	r6, r0
 23fe802:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fe804:	7800      	ldrb	r0, [r0, #0]
{
 23fe806:	460c      	mov	r4, r1
    CHECK(lock());
 23fe808:	f7ff ffbd 	bl	23fe786 <_ZN8SPIClass4lockEv.isra.0>
 23fe80c:	2800      	cmp	r0, #0
 23fe80e:	db1b      	blt.n	23fe848 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe810:	2214      	movs	r2, #20
 23fe812:	2100      	movs	r1, #0
 23fe814:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fe816:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe818:	f000 fc7c 	bl	23ff114 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe81c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe81e:	2200      	movs	r2, #0
 23fe820:	4628      	mov	r0, r5
 23fe822:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe824:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fe828:	f7fe f898 	bl	23fc95c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fe82c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fe830:	b113      	cbz	r3, 23fe838 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fe832:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fe836:	b155      	cbz	r5, 23fe84e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fe838:	2700      	movs	r7, #0
 23fe83a:	2501      	movs	r5, #1
 23fe83c:	46b9      	mov	r9, r7
 23fe83e:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fe840:	7923      	ldrb	r3, [r4, #4]
 23fe842:	b15d      	cbz	r5, 23fe85c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fe844:	b1c3      	cbz	r3, 23fe878 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fe846:	2000      	movs	r0, #0
}
 23fe848:	b00f      	add	sp, #60	; 0x3c
 23fe84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fe84e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fe852:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fe856:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fe85a:	e7f1      	b.n	23fe840 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fe85c:	2b00      	cmp	r3, #0
 23fe85e:	d135      	bne.n	23fe8cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fe860:	68a3      	ldr	r3, [r4, #8]
 23fe862:	4543      	cmp	r3, r8
 23fe864:	d108      	bne.n	23fe878 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fe866:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe86a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe86e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe872:	89a3      	ldrh	r3, [r4, #12]
 23fe874:	429a      	cmp	r2, r3
 23fe876:	d0e6      	beq.n	23fe846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fe878:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe87a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fe87c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fe880:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fe882:	ab04      	add	r3, sp, #16
 23fe884:	f10d 020f 	add.w	r2, sp, #15
 23fe888:	f7ff ffa2 	bl	23fe7d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fe88c:	7921      	ldrb	r1, [r4, #4]
 23fe88e:	b985      	cbnz	r5, 23fe8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fe890:	b989      	cbnz	r1, 23fe8b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe892:	68a3      	ldr	r3, [r4, #8]
 23fe894:	4543      	cmp	r3, r8
 23fe896:	d30e      	bcc.n	23fe8b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fe898:	f88d 9020 	strb.w	r9, [sp, #32]
 23fe89c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fe8a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fe8a4:	89a3      	ldrh	r3, [r4, #12]
 23fe8a6:	429a      	cmp	r2, r3
 23fe8a8:	d105      	bne.n	23fe8b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fe8aa:	9b04      	ldr	r3, [sp, #16]
 23fe8ac:	4543      	cmp	r3, r8
 23fe8ae:	d102      	bne.n	23fe8b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fe8b0:	e7c9      	b.n	23fe846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fe8b2:	2900      	cmp	r1, #0
 23fe8b4:	d1f9      	bne.n	23fe8aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fe8b6:	2300      	movs	r3, #0
 23fe8b8:	9301      	str	r3, [sp, #4]
 23fe8ba:	7b63      	ldrb	r3, [r4, #13]
 23fe8bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fe8c0:	9300      	str	r3, [sp, #0]
 23fe8c2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fe8c4:	7830      	ldrb	r0, [r6, #0]
 23fe8c6:	f7fe f873 	bl	23fc9b0 <hal_spi_set_settings>
 23fe8ca:	e7bc      	b.n	23fe846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fe8cc:	462b      	mov	r3, r5
 23fe8ce:	462a      	mov	r2, r5
 23fe8d0:	2101      	movs	r1, #1
 23fe8d2:	e9cd 5500 	strd	r5, r5, [sp]
 23fe8d6:	e7f5      	b.n	23fe8c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fe8d8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fe8d8:	b530      	push	{r4, r5, lr}
 23fe8da:	b087      	sub	sp, #28
 23fe8dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fe8de:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fe8e0:	9500      	str	r5, [sp, #0]
 23fe8e2:	7800      	ldrb	r0, [r0, #0]
 23fe8e4:	f7fe f848 	bl	23fc978 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fe8e8:	b93d      	cbnz	r5, 23fe8fa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fe8ea:	7820      	ldrb	r0, [r4, #0]
 23fe8ec:	a902      	add	r1, sp, #8
 23fe8ee:	f7fe f851 	bl	23fc994 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fe8f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fe8f6:	07db      	lsls	r3, r3, #31
 23fe8f8:	d4f7      	bmi.n	23fe8ea <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fe8fa:	b007      	add	sp, #28
 23fe8fc:	bd30      	pop	{r4, r5, pc}

023fe8fe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fe8fe:	b510      	push	{r4, lr}
 23fe900:	4604      	mov	r4, r0
{
	free(buffer);
 23fe902:	6800      	ldr	r0, [r0, #0]
 23fe904:	f7fe fad8 	bl	23fceb8 <free>
}
 23fe908:	4620      	mov	r0, r4
 23fe90a:	bd10      	pop	{r4, pc}

023fe90c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fe90c:	b510      	push	{r4, lr}
 23fe90e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fe910:	6800      	ldr	r0, [r0, #0]
 23fe912:	b108      	cbz	r0, 23fe918 <_ZN6String10invalidateEv+0xc>
 23fe914:	f7fe fad0 	bl	23fceb8 <free>
	buffer = NULL;
 23fe918:	2300      	movs	r3, #0
	capacity = len = 0;
 23fe91a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fe91e:	6023      	str	r3, [r4, #0]
}
 23fe920:	bd10      	pop	{r4, pc}

023fe922 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe922:	b538      	push	{r3, r4, r5, lr}
 23fe924:	4604      	mov	r4, r0
 23fe926:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe928:	6800      	ldr	r0, [r0, #0]
 23fe92a:	3101      	adds	r1, #1
 23fe92c:	f7fe fad2 	bl	23fced4 <realloc>
	if (newbuffer) {
 23fe930:	b110      	cbz	r0, 23fe938 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fe932:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fe936:	2001      	movs	r0, #1
	}
	return 0;
}
 23fe938:	bd38      	pop	{r3, r4, r5, pc}

023fe93a <_ZN6String7reserveEj>:
{
 23fe93a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fe93c:	6803      	ldr	r3, [r0, #0]
{
 23fe93e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fe940:	b123      	cbz	r3, 23fe94c <_ZN6String7reserveEj+0x12>
 23fe942:	6843      	ldr	r3, [r0, #4]
 23fe944:	428b      	cmp	r3, r1
 23fe946:	d301      	bcc.n	23fe94c <_ZN6String7reserveEj+0x12>
 23fe948:	2001      	movs	r0, #1
}
 23fe94a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fe94c:	4620      	mov	r0, r4
 23fe94e:	f7ff ffe8 	bl	23fe922 <_ZN6String12changeBufferEj>
 23fe952:	2800      	cmp	r0, #0
 23fe954:	d0f9      	beq.n	23fe94a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fe956:	68a3      	ldr	r3, [r4, #8]
 23fe958:	2b00      	cmp	r3, #0
 23fe95a:	d1f5      	bne.n	23fe948 <_ZN6String7reserveEj+0xe>
 23fe95c:	6822      	ldr	r2, [r4, #0]
 23fe95e:	7013      	strb	r3, [r2, #0]
 23fe960:	e7f2      	b.n	23fe948 <_ZN6String7reserveEj+0xe>

023fe962 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe962:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe964:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fe966:	4611      	mov	r1, r2
 23fe968:	9201      	str	r2, [sp, #4]
{
 23fe96a:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fe96c:	f7ff ffe5 	bl	23fe93a <_ZN6String7reserveEj>
 23fe970:	9a01      	ldr	r2, [sp, #4]
 23fe972:	b928      	cbnz	r0, 23fe980 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fe974:	4620      	mov	r0, r4
 23fe976:	f7ff ffc9 	bl	23fe90c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fe97a:	4620      	mov	r0, r4
 23fe97c:	b003      	add	sp, #12
 23fe97e:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fe980:	4629      	mov	r1, r5
	len = length;
 23fe982:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fe984:	6820      	ldr	r0, [r4, #0]
 23fe986:	f000 fb9e 	bl	23ff0c6 <memcpy>
	buffer[len] = 0;
 23fe98a:	2100      	movs	r1, #0
 23fe98c:	6822      	ldr	r2, [r4, #0]
 23fe98e:	68a3      	ldr	r3, [r4, #8]
 23fe990:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fe992:	e7f2      	b.n	23fe97a <_ZN6String4copyEPKcj+0x18>

023fe994 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe994:	b538      	push	{r3, r4, r5, lr}
 23fe996:	4605      	mov	r5, r0
	if (buffer) {
 23fe998:	6800      	ldr	r0, [r0, #0]
{
 23fe99a:	460c      	mov	r4, r1
	if (buffer) {
 23fe99c:	b170      	cbz	r0, 23fe9bc <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fe99e:	686a      	ldr	r2, [r5, #4]
 23fe9a0:	688b      	ldr	r3, [r1, #8]
 23fe9a2:	429a      	cmp	r2, r3
 23fe9a4:	d308      	bcc.n	23fe9b8 <_ZN6String4moveERS_+0x24>
 23fe9a6:	6809      	ldr	r1, [r1, #0]
 23fe9a8:	b131      	cbz	r1, 23fe9b8 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fe9aa:	f000 fc00 	bl	23ff1ae <strcpy>
			len = rhs.len;
 23fe9ae:	68a3      	ldr	r3, [r4, #8]
 23fe9b0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fe9b2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fe9b4:	60a3      	str	r3, [r4, #8]
}
 23fe9b6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fe9b8:	f7fe fa7e 	bl	23fceb8 <free>
	buffer = rhs.buffer;
 23fe9bc:	6823      	ldr	r3, [r4, #0]
 23fe9be:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fe9c0:	6863      	ldr	r3, [r4, #4]
 23fe9c2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fe9c4:	68a3      	ldr	r3, [r4, #8]
 23fe9c6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fe9c8:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fe9ca:	e9c4 3300 	strd	r3, r3, [r4]
 23fe9ce:	e7f1      	b.n	23fe9b4 <_ZN6String4moveERS_+0x20>

023fe9d0 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fe9d0:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe9d2:	b510      	push	{r4, lr}
 23fe9d4:	4604      	mov	r4, r0
	capacity = 0;
 23fe9d6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fe9da:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fe9dc:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fe9de:	f7ff ffd9 	bl	23fe994 <_ZN6String4moveERS_>
}
 23fe9e2:	4620      	mov	r0, r4
 23fe9e4:	bd10      	pop	{r4, pc}

023fe9e6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fe9e6:	4288      	cmp	r0, r1
{
 23fe9e8:	b510      	push	{r4, lr}
 23fe9ea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fe9ec:	d005      	beq.n	23fe9fa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fe9ee:	680b      	ldr	r3, [r1, #0]
 23fe9f0:	b12b      	cbz	r3, 23fe9fe <_ZN6StringaSERKS_+0x18>
 23fe9f2:	688a      	ldr	r2, [r1, #8]
 23fe9f4:	4619      	mov	r1, r3
 23fe9f6:	f7ff ffb4 	bl	23fe962 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fe9fa:	4620      	mov	r0, r4
 23fe9fc:	bd10      	pop	{r4, pc}
	else invalidate();
 23fe9fe:	f7ff ff85 	bl	23fe90c <_ZN6String10invalidateEv>
 23fea02:	e7fa      	b.n	23fe9fa <_ZN6StringaSERKS_+0x14>

023fea04 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fea04:	2300      	movs	r3, #0
String::String(const String &value)
 23fea06:	b510      	push	{r4, lr}
 23fea08:	4604      	mov	r4, r0
	capacity = 0;
 23fea0a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fea0e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fea10:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fea12:	f7ff ffe8 	bl	23fe9e6 <_ZN6StringaSERKS_>
}
 23fea16:	4620      	mov	r0, r4
 23fea18:	bd10      	pop	{r4, pc}
	...

023fea1c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fea1c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fea1e:	2000      	movs	r0, #0
 23fea20:	4b04      	ldr	r3, [pc, #16]	; (23fea34 <_GLOBAL__sub_I_System+0x18>)
 23fea22:	601a      	str	r2, [r3, #0]
 23fea24:	4b04      	ldr	r3, [pc, #16]	; (23fea38 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fea26:	4a05      	ldr	r2, [pc, #20]	; (23fea3c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fea28:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fea2c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fea2e:	f7fe b92b 	b.w	23fcc88 <set_system_mode>
 23fea32:	bf00      	nop
 23fea34:	1007aec0 	.word	0x1007aec0
 23fea38:	1007aeb4 	.word	0x1007aeb4
 23fea3c:	ffff0000 	.word	0xffff0000

023fea40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fea40:	4b02      	ldr	r3, [pc, #8]	; (23fea4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fea42:	681a      	ldr	r2, [r3, #0]
 23fea44:	4b02      	ldr	r3, [pc, #8]	; (23fea50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fea46:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fea48:	4770      	bx	lr
 23fea4a:	bf00      	nop
 23fea4c:	1007a9b0 	.word	0x1007a9b0
 23fea50:	1007aec4 	.word	0x1007aec4

023fea54 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fea54:	4770      	bx	lr

023fea56 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fea56:	7441      	strb	r1, [r0, #17]
}
 23fea58:	4770      	bx	lr

023fea5a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fea5a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fea5c:	7c00      	ldrb	r0, [r0, #16]
 23fea5e:	f7fe f833 	bl	23fcac8 <hal_usart_available_data_for_write>
}
 23fea62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fea66:	bd08      	pop	{r3, pc}

023fea68 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fea68:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fea6a:	7c00      	ldrb	r0, [r0, #16]
 23fea6c:	f7fd ffe6 	bl	23fca3c <hal_usart_available>
}
 23fea70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fea74:	bd08      	pop	{r3, pc}

023fea76 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fea76:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fea78:	7c00      	ldrb	r0, [r0, #16]
 23fea7a:	f7fd fffb 	bl	23fca74 <hal_usart_peek>
}
 23fea7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fea82:	bd08      	pop	{r3, pc}

023fea84 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fea84:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fea86:	7c00      	ldrb	r0, [r0, #16]
 23fea88:	f7fd ffe6 	bl	23fca58 <hal_usart_read>
}
 23fea8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fea90:	bd08      	pop	{r3, pc}

023fea92 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fea92:	7c00      	ldrb	r0, [r0, #16]
 23fea94:	f7fd bffc 	b.w	23fca90 <hal_usart_flush>

023fea98 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fea98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fea9a:	7c45      	ldrb	r5, [r0, #17]
{
 23fea9c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fea9e:	b12d      	cbz	r5, 23feaac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23feaa0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23feaa2:	b003      	add	sp, #12
 23feaa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23feaa8:	f7fd bfba 	b.w	23fca20 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feaac:	7c00      	ldrb	r0, [r0, #16]
 23feaae:	9101      	str	r1, [sp, #4]
 23feab0:	f7fe f80a 	bl	23fcac8 <hal_usart_available_data_for_write>
 23feab4:	2800      	cmp	r0, #0
 23feab6:	9901      	ldr	r1, [sp, #4]
 23feab8:	dcf2      	bgt.n	23feaa0 <_ZN11USARTSerial5writeEh+0x8>
}
 23feaba:	4628      	mov	r0, r5
 23feabc:	b003      	add	sp, #12
 23feabe:	bd30      	pop	{r4, r5, pc}

023feac0 <_ZN11USARTSerialD0Ev>:
 23feac0:	b510      	push	{r4, lr}
 23feac2:	4604      	mov	r4, r0
 23feac4:	2114      	movs	r1, #20
 23feac6:	f7fd fb1e 	bl	23fc106 <_ZdlPvj>
 23feaca:	4620      	mov	r0, r4
 23feacc:	bd10      	pop	{r4, pc}
	...

023fead0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fead0:	b510      	push	{r4, lr}
 23fead2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fead6:	4604      	mov	r4, r0
 23fead8:	4608      	mov	r0, r1
 23feada:	4611      	mov	r1, r2
 23feadc:	2200      	movs	r2, #0
 23feade:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feae2:	4b04      	ldr	r3, [pc, #16]	; (23feaf4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23feae4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feae6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feae8:	2301      	movs	r3, #1
 23feaea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feaec:	f7fe f808 	bl	23fcb00 <hal_usart_init_ex>
}
 23feaf0:	4620      	mov	r0, r4
 23feaf2:	bd10      	pop	{r4, pc}
 23feaf4:	023ffd68 	.word	0x023ffd68

023feaf8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23feaf8:	2300      	movs	r3, #0
 23feafa:	7c00      	ldrb	r0, [r0, #16]
 23feafc:	f7fd bff2 	b.w	23fcae4 <hal_usart_begin_config>

023feb00 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23feb00:	2200      	movs	r2, #0
 23feb02:	f7ff bff9 	b.w	23feaf8 <_ZN11USARTSerial5beginEmm>

023feb06 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23feb06:	7c00      	ldrb	r0, [r0, #16]
 23feb08:	f7fd bf7c 	b.w	23fca04 <hal_usart_end>

023feb0c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23feb0c:	7c00      	ldrb	r0, [r0, #16]
 23feb0e:	f7fd bfcd 	b.w	23fcaac <hal_usart_is_enabled>

023feb12 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feb12:	7441      	strb	r1, [r0, #17]
}
 23feb14:	4770      	bx	lr

023feb16 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23feb16:	4770      	bx	lr

023feb18 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23feb18:	4770      	bx	lr

023feb1a <_ZN9USBSerial4readEv>:
{
 23feb1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23feb1c:	2100      	movs	r1, #0
 23feb1e:	7c00      	ldrb	r0, [r0, #16]
 23feb20:	f7fe f842 	bl	23fcba8 <HAL_USB_USART_Receive_Data>
}
 23feb24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feb28:	bd08      	pop	{r3, pc}

023feb2a <_ZN9USBSerial4peekEv>:
{
 23feb2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23feb2c:	2101      	movs	r1, #1
 23feb2e:	7c00      	ldrb	r0, [r0, #16]
 23feb30:	f7fe f83a 	bl	23fcba8 <HAL_USB_USART_Receive_Data>
}
 23feb34:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feb38:	bd08      	pop	{r3, pc}

023feb3a <_ZN9USBSerial17availableForWriteEv>:
{
 23feb3a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23feb3c:	7c00      	ldrb	r0, [r0, #16]
 23feb3e:	f7fe f825 	bl	23fcb8c <HAL_USB_USART_Available_Data_For_Write>
}
 23feb42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23feb46:	bd08      	pop	{r3, pc}

023feb48 <_ZN9USBSerial9availableEv>:
{
 23feb48:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23feb4a:	7c00      	ldrb	r0, [r0, #16]
 23feb4c:	f7fe f810 	bl	23fcb70 <HAL_USB_USART_Available_Data>
}
 23feb50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23feb54:	bd08      	pop	{r3, pc}

023feb56 <_ZN9USBSerial5writeEh>:
{
 23feb56:	b513      	push	{r0, r1, r4, lr}
 23feb58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23feb5a:	7c00      	ldrb	r0, [r0, #16]
{
 23feb5c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23feb5e:	f7fe f815 	bl	23fcb8c <HAL_USB_USART_Available_Data_For_Write>
 23feb62:	2800      	cmp	r0, #0
 23feb64:	9901      	ldr	r1, [sp, #4]
 23feb66:	dc01      	bgt.n	23feb6c <_ZN9USBSerial5writeEh+0x16>
 23feb68:	7c60      	ldrb	r0, [r4, #17]
 23feb6a:	b120      	cbz	r0, 23feb76 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23feb6c:	7c20      	ldrb	r0, [r4, #16]
 23feb6e:	f7fe f829 	bl	23fcbc4 <HAL_USB_USART_Send_Data>
 23feb72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23feb76:	b002      	add	sp, #8
 23feb78:	bd10      	pop	{r4, pc}

023feb7a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23feb7a:	7c00      	ldrb	r0, [r0, #16]
 23feb7c:	f7fe b830 	b.w	23fcbe0 <HAL_USB_USART_Flush_Data>

023feb80 <_ZN9USBSerialD0Ev>:
 23feb80:	b510      	push	{r4, lr}
 23feb82:	4604      	mov	r4, r0
 23feb84:	2114      	movs	r1, #20
 23feb86:	f7fd fabe 	bl	23fc106 <_ZdlPvj>
 23feb8a:	4620      	mov	r0, r4
 23feb8c:	bd10      	pop	{r4, pc}
	...

023feb90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23feb90:	b510      	push	{r4, lr}
 23feb92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feb96:	4604      	mov	r4, r0
 23feb98:	4608      	mov	r0, r1
 23feb9a:	2100      	movs	r1, #0
 23feb9c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23feba0:	4b04      	ldr	r3, [pc, #16]	; (23febb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23feba2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23feba4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feba6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23feba8:	4611      	mov	r1, r2
  _blocking = true;
 23febaa:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23febac:	f7fd ffb6 	bl	23fcb1c <HAL_USB_USART_Init>
}
 23febb0:	4620      	mov	r0, r4
 23febb2:	bd10      	pop	{r4, pc}
 23febb4:	023ffd98 	.word	0x023ffd98

023febb8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23febb8:	2200      	movs	r2, #0
 23febba:	7c00      	ldrb	r0, [r0, #16]
 23febbc:	f7fd bfbc 	b.w	23fcb38 <HAL_USB_USART_Begin>

023febc0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23febc0:	7c00      	ldrb	r0, [r0, #16]
 23febc2:	f7fd bfc7 	b.w	23fcb54 <HAL_USB_USART_End>

023febc6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23febc6:	7c00      	ldrb	r0, [r0, #16]
 23febc8:	f7fe b818 	b.w	23fcbfc <HAL_USB_USART_Is_Connected>

023febcc <_Z19acquireSerialBufferv>:
{
 23febcc:	b510      	push	{r4, lr}
 23febce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23febd0:	2214      	movs	r2, #20
 23febd2:	2100      	movs	r1, #0
 23febd4:	f000 fa9e 	bl	23ff114 <memset>
}
 23febd8:	4620      	mov	r0, r4
 23febda:	bd10      	pop	{r4, pc}

023febdc <_Z16_fetch_usbserialv>:
{
 23febdc:	b510      	push	{r4, lr}
 23febde:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23febe0:	a803      	add	r0, sp, #12
 23febe2:	f7ff fff3 	bl	23febcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23febe6:	4c0c      	ldr	r4, [pc, #48]	; (23fec18 <_Z16_fetch_usbserialv+0x3c>)
 23febe8:	e8d4 1f8f 	ldab	r1, [r4]
 23febec:	f011 0101 	ands.w	r1, r1, #1
 23febf0:	d10f      	bne.n	23fec12 <_Z16_fetch_usbserialv+0x36>
 23febf2:	4620      	mov	r0, r4
 23febf4:	9101      	str	r1, [sp, #4]
 23febf6:	f7fd fa95 	bl	23fc124 <__cxa_guard_acquire>
 23febfa:	9901      	ldr	r1, [sp, #4]
 23febfc:	b148      	cbz	r0, 23fec12 <_Z16_fetch_usbserialv+0x36>
 23febfe:	aa03      	add	r2, sp, #12
 23fec00:	4806      	ldr	r0, [pc, #24]	; (23fec1c <_Z16_fetch_usbserialv+0x40>)
 23fec02:	f7ff ffc5 	bl	23feb90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fec06:	4620      	mov	r0, r4
 23fec08:	f7fd fa91 	bl	23fc12e <__cxa_guard_release>
 23fec0c:	4804      	ldr	r0, [pc, #16]	; (23fec20 <_Z16_fetch_usbserialv+0x44>)
 23fec0e:	f000 fa49 	bl	23ff0a4 <atexit>
	return _usbserial;
}
 23fec12:	4802      	ldr	r0, [pc, #8]	; (23fec1c <_Z16_fetch_usbserialv+0x40>)
 23fec14:	b008      	add	sp, #32
 23fec16:	bd10      	pop	{r4, pc}
 23fec18:	1007aec8 	.word	0x1007aec8
 23fec1c:	1007aecc 	.word	0x1007aecc
 23fec20:	023feb17 	.word	0x023feb17

023fec24 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fec24:	2200      	movs	r2, #0
 23fec26:	6840      	ldr	r0, [r0, #4]
 23fec28:	4611      	mov	r1, r2
 23fec2a:	f7fe b8b9 	b.w	23fcda0 <network_ready>

023fec2e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fec2e:	2200      	movs	r2, #0
 23fec30:	6840      	ldr	r0, [r0, #4]
 23fec32:	4611      	mov	r1, r2
 23fec34:	f7fe b8ec 	b.w	23fce10 <network_listening>

023fec38 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fec38:	2200      	movs	r2, #0
 23fec3a:	6840      	ldr	r0, [r0, #4]
 23fec3c:	4611      	mov	r1, r2
 23fec3e:	f7fe b903 	b.w	23fce48 <network_get_listen_timeout>

023fec42 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fec42:	2200      	movs	r2, #0
 23fec44:	6840      	ldr	r0, [r0, #4]
 23fec46:	f7fe b8f1 	b.w	23fce2c <network_set_listen_timeout>

023fec4a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fec4a:	2200      	movs	r2, #0
 23fec4c:	6840      	ldr	r0, [r0, #4]
 23fec4e:	f081 0101 	eor.w	r1, r1, #1
 23fec52:	f7fe b8cf 	b.w	23fcdf4 <network_listen>

023fec56 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fec56:	2300      	movs	r3, #0
 23fec58:	6840      	ldr	r0, [r0, #4]
 23fec5a:	461a      	mov	r2, r3
 23fec5c:	4619      	mov	r1, r3
 23fec5e:	f7fe b8bb 	b.w	23fcdd8 <network_off>

023fec62 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fec62:	2300      	movs	r3, #0
 23fec64:	6840      	ldr	r0, [r0, #4]
 23fec66:	461a      	mov	r2, r3
 23fec68:	4619      	mov	r1, r3
 23fec6a:	f7fe b8a7 	b.w	23fcdbc <network_on>

023fec6e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fec6e:	2200      	movs	r2, #0
 23fec70:	6840      	ldr	r0, [r0, #4]
 23fec72:	4611      	mov	r1, r2
 23fec74:	f7fe b878 	b.w	23fcd68 <network_connecting>

023fec78 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fec78:	2200      	movs	r2, #0
 23fec7a:	2102      	movs	r1, #2
 23fec7c:	6840      	ldr	r0, [r0, #4]
 23fec7e:	f7fe b881 	b.w	23fcd84 <network_disconnect>

023fec82 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fec82:	2300      	movs	r3, #0
 23fec84:	6840      	ldr	r0, [r0, #4]
 23fec86:	461a      	mov	r2, r3
 23fec88:	f7fe b860 	b.w	23fcd4c <network_connect>

023fec8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fec8c:	2204      	movs	r2, #4
 23fec8e:	4b02      	ldr	r3, [pc, #8]	; (23fec98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fec90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fec92:	4a02      	ldr	r2, [pc, #8]	; (23fec9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fec94:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fec96:	4770      	bx	lr
 23fec98:	1007aee0 	.word	0x1007aee0
 23fec9c:	023ffdc8 	.word	0x023ffdc8

023feca0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23feca0:	4b01      	ldr	r3, [pc, #4]	; (23feca8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23feca2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23feca4:	4770      	bx	lr
 23feca6:	bf00      	nop
 23feca8:	1007a9b4 	.word	0x1007a9b4

023fecac <serialEventRun>:
{
 23fecac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fecae:	4b0f      	ldr	r3, [pc, #60]	; (23fecec <serialEventRun+0x40>)
 23fecb0:	b143      	cbz	r3, 23fecc4 <serialEventRun+0x18>
 23fecb2:	f7ff ff93 	bl	23febdc <_Z16_fetch_usbserialv>
 23fecb6:	6803      	ldr	r3, [r0, #0]
 23fecb8:	691b      	ldr	r3, [r3, #16]
 23fecba:	4798      	blx	r3
 23fecbc:	2800      	cmp	r0, #0
 23fecbe:	dd01      	ble.n	23fecc4 <serialEventRun+0x18>
        serialEvent();
 23fecc0:	e000      	b.n	23fecc4 <serialEventRun+0x18>
 23fecc2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fecc4:	4b0a      	ldr	r3, [pc, #40]	; (23fecf0 <serialEventRun+0x44>)
 23fecc6:	b143      	cbz	r3, 23fecda <serialEventRun+0x2e>
 23fecc8:	f000 f958 	bl	23fef7c <_Z22__fetch_global_Serial1v>
 23feccc:	6803      	ldr	r3, [r0, #0]
 23fecce:	691b      	ldr	r3, [r3, #16]
 23fecd0:	4798      	blx	r3
 23fecd2:	2800      	cmp	r0, #0
 23fecd4:	dd01      	ble.n	23fecda <serialEventRun+0x2e>
        serialEvent1();
 23fecd6:	e000      	b.n	23fecda <serialEventRun+0x2e>
 23fecd8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fecda:	4b06      	ldr	r3, [pc, #24]	; (23fecf4 <serialEventRun+0x48>)
 23fecdc:	b10b      	cbz	r3, 23fece2 <serialEventRun+0x36>
 23fecde:	f000 f993 	bl	23ff008 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fece2:	4b05      	ldr	r3, [pc, #20]	; (23fecf8 <serialEventRun+0x4c>)
 23fece4:	b10b      	cbz	r3, 23fecea <serialEventRun+0x3e>
 23fece6:	f000 f9c5 	bl	23ff074 <_Z15serialEventRun3v>
}
 23fecea:	bd08      	pop	{r3, pc}
	...

023fecfc <_post_loop>:
{
 23fecfc:	b508      	push	{r3, lr}
	serialEventRun();
 23fecfe:	f7ff ffd5 	bl	23fecac <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fed02:	f7fd fd3d 	bl	23fc780 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fed06:	4b01      	ldr	r3, [pc, #4]	; (23fed0c <_post_loop+0x10>)
 23fed08:	6018      	str	r0, [r3, #0]
}
 23fed0a:	bd08      	pop	{r3, pc}
 23fed0c:	1007aef0 	.word	0x1007aef0

023fed10 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fed10:	4805      	ldr	r0, [pc, #20]	; (23fed28 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fed12:	4a06      	ldr	r2, [pc, #24]	; (23fed2c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fed14:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fed16:	1a12      	subs	r2, r2, r0
 23fed18:	4905      	ldr	r1, [pc, #20]	; (23fed30 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fed1a:	f000 f9d4 	bl	23ff0c6 <memcpy>
    __backup_sram_signature = signature;
 23fed1e:	4b05      	ldr	r3, [pc, #20]	; (23fed34 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fed20:	4a05      	ldr	r2, [pc, #20]	; (23fed38 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fed22:	601a      	str	r2, [r3, #0]
}
 23fed24:	bd08      	pop	{r3, pc}
 23fed26:	bf00      	nop
 23fed28:	1007b400 	.word	0x1007b400
 23fed2c:	1007b404 	.word	0x1007b404
 23fed30:	085ff18c 	.word	0x085ff18c
 23fed34:	1007b400 	.word	0x1007b400
 23fed38:	9a271c1e 	.word	0x9a271c1e

023fed3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fed3c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fed3e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fed40:	461a      	mov	r2, r3
 23fed42:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fed46:	9300      	str	r3, [sp, #0]
 23fed48:	f7fd ffd6 	bl	23fccf8 <system_ctrl_set_result>
}
 23fed4c:	b003      	add	sp, #12
 23fed4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fed54 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fed54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fed56:	8843      	ldrh	r3, [r0, #2]
 23fed58:	2b0a      	cmp	r3, #10
 23fed5a:	d008      	beq.n	23fed6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fed5c:	2b50      	cmp	r3, #80	; 0x50
 23fed5e:	d10b      	bne.n	23fed78 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fed60:	4b09      	ldr	r3, [pc, #36]	; (23fed88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fed62:	681b      	ldr	r3, [r3, #0]
 23fed64:	b14b      	cbz	r3, 23fed7a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fed66:	b003      	add	sp, #12
 23fed68:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fed6c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fed6e:	f7ff ffe5 	bl	23fed3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fed72:	b003      	add	sp, #12
 23fed74:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fed78:	2300      	movs	r3, #0
 23fed7a:	461a      	mov	r2, r3
 23fed7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fed80:	9300      	str	r3, [sp, #0]
 23fed82:	f7fd ffb9 	bl	23fccf8 <system_ctrl_set_result>
}
 23fed86:	e7f4      	b.n	23fed72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fed88:	1007aeec 	.word	0x1007aeec

023fed8c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fed8c:	2100      	movs	r1, #0
{
 23fed8e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fed90:	4811      	ldr	r0, [pc, #68]	; (23fedd8 <module_user_init_hook+0x4c>)
 23fed92:	f7fe f8d7 	bl	23fcf44 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fed96:	4b11      	ldr	r3, [pc, #68]	; (23feddc <module_user_init_hook+0x50>)
 23fed98:	681a      	ldr	r2, [r3, #0]
 23fed9a:	4b11      	ldr	r3, [pc, #68]	; (23fede0 <module_user_init_hook+0x54>)
 23fed9c:	429a      	cmp	r2, r3
 23fed9e:	bf0c      	ite	eq
 23feda0:	2201      	moveq	r2, #1
 23feda2:	2200      	movne	r2, #0
 23feda4:	4b0f      	ldr	r3, [pc, #60]	; (23fede4 <module_user_init_hook+0x58>)
 23feda6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23feda8:	d001      	beq.n	23fedae <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fedaa:	f7ff ffb1 	bl	23fed10 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fedae:	f7fd fccb 	bl	23fc748 <HAL_RNG_GetRandomNumber>
 23fedb2:	4604      	mov	r4, r0
    srand(seed);
 23fedb4:	f000 f9b6 	bl	23ff124 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fedb8:	4b0b      	ldr	r3, [pc, #44]	; (23fede8 <module_user_init_hook+0x5c>)
 23fedba:	b113      	cbz	r3, 23fedc2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fedbc:	4620      	mov	r0, r4
 23fedbe:	e000      	b.n	23fedc2 <module_user_init_hook+0x36>
 23fedc0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fedc2:	2100      	movs	r1, #0
 23fedc4:	4808      	ldr	r0, [pc, #32]	; (23fede8 <module_user_init_hook+0x5c>)
 23fedc6:	f7fd ffb3 	bl	23fcd30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fedca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fedce:	2100      	movs	r1, #0
 23fedd0:	4806      	ldr	r0, [pc, #24]	; (23fedec <module_user_init_hook+0x60>)
 23fedd2:	f7fd bf83 	b.w	23fccdc <system_ctrl_set_app_request_handler>
 23fedd6:	bf00      	nop
 23fedd8:	023feca1 	.word	0x023feca1
 23feddc:	1007b400 	.word	0x1007b400
 23fede0:	9a271c1e 	.word	0x9a271c1e
 23fede4:	1007aee8 	.word	0x1007aee8
 23fede8:	00000000 	.word	0x00000000
 23fedec:	023fed55 	.word	0x023fed55

023fedf0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fedf0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fedf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fedf4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fedf6:	d902      	bls.n	23fedfe <pinAvailable+0xe>
    return false;
 23fedf8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fedfa:	b003      	add	sp, #12
 23fedfc:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fedfe:	f1a0 030f 	sub.w	r3, r0, #15
 23fee02:	2b02      	cmp	r3, #2
 23fee04:	d90b      	bls.n	23fee1e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fee06:	2801      	cmp	r0, #1
 23fee08:	d821      	bhi.n	23fee4e <pinAvailable+0x5e>
 23fee0a:	f000 f863 	bl	23feed4 <_Z19__fetch_global_Wirev>
 23fee0e:	2100      	movs	r1, #0
 23fee10:	7c00      	ldrb	r0, [r0, #16]
 23fee12:	f7fd fd33 	bl	23fc87c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fee16:	f080 0001 	eor.w	r0, r0, #1
 23fee1a:	b2c0      	uxtb	r0, r0
 23fee1c:	e7ed      	b.n	23fedfa <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fee1e:	4d11      	ldr	r5, [pc, #68]	; (23fee64 <pinAvailable+0x74>)
 23fee20:	e8d5 1f8f 	ldab	r1, [r5]
 23fee24:	f011 0101 	ands.w	r1, r1, #1
 23fee28:	d10b      	bne.n	23fee42 <pinAvailable+0x52>
 23fee2a:	4628      	mov	r0, r5
 23fee2c:	9101      	str	r1, [sp, #4]
 23fee2e:	f7fd f979 	bl	23fc124 <__cxa_guard_acquire>
 23fee32:	9901      	ldr	r1, [sp, #4]
 23fee34:	b128      	cbz	r0, 23fee42 <pinAvailable+0x52>
 23fee36:	480c      	ldr	r0, [pc, #48]	; (23fee68 <pinAvailable+0x78>)
 23fee38:	f7ff fca8 	bl	23fe78c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fee3c:	4628      	mov	r0, r5
 23fee3e:	f7fd f976 	bl	23fc12e <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fee42:	4b09      	ldr	r3, [pc, #36]	; (23fee68 <pinAvailable+0x78>)
 23fee44:	7818      	ldrb	r0, [r3, #0]
 23fee46:	f7fd fd7b 	bl	23fc940 <hal_spi_is_enabled>
 23fee4a:	2800      	cmp	r0, #0
 23fee4c:	d1d4      	bne.n	23fedf8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fee4e:	3c08      	subs	r4, #8
 23fee50:	2c01      	cmp	r4, #1
 23fee52:	d805      	bhi.n	23fee60 <pinAvailable+0x70>
 23fee54:	f000 f892 	bl	23fef7c <_Z22__fetch_global_Serial1v>
 23fee58:	7c00      	ldrb	r0, [r0, #16]
 23fee5a:	f7fd fe27 	bl	23fcaac <hal_usart_is_enabled>
 23fee5e:	e7da      	b.n	23fee16 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fee60:	2001      	movs	r0, #1
 23fee62:	e7ca      	b.n	23fedfa <pinAvailable+0xa>
 23fee64:	1007aa1c 	.word	0x1007aa1c
 23fee68:	1007aa20 	.word	0x1007aa20

023fee6c <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fee6c:	b538      	push	{r3, r4, r5, lr}
 23fee6e:	4604      	mov	r4, r0
 23fee70:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fee72:	f7fd fca1 	bl	23fc7b8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fee76:	28ff      	cmp	r0, #255	; 0xff
 23fee78:	d010      	beq.n	23fee9c <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fee7a:	2806      	cmp	r0, #6
 23fee7c:	d804      	bhi.n	23fee88 <digitalWrite+0x1c>
 23fee7e:	234d      	movs	r3, #77	; 0x4d
 23fee80:	fa23 f000 	lsr.w	r0, r3, r0
 23fee84:	07c3      	lsls	r3, r0, #31
 23fee86:	d409      	bmi.n	23fee9c <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fee88:	4620      	mov	r0, r4
 23fee8a:	f7ff ffb1 	bl	23fedf0 <pinAvailable>
 23fee8e:	b128      	cbz	r0, 23fee9c <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fee90:	4629      	mov	r1, r5
 23fee92:	4620      	mov	r0, r4
}
 23fee94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fee98:	f7fd bc9c 	b.w	23fc7d4 <hal_gpio_write>
}
 23fee9c:	bd38      	pop	{r3, r4, r5, pc}

023fee9e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fee9e:	4770      	bx	lr

023feea0 <_Z17acquireWireBufferv>:
{
 23feea0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23feea2:	4b0a      	ldr	r3, [pc, #40]	; (23feecc <_Z17acquireWireBufferv+0x2c>)
{
 23feea4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23feea6:	6003      	str	r3, [r0, #0]
 23feea8:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feeaa:	4909      	ldr	r1, [pc, #36]	; (23feed0 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23feeac:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feeae:	2020      	movs	r0, #32
 23feeb0:	f000 f8f6 	bl	23ff0a0 <_ZnajRKSt9nothrow_t>
	};
 23feeb4:	2520      	movs	r5, #32
 23feeb6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feeb8:	4905      	ldr	r1, [pc, #20]	; (23feed0 <_Z17acquireWireBufferv+0x30>)
 23feeba:	4628      	mov	r0, r5
	};
 23feebc:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feebe:	f000 f8ef 	bl	23ff0a0 <_ZnajRKSt9nothrow_t>
	};
 23feec2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23feec6:	4620      	mov	r0, r4
 23feec8:	bd38      	pop	{r3, r4, r5, pc}
 23feeca:	bf00      	nop
 23feecc:	00010018 	.word	0x00010018
 23feed0:	023ffdfc 	.word	0x023ffdfc

023feed4 <_Z19__fetch_global_Wirev>:
{
 23feed4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feed6:	4d0e      	ldr	r5, [pc, #56]	; (23fef10 <_Z19__fetch_global_Wirev+0x3c>)
{
 23feed8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feeda:	e8d5 1f8f 	ldab	r1, [r5]
 23feede:	f011 0401 	ands.w	r4, r1, #1
 23feee2:	d111      	bne.n	23fef08 <_Z19__fetch_global_Wirev+0x34>
 23feee4:	4628      	mov	r0, r5
 23feee6:	f7fd f91d 	bl	23fc124 <__cxa_guard_acquire>
 23feeea:	b168      	cbz	r0, 23fef08 <_Z19__fetch_global_Wirev+0x34>
 23feeec:	4668      	mov	r0, sp
 23feeee:	f7ff ffd7 	bl	23feea0 <_Z17acquireWireBufferv>
 23feef2:	466a      	mov	r2, sp
 23feef4:	4621      	mov	r1, r4
 23feef6:	4807      	ldr	r0, [pc, #28]	; (23fef14 <_Z19__fetch_global_Wirev+0x40>)
 23feef8:	f7fe f8d6 	bl	23fd0a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23feefc:	4628      	mov	r0, r5
 23feefe:	f7fd f916 	bl	23fc12e <__cxa_guard_release>
 23fef02:	4805      	ldr	r0, [pc, #20]	; (23fef18 <_Z19__fetch_global_Wirev+0x44>)
 23fef04:	f000 f8ce 	bl	23ff0a4 <atexit>
	return wire;
}
 23fef08:	4802      	ldr	r0, [pc, #8]	; (23fef14 <_Z19__fetch_global_Wirev+0x40>)
 23fef0a:	b007      	add	sp, #28
 23fef0c:	bd30      	pop	{r4, r5, pc}
 23fef0e:	bf00      	nop
 23fef10:	1007aef4 	.word	0x1007aef4
 23fef14:	1007aef8 	.word	0x1007aef8
 23fef18:	023fee9f 	.word	0x023fee9f

023fef1c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fef1c:	4770      	bx	lr
	...

023fef20 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fef20:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fef22:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fef24:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fef26:	462a      	mov	r2, r5
 23fef28:	2100      	movs	r1, #0
 23fef2a:	f000 f8f3 	bl	23ff114 <memset>
 23fef2e:	8025      	strh	r5, [r4, #0]
 23fef30:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fef32:	4907      	ldr	r1, [pc, #28]	; (23fef50 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fef34:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fef36:	8125      	strh	r5, [r4, #8]
 23fef38:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fef3a:	f000 f8b1 	bl	23ff0a0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fef3e:	4904      	ldr	r1, [pc, #16]	; (23fef50 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fef40:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fef42:	4628      	mov	r0, r5
 23fef44:	f000 f8ac 	bl	23ff0a0 <_ZnajRKSt9nothrow_t>
    };
 23fef48:	60e0      	str	r0, [r4, #12]
}
 23fef4a:	4620      	mov	r0, r4
 23fef4c:	bd38      	pop	{r3, r4, r5, pc}
 23fef4e:	bf00      	nop
 23fef50:	023ffdfc 	.word	0x023ffdfc

023fef54 <__tcf_2>:
 23fef54:	4770      	bx	lr

023fef56 <__tcf_1>:
 23fef56:	4770      	bx	lr

023fef58 <_Z20acquireSerial1Bufferv>:
{
 23fef58:	b510      	push	{r4, lr}
 23fef5a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fef5c:	f7ff ffe0 	bl	23fef20 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fef60:	4620      	mov	r0, r4
 23fef62:	bd10      	pop	{r4, pc}

023fef64 <_Z20acquireSerial2Bufferv>:
 23fef64:	b510      	push	{r4, lr}
 23fef66:	4604      	mov	r4, r0
 23fef68:	f7ff ffda 	bl	23fef20 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fef6c:	4620      	mov	r0, r4
 23fef6e:	bd10      	pop	{r4, pc}

023fef70 <_Z20acquireSerial3Bufferv>:
 23fef70:	b510      	push	{r4, lr}
 23fef72:	4604      	mov	r4, r0
 23fef74:	f7ff ffd4 	bl	23fef20 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fef78:	4620      	mov	r0, r4
 23fef7a:	bd10      	pop	{r4, pc}

023fef7c <_Z22__fetch_global_Serial1v>:
{
 23fef7c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fef7e:	4d0e      	ldr	r5, [pc, #56]	; (23fefb8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fef80:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fef82:	e8d5 1f8f 	ldab	r1, [r5]
 23fef86:	f011 0401 	ands.w	r4, r1, #1
 23fef8a:	d111      	bne.n	23fefb0 <_Z22__fetch_global_Serial1v+0x34>
 23fef8c:	4628      	mov	r0, r5
 23fef8e:	f7fd f8c9 	bl	23fc124 <__cxa_guard_acquire>
 23fef92:	b168      	cbz	r0, 23fefb0 <_Z22__fetch_global_Serial1v+0x34>
 23fef94:	a801      	add	r0, sp, #4
 23fef96:	f7ff ffdf 	bl	23fef58 <_Z20acquireSerial1Bufferv>
 23fef9a:	4621      	mov	r1, r4
 23fef9c:	aa01      	add	r2, sp, #4
 23fef9e:	4807      	ldr	r0, [pc, #28]	; (23fefbc <_Z22__fetch_global_Serial1v+0x40>)
 23fefa0:	f7ff fd96 	bl	23fead0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fefa4:	4628      	mov	r0, r5
 23fefa6:	f7fd f8c2 	bl	23fc12e <__cxa_guard_release>
 23fefaa:	4805      	ldr	r0, [pc, #20]	; (23fefc0 <_Z22__fetch_global_Serial1v+0x44>)
 23fefac:	f000 f87a 	bl	23ff0a4 <atexit>
    return serial1;
}
 23fefb0:	4802      	ldr	r0, [pc, #8]	; (23fefbc <_Z22__fetch_global_Serial1v+0x40>)
 23fefb2:	b007      	add	sp, #28
 23fefb4:	bd30      	pop	{r4, r5, pc}
 23fefb6:	bf00      	nop
 23fefb8:	1007af0c 	.word	0x1007af0c
 23fefbc:	1007af18 	.word	0x1007af18
 23fefc0:	023fef1d 	.word	0x023fef1d

023fefc4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fefc4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fefc6:	4c0d      	ldr	r4, [pc, #52]	; (23feffc <_Z22__fetch_global_Serial2v+0x38>)
{
 23fefc8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fefca:	e8d4 3f8f 	ldab	r3, [r4]
 23fefce:	07db      	lsls	r3, r3, #31
 23fefd0:	d411      	bmi.n	23feff6 <_Z22__fetch_global_Serial2v+0x32>
 23fefd2:	4620      	mov	r0, r4
 23fefd4:	f7fd f8a6 	bl	23fc124 <__cxa_guard_acquire>
 23fefd8:	b168      	cbz	r0, 23feff6 <_Z22__fetch_global_Serial2v+0x32>
 23fefda:	a801      	add	r0, sp, #4
 23fefdc:	f7ff ffc2 	bl	23fef64 <_Z20acquireSerial2Bufferv>
 23fefe0:	2101      	movs	r1, #1
 23fefe2:	aa01      	add	r2, sp, #4
 23fefe4:	4806      	ldr	r0, [pc, #24]	; (23ff000 <_Z22__fetch_global_Serial2v+0x3c>)
 23fefe6:	f7ff fd73 	bl	23fead0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fefea:	4620      	mov	r0, r4
 23fefec:	f7fd f89f 	bl	23fc12e <__cxa_guard_release>
 23feff0:	4804      	ldr	r0, [pc, #16]	; (23ff004 <_Z22__fetch_global_Serial2v+0x40>)
 23feff2:	f000 f857 	bl	23ff0a4 <atexit>
	return serial2;
}
 23feff6:	4802      	ldr	r0, [pc, #8]	; (23ff000 <_Z22__fetch_global_Serial2v+0x3c>)
 23feff8:	b006      	add	sp, #24
 23feffa:	bd10      	pop	{r4, pc}
 23feffc:	1007af10 	.word	0x1007af10
 23ff000:	1007af2c 	.word	0x1007af2c
 23ff004:	023fef57 	.word	0x023fef57

023ff008 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff008:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff00a:	f7ff ffdb 	bl	23fefc4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff00e:	4b07      	ldr	r3, [pc, #28]	; (23ff02c <_Z15serialEventRun2v+0x24>)
 23ff010:	4604      	mov	r4, r0
 23ff012:	b153      	cbz	r3, 23ff02a <_Z15serialEventRun2v+0x22>
 23ff014:	f7ff fd7a 	bl	23feb0c <_ZN11USARTSerial9isEnabledEv>
 23ff018:	b138      	cbz	r0, 23ff02a <_Z15serialEventRun2v+0x22>
 23ff01a:	6823      	ldr	r3, [r4, #0]
 23ff01c:	4620      	mov	r0, r4
 23ff01e:	691b      	ldr	r3, [r3, #16]
 23ff020:	4798      	blx	r3
 23ff022:	2800      	cmp	r0, #0
 23ff024:	dd01      	ble.n	23ff02a <_Z15serialEventRun2v+0x22>
        handler();
 23ff026:	e000      	b.n	23ff02a <_Z15serialEventRun2v+0x22>
 23ff028:	bf00      	nop
}
 23ff02a:	bd10      	pop	{r4, pc}
 23ff02c:	00000000 	.word	0x00000000

023ff030 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff030:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff032:	4c0d      	ldr	r4, [pc, #52]	; (23ff068 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff034:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff036:	e8d4 3f8f 	ldab	r3, [r4]
 23ff03a:	07db      	lsls	r3, r3, #31
 23ff03c:	d411      	bmi.n	23ff062 <_Z22__fetch_global_Serial3v+0x32>
 23ff03e:	4620      	mov	r0, r4
 23ff040:	f7fd f870 	bl	23fc124 <__cxa_guard_acquire>
 23ff044:	b168      	cbz	r0, 23ff062 <_Z22__fetch_global_Serial3v+0x32>
 23ff046:	a801      	add	r0, sp, #4
 23ff048:	f7ff ff92 	bl	23fef70 <_Z20acquireSerial3Bufferv>
 23ff04c:	2102      	movs	r1, #2
 23ff04e:	aa01      	add	r2, sp, #4
 23ff050:	4806      	ldr	r0, [pc, #24]	; (23ff06c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff052:	f7ff fd3d 	bl	23fead0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff056:	4620      	mov	r0, r4
 23ff058:	f7fd f869 	bl	23fc12e <__cxa_guard_release>
 23ff05c:	4804      	ldr	r0, [pc, #16]	; (23ff070 <_Z22__fetch_global_Serial3v+0x40>)
 23ff05e:	f000 f821 	bl	23ff0a4 <atexit>
	return serial3;
}
 23ff062:	4802      	ldr	r0, [pc, #8]	; (23ff06c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff064:	b006      	add	sp, #24
 23ff066:	bd10      	pop	{r4, pc}
 23ff068:	1007af14 	.word	0x1007af14
 23ff06c:	1007af40 	.word	0x1007af40
 23ff070:	023fef55 	.word	0x023fef55

023ff074 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff074:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff076:	f7ff ffdb 	bl	23ff030 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff07a:	4b07      	ldr	r3, [pc, #28]	; (23ff098 <_Z15serialEventRun3v+0x24>)
 23ff07c:	4604      	mov	r4, r0
 23ff07e:	b153      	cbz	r3, 23ff096 <_Z15serialEventRun3v+0x22>
 23ff080:	f7ff fd44 	bl	23feb0c <_ZN11USARTSerial9isEnabledEv>
 23ff084:	b138      	cbz	r0, 23ff096 <_Z15serialEventRun3v+0x22>
 23ff086:	6823      	ldr	r3, [r4, #0]
 23ff088:	4620      	mov	r0, r4
 23ff08a:	691b      	ldr	r3, [r3, #16]
 23ff08c:	4798      	blx	r3
 23ff08e:	2800      	cmp	r0, #0
 23ff090:	dd01      	ble.n	23ff096 <_Z15serialEventRun3v+0x22>
        handler();
 23ff092:	e000      	b.n	23ff096 <_Z15serialEventRun3v+0x22>
 23ff094:	bf00      	nop
}
 23ff096:	bd10      	pop	{r4, pc}
 23ff098:	00000000 	.word	0x00000000

023ff09c <_ZnwjRKSt9nothrow_t>:
 23ff09c:	f7fd b82f 	b.w	23fc0fe <_Znwj>

023ff0a0 <_ZnajRKSt9nothrow_t>:
 23ff0a0:	f7fd b82f 	b.w	23fc102 <_Znaj>

023ff0a4 <atexit>:
 23ff0a4:	2300      	movs	r3, #0
 23ff0a6:	4601      	mov	r1, r0
 23ff0a8:	461a      	mov	r2, r3
 23ff0aa:	4618      	mov	r0, r3
 23ff0ac:	f000 b93c 	b.w	23ff328 <__register_exitproc>

023ff0b0 <isprint>:
 23ff0b0:	4b02      	ldr	r3, [pc, #8]	; (23ff0bc <isprint+0xc>)
 23ff0b2:	4418      	add	r0, r3
 23ff0b4:	7840      	ldrb	r0, [r0, #1]
 23ff0b6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff0ba:	4770      	bx	lr
 23ff0bc:	023ffe6d 	.word	0x023ffe6d

023ff0c0 <__retarget_lock_acquire_recursive>:
 23ff0c0:	4770      	bx	lr

023ff0c2 <__retarget_lock_release>:
 23ff0c2:	4770      	bx	lr

023ff0c4 <__retarget_lock_release_recursive>:
 23ff0c4:	4770      	bx	lr

023ff0c6 <memcpy>:
 23ff0c6:	440a      	add	r2, r1
 23ff0c8:	1e43      	subs	r3, r0, #1
 23ff0ca:	4291      	cmp	r1, r2
 23ff0cc:	d100      	bne.n	23ff0d0 <memcpy+0xa>
 23ff0ce:	4770      	bx	lr
 23ff0d0:	b510      	push	{r4, lr}
 23ff0d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff0d6:	4291      	cmp	r1, r2
 23ff0d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff0dc:	d1f9      	bne.n	23ff0d2 <memcpy+0xc>
 23ff0de:	bd10      	pop	{r4, pc}

023ff0e0 <memmove>:
 23ff0e0:	4288      	cmp	r0, r1
 23ff0e2:	b510      	push	{r4, lr}
 23ff0e4:	eb01 0402 	add.w	r4, r1, r2
 23ff0e8:	d902      	bls.n	23ff0f0 <memmove+0x10>
 23ff0ea:	4284      	cmp	r4, r0
 23ff0ec:	4623      	mov	r3, r4
 23ff0ee:	d807      	bhi.n	23ff100 <memmove+0x20>
 23ff0f0:	1e43      	subs	r3, r0, #1
 23ff0f2:	42a1      	cmp	r1, r4
 23ff0f4:	d008      	beq.n	23ff108 <memmove+0x28>
 23ff0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff0fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff0fe:	e7f8      	b.n	23ff0f2 <memmove+0x12>
 23ff100:	4402      	add	r2, r0
 23ff102:	4601      	mov	r1, r0
 23ff104:	428a      	cmp	r2, r1
 23ff106:	d100      	bne.n	23ff10a <memmove+0x2a>
 23ff108:	bd10      	pop	{r4, pc}
 23ff10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff10e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff112:	e7f7      	b.n	23ff104 <memmove+0x24>

023ff114 <memset>:
 23ff114:	4402      	add	r2, r0
 23ff116:	4603      	mov	r3, r0
 23ff118:	4293      	cmp	r3, r2
 23ff11a:	d100      	bne.n	23ff11e <memset+0xa>
 23ff11c:	4770      	bx	lr
 23ff11e:	f803 1b01 	strb.w	r1, [r3], #1
 23ff122:	e7f9      	b.n	23ff118 <memset+0x4>

023ff124 <srand>:
 23ff124:	b538      	push	{r3, r4, r5, lr}
 23ff126:	4b10      	ldr	r3, [pc, #64]	; (23ff168 <srand+0x44>)
 23ff128:	4604      	mov	r4, r0
 23ff12a:	681d      	ldr	r5, [r3, #0]
 23ff12c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff12e:	b9b3      	cbnz	r3, 23ff15e <srand+0x3a>
 23ff130:	2018      	movs	r0, #24
 23ff132:	f7fd feb3 	bl	23fce9c <malloc>
 23ff136:	4602      	mov	r2, r0
 23ff138:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff13a:	b920      	cbnz	r0, 23ff146 <srand+0x22>
 23ff13c:	4b0b      	ldr	r3, [pc, #44]	; (23ff16c <srand+0x48>)
 23ff13e:	2142      	movs	r1, #66	; 0x42
 23ff140:	480b      	ldr	r0, [pc, #44]	; (23ff170 <srand+0x4c>)
 23ff142:	f7fd fef1 	bl	23fcf28 <__assert_func>
 23ff146:	490b      	ldr	r1, [pc, #44]	; (23ff174 <srand+0x50>)
 23ff148:	4b0b      	ldr	r3, [pc, #44]	; (23ff178 <srand+0x54>)
 23ff14a:	e9c0 1300 	strd	r1, r3, [r0]
 23ff14e:	4b0b      	ldr	r3, [pc, #44]	; (23ff17c <srand+0x58>)
 23ff150:	2100      	movs	r1, #0
 23ff152:	6083      	str	r3, [r0, #8]
 23ff154:	230b      	movs	r3, #11
 23ff156:	8183      	strh	r3, [r0, #12]
 23ff158:	2001      	movs	r0, #1
 23ff15a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff15e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff160:	2200      	movs	r2, #0
 23ff162:	611c      	str	r4, [r3, #16]
 23ff164:	615a      	str	r2, [r3, #20]
 23ff166:	bd38      	pop	{r3, r4, r5, pc}
 23ff168:	1007a9b4 	.word	0x1007a9b4
 23ff16c:	023ffdfd 	.word	0x023ffdfd
 23ff170:	023ffe14 	.word	0x023ffe14
 23ff174:	abcd330e 	.word	0xabcd330e
 23ff178:	e66d1234 	.word	0xe66d1234
 23ff17c:	0005deec 	.word	0x0005deec

023ff180 <strchr>:
 23ff180:	b2c9      	uxtb	r1, r1
 23ff182:	4603      	mov	r3, r0
 23ff184:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff188:	b11a      	cbz	r2, 23ff192 <strchr+0x12>
 23ff18a:	428a      	cmp	r2, r1
 23ff18c:	d1f9      	bne.n	23ff182 <strchr+0x2>
 23ff18e:	4618      	mov	r0, r3
 23ff190:	4770      	bx	lr
 23ff192:	2900      	cmp	r1, #0
 23ff194:	bf18      	it	ne
 23ff196:	2300      	movne	r3, #0
 23ff198:	e7f9      	b.n	23ff18e <strchr+0xe>

023ff19a <strchrnul>:
 23ff19a:	b510      	push	{r4, lr}
 23ff19c:	4604      	mov	r4, r0
 23ff19e:	f7ff ffef 	bl	23ff180 <strchr>
 23ff1a2:	b918      	cbnz	r0, 23ff1ac <strchrnul+0x12>
 23ff1a4:	4620      	mov	r0, r4
 23ff1a6:	f7fc ff85 	bl	23fc0b4 <strlen>
 23ff1aa:	4420      	add	r0, r4
 23ff1ac:	bd10      	pop	{r4, pc}

023ff1ae <strcpy>:
 23ff1ae:	4603      	mov	r3, r0
 23ff1b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff1b4:	f803 2b01 	strb.w	r2, [r3], #1
 23ff1b8:	2a00      	cmp	r2, #0
 23ff1ba:	d1f9      	bne.n	23ff1b0 <strcpy+0x2>
 23ff1bc:	4770      	bx	lr

023ff1be <strncmp>:
 23ff1be:	b510      	push	{r4, lr}
 23ff1c0:	b17a      	cbz	r2, 23ff1e2 <strncmp+0x24>
 23ff1c2:	4603      	mov	r3, r0
 23ff1c4:	3901      	subs	r1, #1
 23ff1c6:	1884      	adds	r4, r0, r2
 23ff1c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff1cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff1d0:	4290      	cmp	r0, r2
 23ff1d2:	d101      	bne.n	23ff1d8 <strncmp+0x1a>
 23ff1d4:	42a3      	cmp	r3, r4
 23ff1d6:	d101      	bne.n	23ff1dc <strncmp+0x1e>
 23ff1d8:	1a80      	subs	r0, r0, r2
 23ff1da:	bd10      	pop	{r4, pc}
 23ff1dc:	2800      	cmp	r0, #0
 23ff1de:	d1f3      	bne.n	23ff1c8 <strncmp+0xa>
 23ff1e0:	e7fa      	b.n	23ff1d8 <strncmp+0x1a>
 23ff1e2:	4610      	mov	r0, r2
 23ff1e4:	e7f9      	b.n	23ff1da <strncmp+0x1c>

023ff1e6 <strrchr>:
 23ff1e6:	b538      	push	{r3, r4, r5, lr}
 23ff1e8:	4603      	mov	r3, r0
 23ff1ea:	460c      	mov	r4, r1
 23ff1ec:	b969      	cbnz	r1, 23ff20a <strrchr+0x24>
 23ff1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff1f2:	f7ff bfc5 	b.w	23ff180 <strchr>
 23ff1f6:	1c43      	adds	r3, r0, #1
 23ff1f8:	4605      	mov	r5, r0
 23ff1fa:	4621      	mov	r1, r4
 23ff1fc:	4618      	mov	r0, r3
 23ff1fe:	f7ff ffbf 	bl	23ff180 <strchr>
 23ff202:	2800      	cmp	r0, #0
 23ff204:	d1f7      	bne.n	23ff1f6 <strrchr+0x10>
 23ff206:	4628      	mov	r0, r5
 23ff208:	bd38      	pop	{r3, r4, r5, pc}
 23ff20a:	2500      	movs	r5, #0
 23ff20c:	e7f5      	b.n	23ff1fa <strrchr+0x14>
	...

023ff210 <_strtol_l.constprop.0>:
 23ff210:	2b01      	cmp	r3, #1
 23ff212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff216:	d001      	beq.n	23ff21c <_strtol_l.constprop.0+0xc>
 23ff218:	2b24      	cmp	r3, #36	; 0x24
 23ff21a:	d906      	bls.n	23ff22a <_strtol_l.constprop.0+0x1a>
 23ff21c:	f7fd fe76 	bl	23fcf0c <__errno>
 23ff220:	2316      	movs	r3, #22
 23ff222:	6003      	str	r3, [r0, #0]
 23ff224:	2000      	movs	r0, #0
 23ff226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff22a:	460d      	mov	r5, r1
 23ff22c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff310 <_strtol_l.constprop.0+0x100>
 23ff230:	462e      	mov	r6, r5
 23ff232:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff236:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff23a:	f017 0708 	ands.w	r7, r7, #8
 23ff23e:	d1f7      	bne.n	23ff230 <_strtol_l.constprop.0+0x20>
 23ff240:	2c2d      	cmp	r4, #45	; 0x2d
 23ff242:	d132      	bne.n	23ff2aa <_strtol_l.constprop.0+0x9a>
 23ff244:	782c      	ldrb	r4, [r5, #0]
 23ff246:	2701      	movs	r7, #1
 23ff248:	1cb5      	adds	r5, r6, #2
 23ff24a:	2b00      	cmp	r3, #0
 23ff24c:	d05b      	beq.n	23ff306 <_strtol_l.constprop.0+0xf6>
 23ff24e:	2b10      	cmp	r3, #16
 23ff250:	d109      	bne.n	23ff266 <_strtol_l.constprop.0+0x56>
 23ff252:	2c30      	cmp	r4, #48	; 0x30
 23ff254:	d107      	bne.n	23ff266 <_strtol_l.constprop.0+0x56>
 23ff256:	782c      	ldrb	r4, [r5, #0]
 23ff258:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff25c:	2c58      	cmp	r4, #88	; 0x58
 23ff25e:	d14d      	bne.n	23ff2fc <_strtol_l.constprop.0+0xec>
 23ff260:	786c      	ldrb	r4, [r5, #1]
 23ff262:	2310      	movs	r3, #16
 23ff264:	3502      	adds	r5, #2
 23ff266:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff26a:	f04f 0c00 	mov.w	ip, #0
 23ff26e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff272:	4666      	mov	r6, ip
 23ff274:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff278:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff27c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff280:	f1be 0f09 	cmp.w	lr, #9
 23ff284:	d816      	bhi.n	23ff2b4 <_strtol_l.constprop.0+0xa4>
 23ff286:	4674      	mov	r4, lr
 23ff288:	42a3      	cmp	r3, r4
 23ff28a:	dd24      	ble.n	23ff2d6 <_strtol_l.constprop.0+0xc6>
 23ff28c:	f1bc 0f00 	cmp.w	ip, #0
 23ff290:	db1e      	blt.n	23ff2d0 <_strtol_l.constprop.0+0xc0>
 23ff292:	45b1      	cmp	r9, r6
 23ff294:	d31c      	bcc.n	23ff2d0 <_strtol_l.constprop.0+0xc0>
 23ff296:	d101      	bne.n	23ff29c <_strtol_l.constprop.0+0x8c>
 23ff298:	45a2      	cmp	sl, r4
 23ff29a:	db19      	blt.n	23ff2d0 <_strtol_l.constprop.0+0xc0>
 23ff29c:	fb06 4603 	mla	r6, r6, r3, r4
 23ff2a0:	f04f 0c01 	mov.w	ip, #1
 23ff2a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff2a8:	e7e8      	b.n	23ff27c <_strtol_l.constprop.0+0x6c>
 23ff2aa:	2c2b      	cmp	r4, #43	; 0x2b
 23ff2ac:	bf04      	itt	eq
 23ff2ae:	782c      	ldrbeq	r4, [r5, #0]
 23ff2b0:	1cb5      	addeq	r5, r6, #2
 23ff2b2:	e7ca      	b.n	23ff24a <_strtol_l.constprop.0+0x3a>
 23ff2b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff2b8:	f1be 0f19 	cmp.w	lr, #25
 23ff2bc:	d801      	bhi.n	23ff2c2 <_strtol_l.constprop.0+0xb2>
 23ff2be:	3c37      	subs	r4, #55	; 0x37
 23ff2c0:	e7e2      	b.n	23ff288 <_strtol_l.constprop.0+0x78>
 23ff2c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff2c6:	f1be 0f19 	cmp.w	lr, #25
 23ff2ca:	d804      	bhi.n	23ff2d6 <_strtol_l.constprop.0+0xc6>
 23ff2cc:	3c57      	subs	r4, #87	; 0x57
 23ff2ce:	e7db      	b.n	23ff288 <_strtol_l.constprop.0+0x78>
 23ff2d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff2d4:	e7e6      	b.n	23ff2a4 <_strtol_l.constprop.0+0x94>
 23ff2d6:	f1bc 0f00 	cmp.w	ip, #0
 23ff2da:	da05      	bge.n	23ff2e8 <_strtol_l.constprop.0+0xd8>
 23ff2dc:	2322      	movs	r3, #34	; 0x22
 23ff2de:	4646      	mov	r6, r8
 23ff2e0:	6003      	str	r3, [r0, #0]
 23ff2e2:	b942      	cbnz	r2, 23ff2f6 <_strtol_l.constprop.0+0xe6>
 23ff2e4:	4630      	mov	r0, r6
 23ff2e6:	e79e      	b.n	23ff226 <_strtol_l.constprop.0+0x16>
 23ff2e8:	b107      	cbz	r7, 23ff2ec <_strtol_l.constprop.0+0xdc>
 23ff2ea:	4276      	negs	r6, r6
 23ff2ec:	2a00      	cmp	r2, #0
 23ff2ee:	d0f9      	beq.n	23ff2e4 <_strtol_l.constprop.0+0xd4>
 23ff2f0:	f1bc 0f00 	cmp.w	ip, #0
 23ff2f4:	d000      	beq.n	23ff2f8 <_strtol_l.constprop.0+0xe8>
 23ff2f6:	1e69      	subs	r1, r5, #1
 23ff2f8:	6011      	str	r1, [r2, #0]
 23ff2fa:	e7f3      	b.n	23ff2e4 <_strtol_l.constprop.0+0xd4>
 23ff2fc:	2430      	movs	r4, #48	; 0x30
 23ff2fe:	2b00      	cmp	r3, #0
 23ff300:	d1b1      	bne.n	23ff266 <_strtol_l.constprop.0+0x56>
 23ff302:	2308      	movs	r3, #8
 23ff304:	e7af      	b.n	23ff266 <_strtol_l.constprop.0+0x56>
 23ff306:	2c30      	cmp	r4, #48	; 0x30
 23ff308:	d0a5      	beq.n	23ff256 <_strtol_l.constprop.0+0x46>
 23ff30a:	230a      	movs	r3, #10
 23ff30c:	e7ab      	b.n	23ff266 <_strtol_l.constprop.0+0x56>
 23ff30e:	bf00      	nop
 23ff310:	023ffe6e 	.word	0x023ffe6e

023ff314 <strtol>:
 23ff314:	4613      	mov	r3, r2
 23ff316:	460a      	mov	r2, r1
 23ff318:	4601      	mov	r1, r0
 23ff31a:	4802      	ldr	r0, [pc, #8]	; (23ff324 <strtol+0x10>)
 23ff31c:	6800      	ldr	r0, [r0, #0]
 23ff31e:	f7ff bf77 	b.w	23ff210 <_strtol_l.constprop.0>
 23ff322:	bf00      	nop
 23ff324:	1007a9b4 	.word	0x1007a9b4

023ff328 <__register_exitproc>:
 23ff328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff32c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff3ec <__register_exitproc+0xc4>
 23ff330:	4606      	mov	r6, r0
 23ff332:	461f      	mov	r7, r3
 23ff334:	460d      	mov	r5, r1
 23ff336:	f8d8 0000 	ldr.w	r0, [r8]
 23ff33a:	4691      	mov	r9, r2
 23ff33c:	f7ff fec0 	bl	23ff0c0 <__retarget_lock_acquire_recursive>
 23ff340:	4b26      	ldr	r3, [pc, #152]	; (23ff3dc <__register_exitproc+0xb4>)
 23ff342:	681c      	ldr	r4, [r3, #0]
 23ff344:	b934      	cbnz	r4, 23ff354 <__register_exitproc+0x2c>
 23ff346:	4c26      	ldr	r4, [pc, #152]	; (23ff3e0 <__register_exitproc+0xb8>)
 23ff348:	601c      	str	r4, [r3, #0]
 23ff34a:	4b26      	ldr	r3, [pc, #152]	; (23ff3e4 <__register_exitproc+0xbc>)
 23ff34c:	b113      	cbz	r3, 23ff354 <__register_exitproc+0x2c>
 23ff34e:	681b      	ldr	r3, [r3, #0]
 23ff350:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff354:	6863      	ldr	r3, [r4, #4]
 23ff356:	2b1f      	cmp	r3, #31
 23ff358:	dd07      	ble.n	23ff36a <__register_exitproc+0x42>
 23ff35a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff35e:	f7ff feb1 	bl	23ff0c4 <__retarget_lock_release_recursive>
 23ff362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff36a:	b35e      	cbz	r6, 23ff3c4 <__register_exitproc+0x9c>
 23ff36c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff370:	b988      	cbnz	r0, 23ff396 <__register_exitproc+0x6e>
 23ff372:	4b1d      	ldr	r3, [pc, #116]	; (23ff3e8 <__register_exitproc+0xc0>)
 23ff374:	b923      	cbnz	r3, 23ff380 <__register_exitproc+0x58>
 23ff376:	f8d8 0000 	ldr.w	r0, [r8]
 23ff37a:	f7ff fea2 	bl	23ff0c2 <__retarget_lock_release>
 23ff37e:	e7f0      	b.n	23ff362 <__register_exitproc+0x3a>
 23ff380:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff384:	f7fd fd8a 	bl	23fce9c <malloc>
 23ff388:	2800      	cmp	r0, #0
 23ff38a:	d0f4      	beq.n	23ff376 <__register_exitproc+0x4e>
 23ff38c:	2300      	movs	r3, #0
 23ff38e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff392:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff396:	6863      	ldr	r3, [r4, #4]
 23ff398:	2201      	movs	r2, #1
 23ff39a:	2e02      	cmp	r6, #2
 23ff39c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff3a0:	fa02 f203 	lsl.w	r2, r2, r3
 23ff3a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff3a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff3ac:	ea43 0302 	orr.w	r3, r3, r2
 23ff3b0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff3b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff3b8:	bf02      	ittt	eq
 23ff3ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff3be:	4313      	orreq	r3, r2
 23ff3c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff3c4:	6863      	ldr	r3, [r4, #4]
 23ff3c6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff3ca:	1c5a      	adds	r2, r3, #1
 23ff3cc:	3302      	adds	r3, #2
 23ff3ce:	6062      	str	r2, [r4, #4]
 23ff3d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff3d4:	f7ff fe76 	bl	23ff0c4 <__retarget_lock_release_recursive>
 23ff3d8:	2000      	movs	r0, #0
 23ff3da:	e7c4      	b.n	23ff366 <__register_exitproc+0x3e>
 23ff3dc:	1007afe4 	.word	0x1007afe4
 23ff3e0:	1007af58 	.word	0x1007af58
 23ff3e4:	00000000 	.word	0x00000000
 23ff3e8:	023fce9d 	.word	0x023fce9d
 23ff3ec:	1007aa18 	.word	0x1007aa18

023ff3f0 <dynalib_user>:
 23ff3f0:	023fc0c5 023fc0ed 023fc0f1 00000000     ..?...?...?.....
 23ff400:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff410:	6c617574 66656400 746c7561 534d0020     tual.default .MS
 23ff420:	534c0042 533c0042 65534950 6e697474     B.LSB.<SPISettin
 23ff430:	64207367 75616665 003e746c 4950533c     gs default>.<SPI
 23ff440:	74746553 73676e69 25732520 73252075     Settings %s%u %s
 23ff450:	444f4d20 3e752545 67644500 6d492065      MODE%u>.Edge Im
 23ff460:	736c7570 6e692065 65726566 2065636e     pulse inference 
 23ff470:	6e6e7572 66207265 5020726f 69747261     runner for Parti
 23ff480:	20656c63 69766564 0d736563 6f6e000a     cle devices...no
 23ff490:	61747320 20737574 2c746579 69617720      status yet, wai
 23ff4a0:	676e6974 726f6620 63636120 72656c65     ting for acceler
 23ff4b0:	74656d6f 0a0d7265 74530a00 69747261     ometer....Starti
 23ff4c0:	6920676e 7265666e 69636e65 6920676e     ng inferencing i
 23ff4d0:	2032206e 6f636573 2e73646e 000a2e2e     n 2 seconds.....
 23ff4e0:	706d6153 676e696c 0a2e2e2e 00000000     Sampling........

023ff4f0 <_ZTVN8particle11SPISettingsE>:
	...
 23ff4f8:	023fc1ad 023fc135 023fc139              ..?.5.?.9.?.

023ff504 <_ZTVN5spark10LogHandlerE>:
	...
 23ff514:	023fc10d 023fc137                       ..?.7.?.

023ff51c <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff524:	023fc149 023fc17d 023fe1a9 023fe351     I.?.}.?...?.Q.?.

023ff534 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23ff534:	00000001 ffffff93                       ........

023ff53c <_ZN12_GLOBAL__N_1L11quant1_zeroE>:
 23ff53c:	00000001 00000000                       ........

023ff544 <_ZN12_GLOBAL__N_1L11quant2_zeroE>:
 23ff544:	00000001 00000000                       ........

023ff54c <_ZN12_GLOBAL__N_1L11quant3_zeroE>:
 23ff54c:	00000001 00000000                       ........

023ff554 <_ZN12_GLOBAL__N_1L11quant4_zeroE>:
 23ff554:	00000001 00000000                       ........

023ff55c <_ZN12_GLOBAL__N_1L11quant5_zeroE>:
 23ff55c:	00000001 00000000                       ........

023ff564 <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23ff564:	00000001 00000000                       ........

023ff56c <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23ff56c:	00000001 ffffff80                       ........

023ff574 <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23ff574:	00000001 ffffff80                       ........

023ff57c <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23ff57c:	00000001 ffffffff                       ........

023ff584 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23ff584:	00000001 3ee8b8de                       .......>

023ff58c <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23ff58c:	00000001 ffffff80                       ........

023ff594 <_ZN12_GLOBAL__N_1L12quant1_scaleE>:
 23ff594:	00000001 3bcd23c7                       .....#.;

023ff59c <_ZN12_GLOBAL__N_1L12quant2_scaleE>:
 23ff59c:	00000001 3b3a7c90                       .....|:;

023ff5a4 <_ZN12_GLOBAL__N_1L12quant3_scaleE>:
 23ff5a4:	00000001 3c0e7f0d                       .......<

023ff5ac <_ZN12_GLOBAL__N_1L12quant4_scaleE>:
 23ff5ac:	00000001 3ab0be43                       ....C..:

023ff5b4 <_ZN12_GLOBAL__N_1L12quant5_scaleE>:
 23ff5b4:	00000001 3c059ed9                       .......<

023ff5bc <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23ff5bc:	00000001 3abfe2bb                       .......:

023ff5c4 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23ff5c4:	00000001 3e1ec350                       ....P..>

023ff5cc <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23ff5cc:	00000001 3e37d079                       ....y.7>

023ff5d4 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23ff5d4:	00000001 3e77bf7d 00000000              ....}.w>....

023ff5e0 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23ff5e0:	fbd6dfd4 e5dd0aef f23812e3 1f0026e9     ..........8..&..
 23ff5f0:	e224e623 e235d82f 23d3e9e9 dadce6e4     #.$./.5....#....
 23ff600:	f5183411 10192ef1 0eeef928 e22f2634     .4......(...4&/.
 23ff610:	05f7282d f4eadcd1 ee0e24e4 01d4c6d5     -(.......$......
 23ff620:	0143f6cd c3262a03 ba03b5e4 9c30e3dc     ..C..*&.......0.
 23ff630:	0c2825f4 f1cbb0bf 2ae2d5e0 03e2db28     .%(........*(...
 23ff640:	0825e925 0dd2fee7 db32812f 27e116d3     %.%...../.2....'
 23ff650:	dcea09f1 f3bcb0de 0e1bf824 0539252f     ........$.../%9.
 23ff660:	060221c9 5ef70ef3 45e5e243 ef3dfb0b     .!.....^C..E..=.
 23ff670:	f31820a1 f1ccfb1d daebf020 27e5e8e7     . ...... ......'
 23ff680:	1afc32f9 fb11171d 04d4de07 2e3ee9fc     .2............>.
 23ff690:	2709f926 d3020a0e ecfe1021 f3e30ddf     &..'....!.......
 23ff6a0:	4be3231a 3910fada f9e3ff21 33e0ecd8     .#.K...9!......3
 23ff6b0:	f0ef2e29 e9361534 cde1f3e1 2fed42f7     )...4.6......B./
 23ff6c0:	1c363119 da11fe4a fcd513e5 1efe22ea     .16.J........"..
 23ff6d0:	21f72e33 d0d0d5d6 362e1c55 fc200b36     3..!....U..66. .
 23ff6e0:	0b0be035 2512cdba eee0f42a 2009e8e2     5......%*...... 
 23ff6f0:	f942f807 f213d60c 00be0ebf 0ae5bec5     ..B.............
 23ff700:	e8db1414 b0b4d4d2 3fb2d9d4 ef44260a     ...........?.&D.
 23ff710:	fdddcc29 09fec605 db272501 ff0e1b0d     )........%'.....
 23ff720:	17d8ec2b f1dfff1d 2842f21b f60e0417     +.........B(....
 23ff730:	cdc131ef 0de10c27 283c29f9 14e413ed     .1..'....)<(....
 23ff740:	f33502ff 25ed0d10 f4ee0701 26da0c16     ..5....%.......&
 23ff750:	37f83d42 212b0af5 20cc13d5 1718f337     B=.7..+!... 7...
 23ff760:	f43511f8 f0efff1c f63fe39c 1fff0e07     ..5.......?.....
 23ff770:	36f64204 2be6cff0 0ae2eaeb 21fcdc1d     .B.6...+.......!
 23ff780:	dc216dd2 efca0938 0afb0311 0d0b19dc     .m!.8...........
 23ff790:	1125f3f3 eb282328 dbcfff14 35160b1b     ..%.(#(........5
 23ff7a0:	17f22531 d6fb3a27 c81efdf5 24ebdc0c     1%..':.........$
 23ff7b0:	2f211ee3 dd11210b e002e420 def123ee     ..!/.!.. ....#..
 23ff7c0:	e23d21d0 eac6f513 ef25edc7 1ddaf1cd     .!=.......%.....
 23ff7d0:	eb19e43d ebda2aef fde305f0 f91e10e2     =....*..........
 23ff7e0:	0cf71bf6 0c29231c da4814de cd1d17cd     .....#)...H.....
 23ff7f0:	d0ef11dc 2bef212e 0140cbeb 44292b0a     .....!.+..@..+)D
 23ff800:	bacd2700 e220fc40 bdd514fa f5acd5af     .'..@. .........
 23ff810:	e1ee0ee1 311deef5 22512efb 1be0f1db     .......1..Q"....
 23ff820:	262c171d 0f15de2f f83cd0e9 1745e62c     ..,&/.....<.,.E.
 23ff830:	e5391345 1cd5e21f 4a3a29c1 f8ca0e25     E.9......):J%...
 23ff840:	ffecd9c4 ea2ff80e 0206cbef eb19ece1     ....../.........
 23ff850:	001c2acb dceef0f4 d0fa07f0 19edc4db     .*..............
 23ff860:	eec90b19 20e3cbde 09ef0d19 f0fe2931     ....... ....1)..
 23ff870:	090719f5 c7d3ebf7 21e1f315 f7422cf1     ...........!.,B.
 23ff880:	1afe0e19 14f910d9 f14705f6 31eb32f9     ..........G..2.1
 23ff890:	12e4c306 150e1628 30efec1e 1cd7ef1b     ....(......0....
 23ff8a0:	38234009 1a183027 eb2408f2 100803e0     .@#8'0....$.....
 23ff8b0:	d630f6ef ebf33af6 20e05426 113d4141     ..0..:..&T. AA=.
 23ff8c0:	1d42381d 1f18ea20 faf7050f f22b29cf     .8B. ........)+.
 23ff8d0:	27e7fb25 05ce040c 2414e7f0 f9271bcd     %..'.......$..'.
 23ff8e0:	cfc9d32c 0a152dd6 14e32300 00000000     ,....-...#......

023ff8f0 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23ff8f0:	ffffffe8 00000000 ffffffee 00000061     ............a...
 23ff900:	0000004c ffffffe6 000000a1 00000050     L...........P...
 23ff910:	00000050 00000038 00000006 0000001a     P...8...........
 23ff920:	fffffff7 0000000e 0000003b 00000085     ........;.......
 23ff930:	fffffff6 0000004a 00000045 ffffffe9     ....J...E.......

023ff940 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23ff940:	0109e9e0 08f6dd21 e4f0cbd0 06f91f2c     ....!.......,...
 23ff950:	07f101d3 12e102eb 364ffb05 d90ad3fc     ..........O6....
 23ff960:	d208fb03 da102026 f73760da d8fe111e     ....& ...`7.....
 23ff970:	2acf2e48 f3c8ad03 fad24ceb f4aee3f3     H..*.....L......
 23ff980:	516b060a 083ada32 602bf61a ec211e2e     ..kQ2.:...+`..!.
 23ff990:	bd1d09f8 fec657b3 b73e4ec5 160906cd     .....W...N>.....
 23ff9a0:	064d81fe 09db251b eefcf1db 2acdce30     ..M..%......0..*
 23ff9b0:	2fe410d7 25d3fad2 50d2e71f 0b17de28     .../...%...P(...
 23ff9c0:	1eca381d 2ff2f6c8 e60f1307 cfd828e4     .8...../.....(..
 23ff9d0:	d7dceff3 271e1422 e9f2faf4 12e705e5     ...."..'........
 23ff9e0:	3eeb14da c363f643 2004eb09 4d0a3e28     ...>C.c.... (>.M
 23ff9f0:	0a0b63cc 2a4633f1 d2f62cd7 2bf4f340     .c...3F*.,..@..+
 23ffa00:	f4a7c7ce 2ce14029 00000000 00000000     ....)@.,........

023ffa10 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23ffa10:	00000001 ffffffe6 00000034 0000002a     ........4...*...
 23ffa20:	00000073 ffffffe2 00000084 ffffffce     s...............
 23ffa30:	0000003a ffffffd2 00000000 00000000     :...............

023ffa40 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23ffa40:	43e93afa 01bbe9da cd1dfa0c 14d31933     .:.C........3...
 23ffa50:	284fd66b 2c81b19c ec041b40 31b19c06     k.O(...,@......1
 23ffa60:	fd1fc863 7a95bfc7 00000000 00000000     c......z........

023ffa70 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23ffa70:	00000028 ffffffce 00000034 0000000f     (.......4.......

023ffa80 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23ffa80:	00000001 3b800000                       .......;

023ffa88 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23ffa88:	00000002 00000001 00000027              ........'...

023ffa94 <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23ffa94:	00000002 00000014 00000027              ........'...

023ffaa0 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23ffaa0:	00000001 00000014                       ........

023ffaa8 <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23ffaa8:	00000002 0000000a 00000014              ............

023ffab4 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23ffab4:	00000001 0000000a                       ........

023ffabc <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23ffabc:	00000002 00000004 0000000a              ............

023ffac8 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23ffac8:	00000001 00000004                       ........

023ffad0 <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23ffad0:	00000002 00000001 00000014              ............

023ffadc <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23ffadc:	00000002 00000001 0000000a              ............

023ffae8 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23ffae8:	00000002 00000001 00000004              ............

023ffaf4 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23ffaf4:	00000002 00000001 00000004              ............

023ffb00 <_ZN12_GLOBAL__N_1L6quant0E>:
 23ffb00:	023ff584 023ff534 00000000              ..?.4.?.....

023ffb0c <_ZN12_GLOBAL__N_1L6quant1E>:
 23ffb0c:	023ff594 023ff53c 00000000              ..?.<.?.....

023ffb18 <_ZN12_GLOBAL__N_1L6quant2E>:
 23ffb18:	023ff59c 023ff544 00000000              ..?.D.?.....

023ffb24 <_ZN12_GLOBAL__N_1L6quant3E>:
 23ffb24:	023ff5a4 023ff54c 00000000              ..?.L.?.....

023ffb30 <_ZN12_GLOBAL__N_1L6quant4E>:
 23ffb30:	023ff5ac 023ff554 00000000              ..?.T.?.....

023ffb3c <_ZN12_GLOBAL__N_1L6quant5E>:
 23ffb3c:	023ff5b4 023ff55c 00000000              ..?.\.?.....

023ffb48 <_ZN12_GLOBAL__N_1L6quant6E>:
 23ffb48:	023ff5bc 023ff564 00000000              ..?.d.?.....

023ffb54 <_ZN12_GLOBAL__N_1L6quant7E>:
 23ffb54:	023ff5c4 023ff56c 00000000              ..?.l.?.....

023ffb60 <_ZN12_GLOBAL__N_1L6quant8E>:
 23ffb60:	023ff5cc 023ff574 00000000              ..?.t.?.....

023ffb6c <_ZN12_GLOBAL__N_1L6quant9E>:
 23ffb6c:	023ff5d4 023ff57c 00000000              ..?.|.?.....

023ffb78 <_ZN12_GLOBAL__N_1L7quant10E>:
 23ffb78:	023ffa80 023ff58c 00000000              ..?...?.....

023ffb84 <_ZTV10ADXL362DMA>:
	...
 23ffb8c:	023fc549 023fc54b                       I.?.K.?.

023ffb94 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb9c:	023fd033 023fd029 023fd01f 023fd015     3.?.).?...?...?.
 23ffbac:	023fd009 023fcffd 023fe53d 023fe545     ..?...?.=.?.E.?.
 23ffbbc:	023fcff1 023fcfe9 023fcfdf 023fcfd5     ..?...?...?...?.
 23ffbcc:	023fe575                                u.?.

023ffbd0 <_ZTV7TwoWire>:
	...
 23ffbd8:	023fd051 023fd09b 023fd073 023fd053     Q.?...?.s.?.S.?.
 23ffbe8:	023fd07b 023fd083 023fd08b 023fd093     {.?...?...?...?.

023ffbf8 <_ZTV9IPAddress>:
	...
 23ffc00:	023fd0f5 023fd0e5 023fd0e7 25006425     ..?...?...?.%d.%
 23ffc10:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 23ffc20:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffc30:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffc40:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffc50:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffc60:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffc70:	0066006d 66006e6c 0074006e 65646f63     m.f.ln.fn.t.code
 23ffc80:	74656400 006c6961                       .detail.

023ffc88 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc90:	023fd5a1 023fd5c7 023fd585 023fd203     ..?...?...?...?.

023ffca0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffca8:	023fda55 023fda6d 023fe1a9 023fe351     U.?.m.?...?.Q.?.

023ffcb8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffcc0:	023fda81 023fda95 023fe389 023fd58d     ..?...?...?...?.

023ffcd0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcd8:	023fd59f 023fd5d5 023fe10d 023fd58f     ..?...?...?...?.

023ffce8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcf0:	023fd59d 023fd5e3 023fd9bd 023fd605     ..?...?...?...?.

023ffd00 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd08:	023fe4fd 023fe507 023fe511 023fe51b     ..?...?...?...?.
 23ffd18:	023fe525 023fe531 023fe53d 023fe545     %.?.1.?.=.?.E.?.
 23ffd28:	023fe54d 023fe559 023fe561 023fe56b     M.?.Y.?.a.?.k.?.
 23ffd38:	023fe575                                u.?.

023ffd3c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffd3c:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
 23ffd4c:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
 23ffd5c:	00656d69                                ime.

023ffd60 <_ZTV11USARTSerial>:
	...
 23ffd68:	023fea55 023feac1 023fea99 023fe661     U.?...?...?.a.?.
 23ffd78:	023fea69 023fea85 023fea77 023fea93     i.?...?.w.?...?.
 23ffd88:	023fea57 023fea5b                       W.?.[.?.

023ffd90 <_ZTV9USBSerial>:
	...
 23ffd98:	023feb19 023feb81 023feb57 023fe661     ..?...?.W.?.a.?.
 23ffda8:	023feb49 023feb1b 023feb2b 023feb7b     I.?...?.+.?.{.?.
 23ffdb8:	023feb3b 023feb13                       ;.?...?.

023ffdc0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffdc8:	023fec83 023fec79 023fec6f 023fec25     ..?.y.?.o.?.%.?.
 23ffdd8:	023fec63 023fec57 023fe53d 023fe545     c.?.W.?.=.?.E.?.
 23ffde8:	023fec4b 023fec43 023fec39 023fec2f     K.?.C.?.9.?./.?.
 23ffdf8:	023fe575                                u.?.

023ffdfc <_ZSt7nothrow>:
 23ffdfc:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
 23ffe0c:	65656363 00646564 706d742f 6e656a2f     cceeded./tmp/jen
 23ffe1c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe2c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe3c:	3036315f 30383136 2f393336 2f637273     _1606180639/src/
 23ffe4c:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffe5c:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffe6d <_ctype_>:
 23ffe6d:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffe7d:	20202020 20202020 20202020 20202020                     
 23ffe8d:	10108820 10101010 10101010 10101010      ...............
 23ffe9d:	04040410 04040404 10040404 10101010     ................
 23ffead:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffebd:	01010101 01010101 01010101 10101010     ................
 23ffecd:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffedd:	02020202 02020202 02020202 10101010     ................
 23ffeed:	00000020 00000000 00000000 00000000      ...............
	...

023fff70 <__sf_fake_stderr>:
	...

023fff90 <__sf_fake_stdin>:
	...

023fffb0 <__sf_fake_stdout>:
	...

023fffd0 <link_const_data_end>:
 23fffd0:	023fc43d 	.word	0x023fc43d
 23fffd4:	023fc51d 	.word	0x023fc51d
 23fffd8:	023fc6ad 	.word	0x023fc6ad
 23fffdc:	023fcfc5 	.word	0x023fcfc5
 23fffe0:	023fd03d 	.word	0x023fd03d
 23fffe4:	023fe199 	.word	0x023fe199
 23fffe8:	023fe64d 	.word	0x023fe64d
 23fffec:	023fe775 	.word	0x023fe775
 23ffff0:	023fea1d 	.word	0x023fea1d
 23ffff4:	023fea41 	.word	0x023fea41
 23ffff8:	023fec8d 	.word	0x023fec8d
